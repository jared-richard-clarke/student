* ~Errors.go~

** Sources

| source           | author              |
|------------------+---------------------|
| Package ~errors~ | Go standard library |

** The ~error~ Interface

Package ~errors~ provides functions to manipulate errors in Go. The entire package
is built around the ~error~ interface.

#+begin_src go
  // The built-in error interface type is the conventional interface for
  // representing an error condition. The nil value represents no error.
  type error interface {
      Error() string
  }

  // Each call to "New" returns a distinct value even if the texts are identical.
  func New(text string) error {
      return &errorString{text}
  }

  // The struct that implements the error interface.
  type errorString struct {
      s string
  }

  // The method that fulfills the error interface for "errorString".
  func (e *errorString) Error() string {
      return e.s
  }
#+end_src

** Join Errors

#+begin_src go
  // "Join" returns an error that wraps the given errors.
  func Join(errs ...error) error {
      n := 0
      for _, err := range errs {
          if err != nil {
              n++
          }
      }
      if n == 0 {
          return nil
      }
      e := &joinError{
          errs: make([]error, 0, n),
      }
      for _, err := range errs {
          if err != nil {
              e.errs = append(e.errs, err)
          }
      }
      return e
  }

  type joinError struct {
      errs []error
  }

  func (e *joinError) Error() string {
      if len(e.errs) == 1 {
          return e.errs[0].Error()
      }

      b := []byte(e.errs[0].Error())
      for _, err := range e.errs[1:] {
          b = append(b, '\n')
          b = append(b, err.Error()...)
      }
      return unsafe.String(&b[0], len(b))
  }

  func (e *joinError) Unwrap() []error {
      return e.errs
  }
#+end_src

** Unwrap Errors

#+begin_src go
  // "Unwrap" returns the result of calling the "Unwrap" method on "err", if "err's"
  // type contains an "Unwrap" method returning "error".
  // Otherwise, Unwrap returns nil.
  func Unwrap(err error) error {
      u, ok := err.(interface {
          Unwrap() error
      })
      if !ok {
          return nil
      }
      return u.Unwrap()
  }

  // "Is" reports whether any error in "err's" tree matches target.
  func Is(err, target error) bool {
      if err == nil || target == nil {
          return err == target
      }

      isComparable := reflectlite.TypeOf(target).Comparable()
      return is(err, target, isComparable)
  }

  func is(err, target error, targetComparable bool) bool {
      for {
          if targetComparable && err == target {
              return true
          }
          if x, ok := err.(interface{ Is(error) bool }); ok && x.Is(target) {
              return true
          }
          switch x := err.(type) {
          case interface{ Unwrap() error }:
              err = x.Unwrap()
              if err == nil {
                      return false
              }
          case interface{ Unwrap() []error }:
              for _, err := range x.Unwrap() {
                  if is(err, target, targetComparable) {
                      return true
                  }
              }
              return false
          default:
              return false
          }
      }
  }

  // "As" finds the first error in "err's" tree that matches "target",
  // and if one is found, sets "target" to that error value and returns true.
  // Otherwise, it returns false.
  func As(err error, target any) bool {
      if err == nil {
          return false
      }
      if target == nil {
          panic("errors: target cannot be nil")
      }
      val := reflectlite.ValueOf(target)
      typ := val.Type()
      if typ.Kind() != reflectlite.Ptr || val.IsNil() {
          panic("errors: target must be a non-nil pointer")
      }
      targetType := typ.Elem()
      if targetType.Kind() != reflectlite.Interface && !targetType.Implements(errorType) {
          panic("errors: *target must be interface or implement error")
      }
      return as(err, target, val, targetType)
  }

  func as(err error, target any, targetVal reflectlite.Value, targetType reflectlite.Type) bool {
      for {
          if reflectlite.TypeOf(err).AssignableTo(targetType) {
              targetVal.Elem().Set(reflectlite.ValueOf(err))
              return true
          }
          if x, ok := err.(interface{ As(any) bool }); ok && x.As(target) {
              return true
          }
          switch x := err.(type) {
          case interface{ Unwrap() error }:
              err = x.Unwrap()
              if err == nil {
                  return false
              }
          case interface{ Unwrap() []error }:
              for _, err := range x.Unwrap() {
                  if err == nil {
                      continue
                  }
                  if as(err, target, targetVal, targetType) {
                      return true
                  }
              }
              return false
          default:
              return false
          }
      }
  }

  var errorType = reflectlite.TypeOf((*error)(nil)).Elem()
#+end_src

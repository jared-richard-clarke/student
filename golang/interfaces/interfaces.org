* Interfaces

** Sources

| source         | author |
|----------------+--------|
| *A Tour of Go* | go.dev |

** About

An interface type is a set of method signatures. It can store any concrete (non-interface) value
as long as that value implements the interface's methods.

** Interface Values

Conceptually, an interface is a tuple of a concrete type and a value.

#+begin_example
  (type, value)
#+end_example

** Type Assertion

Type assertion provides access to an interface's underlying value. It returns
the underlying value and a boolean that reports whether the assertion succeeded.

#+begin_src go
  var number interface{} = 7

  // v == 7, ok == true
  v, ok := number.(int)
#+end_src

** Type Switch

A type switch is a switch statement that performs a series of type assertions.

#+begin_src go
  switch v := i.(type) {
  case int64:
      return v + 7
  case float64:
      return v + 7.0
  default:
      return error.New("invalid type")
  }
#+end_src

** Alias ~Any~

The type ~any~ is an alias for any empty interface value. It is equal
to ~interface{}~ in all ways.

#+begin_src go
  type any interface{}
#+end_src

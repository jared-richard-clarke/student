* Haskell: Lazy Evaluation

** Applicative and Normal Order Evaluation

#+begin_example
  === Lambda Calculus ===

  -- applicative order -> infinity
  -- normal order      -> 7

  λx.7 infinity

  -- applicative order -> (λx.xx)(λx.xx) ...
  -- normal order -> z

  (λy.z)((λx.xx)(λx.xx))
#+end_example

** Eager and Lazy Evaluation

#+begin_src scheme
  ;; === Scheme ===

  (define loop-forever (lambda () (loop-forever)))

  ;; eager evaluation -> infinity (stack overflow)
  ;; lazy evaluation  -> 7

  ((lambda (x) 7) (loop-forever))
#+end_src

** Pattern Matching

Pattern matching drives evaluation.

*** Example 1: Build and Take

#+begin_src haskell
  take :: int -> [a] -> [a]
  take _ []     = []
  take n (x:xs) = if n <= 0 then [] else (x : take (n - 1) xs)

  build :: Int -> Int -> Int
  build x y = if x > y then [] else (x : build (x + 1) y)

  take 3 (build 1 99)
  take 3 (1 : (build 2 99))
  1:(take 2 (build­ 2 99))
  1:(take 2 (2 : (build 3 99)))
  1:2:(take 1 (build 3 99))
  1:2:(take 1 (3 : (build 4 99)))
  1:2:3:(take 0 (build 4 99))
  1:2:3:[]
#+end_src

*** Example 2: Take and Drop (Miranda)

#+begin_src
  take 0 x = []
  take (n+1) [] = []
  take (n+1) (a:x) = a : take n x

  drop 0 x = x
  drop (n+1) [] = []
  drop (n+1) (a:x) = drop n x

  take n x ++ drop n x = x
#+end_src

*** Space Usage

#+begin_src haskell
  foldl :: (b -> a -> b) -> [a] -> b
  foldl _ z []     = z
  foldl f z (x:xs) = foldl f (f z x) xs

  -- Since the value of the accumulator is not demanded until after
  -- recursing through the entire list, the accumulator builds up
  -- the unevaluated expression "(((0+1)+2)+3)"
    foldl (+) 0 [1,2,3]
  = foldl (+) (0+1) [2,3]
  = foldl (+) ((0+1)+2) [3]
  = foldl (+) (((0+1)+2)+3) []
  = (((0+1)+2)+3)
  = ((1+2)+3)
  = (3+3)
  = 6

  -- strict in its first argument
  seq :: a -> b -> b

  foldl' :: (a -> b -> a) -> a -> [b] -> a
  foldl' _ z [] = z
  foldl' f z (x:xs) = let z' = f z x in seq z' foldl' f z' xs

    foldl' (+) 0 [1,2,3]
  = foldl' (+) (0+1) [2,3]
  = foldl' (+) 1 [2,3]
  = foldl' (+) (1+2) [3]
  = foldl' (+) 3 [3]
  = foldl' (+) (3+3) []
  = foldl' (+) 6 []
  = 6
#+end_src

*** Evaluation and Thunks

#+begin_example
  === expression ===

  (4, [1, 2])

  === evaluation / reduction ===

               >
  unevaluated | thunk
               >
               >
              | (thunk, thunk)
  WHNF        | (4, thunk)
              | (4, 1:thunk)
              | (4, 1:2:thunk)
               >
               >
  Normal Form | (4, 1:2:[])
               >
#+end_example

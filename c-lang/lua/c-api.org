* Lua's C API

** Sources

| source                        | author                                                                       |
|-------------------------------+------------------------------------------------------------------------------|
| *A Look at the Design of Lua* | Roberto Ierusalimschy, Luiz Henrique de Figueiredo, and Waldemar Celes Filho |
| *Programming in Lua*          | Roberto Ierusalimschy                                                        |

** Introduction

#+begin_quote
  "The Lua library defines no C global variables at all. It keeps all its state in the dynamic
   structure ~lua_State~; all functions inside Lua receive a pointer to this structure as an
   argument. This design makes Lua reentrant and ready to be used in multithreaded code...

   A major component in the communication between Lua and C is an omnipresent virtual stack.
   Almost all API calls operate on values on this stack. All data exchange from Lua to C and
   from C to Lua occurs through this stack. Moreover, we can use the stack to keep intermediate
   results, too...

   Lua manipulates this stack in a strict LIFO discipline (Last In, First Out). When we call Lua,
   it changes only the top part of the stack. Our C code has more freedom; specifically, it can
   inspect any element in the stack and even insert and delete elements at any position."

   — *Programming in Lua*, Roberto Ierusalimschy
#+end_quote

*** Pushing Elements

The API has a dedicated push function for each Lua type with a direct representation in C.

#+begin_src c
  void lua_pushnil     (lua_State *L);
  void lua_pushboolean (lua_State *L, int bool);
  void lua_pushnumber  (lua_State *L, lua_Number n);
  void lua_pushinteger (lua_State *L, lua_Integer n);
  void lua_pushlstring (lua_State *L, const char *s, size_t len);
  void lua_pushstring  (lua_State *L, const char *s);

  // If possible, grows stack to accomodate "sz" number of slots.
  // Otherwise returns zero.
  int lua_checkstack (lua_State *L, int sz);

  // Similar to "lua_checkstack" but raises an error with the given message
  // if unable to complete operation.
  void luaL_checkstack (lua_State *L, int sz, const char *msg);
#+end_src

*** Indexing Elements

#+begin_quote
  "To refer to elements on the stack, the API uses indices. The first element pushed on the stack
   has index 1, the next one has index 2, and so on. We can also access elements using the top of
   the stack as our reference, with negative indices."

   — *Programming in Lua*, Roberto Ierusalimschy
#+end_quote

#+begin_src c
  static void dump_stack (lua_State *L) {
    int i;
    // Stack depth
    int top = lua_gettop(L);
    // Iterate through stack
    for (i = 1; i <= top; i += 1) {
      int t = lua_type(L, i);
      switch (t) {
        case LUA_TSTRING: {
          printf("'%s'", lua_tostring(L, i));
          break;
        }
        case LUA_TBOOLEAN: {
          printf(lua_toboolean(L, i) ? "true" : "false");
          break;
        }
        case LUA_TNUMBER: {
          if (lua_isinteger(L, i)) {
            printf("%lld", lua_tointeger(L, i));
          } else {
            printf("%g", lua_tonumber(L, i));
          }
          break;
        }
        default: {
          printf("%s", lua_typename(L, t));
          break;
        }
      }
      // Separator
      printf(" ");
    }
    // End
    printf("\n");
  }
#+end_src

*** Basic Stack Manipulation

#+begin_src c
  // Returns the number of elements on the stack, which is also the top element's index.
  int  lua_gettop    (lua_State *L);
  // Sets the number of elements on the stack. lua_settop(L, 0) empties the stack.
  void lua_settop    (lua_State *L, int index);
  // Pushes onto the stack a copy of the element at the given index.
  void lua_pushvalue (lua_State *L, int index);
  // Rotates the stack elements from the given index to the top of the stack by "n" positions.
  void lua_rotate    (lua_State *L, int index, int n);
  // Removes element at given index, shifting elements above it to fill in the gap.
  void lua_remove    (lua_State *L, int index);
  // Inserts top element into given index, shifting elements above to open space.
  void lua_insert    (lua_State *L, int index);
  // Pops an element and sets it at the given index.
  void lua_replace   (lua_State *L, int index);
  // Copies the element at one index into another, leaving the original untouched.
  void lua_copy      (lua_State *L, int fromidx, int toidx);

  #define lua_pop(L, n) lua_settop(L, -(n) - 1)
  #define lua_remove(L, index) (lua_rotate(L, (index), -1), lua_pop(L, 1))
  #define lua_insert(L, index) lua_rotate(L, (index), 1)
#+end_src

| function                          | stack                               |
|-----------------------------------+-------------------------------------|
| ~lua_State *L = luaL_newstate();~ | []                                  |
| ~lua_pushboolean(L, 1);~          | [true]                              |
| ~lua_pushnumber(L, 10);~          | [true, 10]                          |
| ~lua_pushnil(L);~                 | [true, 10, nil]                     |
| ~lua_pushstring(L, "hello");~     | [true, 10, nil, "hello"]            |
| ~lua_pushvalue(L, -4);~           | [true, 10, nil, "hello", true]      |
| ~lua_replace(L, 3);~              | [true, 10, true, "hello"]           |
| ~lua_settop(L, -5);~              | [true, 10, true, "hello", nil, nil] |
| ~lua_rotate(L, 3, 1);~            | [true, 10, nil, true, "hello", nil] |
| ~lua_remove(L, -3);~              | [true, 10, nil, "hello", nil]       |
| ~lua_settop(L, -5);~              | [true]                              |
| ~lua_close(L);~                   |                                     |

** Defining and Calling Functions from C

#+begin_src c
  // === Lua Function Call ===
  //
  // a = f("how", t.x, 14)

  // === C Function Call ===

  // Function to be called.
  lua_getglobal(L, "f");
  // 1st argument.
  lua_pushliteral(L, "how");
  // Table to be indexed.
  lua_getglobal(L, "t");
  // Push the result of 2nd argument "t.x".
  lua_getfield(L, -1, "x");
  // Remove "t" from the stack.
  lua_remove(L, -2);
  // 3rd argument.
  lua_pushinteger(L, 14);
  // Call "f" with 3 arguments and 1 result.
  lua_call(L, 3, 1);
  // Set global "a".
  lua_setglobal(L, "a");
#+end_src

** Lua Standalone Interpreter

Lua is implemented not as a standalone program, but as a C library. The standalone Lua interpreter
is an interface that feeds files and strings from the user to the Lua library.

#+begin_src c
  // Main body of the Lua stand-alone intepreter. Called in protected mode.
  // Parses and handles all arguments to the main program.
  static int pmain (lua_State *L) {
    int argc = (int)lua_tointeger(L, 1);
    char **argv = (char **)lua_touserdata(L, 2);
    int script;
    int args = collectargs(argv, &script);

    // First argument is not an option.
    int optlim = (script > 0) ? script : argc;
    // Check that interpreter has the correct version.
    luaL_checkversion(L);

    // Bad arguments?
    if (args == has_error) {
      print_usage(argv[script]);
      return 0;
    }
    // Option '-v'?
    if (args & has_v) {
      print_version();
    }
    // Option '-E'?
    if (args & has_E) {
      lua_pushboolean(L, 1);
      // Signal for libraries to ignore environment variables.
      lua_setfield(L, LUA_REGISTRYINDEX, "LUA_NOENV");
    }
    // Open standard libraries.
    luaL_openlibs(L);
    // Create table 'arg'
    createargtable(L, argv, argc, script);
    // Start GC in generational mode.
    lua_gc(L, LUA_GCRESTART);
    lua_gc(L, LUA_GCGEN, 0, 0);
    // No option '-E'?
    if (!(args & has_E)) {
      // Run LUA_INIT
      if (handle_luainit(L) != LUA_OK) {
        return 0;
      }
    }
    // Execute arguments '-e' and '-l'.
    if (!runargs(L, argv, optlim))
      return 0;
    // Execute main script (if there is one).
    if (script > 0) {
      if (handle_script(L, argv + script) != LUA_OK)
        return 0;
    }
    // If -i option, run read-eval-print loop.
    if (args & has_i) {
      doREPL(L);
    } else if (script < 1 && !(args & (has_e | has_v))) {
      if (lua_stdin_is_tty()) {
        print_version();
        doREPL(L);
      } else {
        // Executes stdin as a file.
        dofile(L, NULL);
      }
    }
    // Signal no errors.
    lua_pushboolean(L, 1);
    return 1;
  }

  // The requisite main program as implemented in the Lua stand-alone interpreter.
  int main (int argc, char *argv[]) {
    int status, result;
    // Create thread state.
    lua_State *L = luaL_newstate();
    if (L == NULL) {
      l_message(argv[0], "cannot create state: not enough memory");
      return EXIT_FAILURE;
    }
    // Stop garbage collection while building state
    lua_gc(L, LUA_GCSTOP);
    // Prepare call to 'pmain' in protected mode.
    lua_pushcfunction(L, &pmain);
    // 1st argument.
    lua_pushinteger(L, argc);
    // 2nd argument.
    lua_pushlightuserdata(L, argv);
    // Call 'pmain'.
    status = lua_pcall(L, 2, 1, 0);
    // Get result.
    result = lua_toboolean(L, -1);
    report(L, status);
    lua_close(L);
    return (result && status == LUA_OK) ? EXIT_SUCCESS : EXIT_FAILURE;
  }
#+end_src

** Lua Map Function

#+begin_src c
  int lua_map (lua_State *L) {
    int i, n;

    // 1st argument must be a table (t).
    luaL_checktype(L, 1, LUA_TTABLE);

    // 2nd argument must be a function (f).
    luaL_checktype(L, 2, LUA_TFUNCTION);

    // Get size of table
    n = luaL_len(L, 1);

    for (i = 1; i <= n; i += 1) {
      // Push f
      lua_pushvalue(L, 2);
      // Push t[i]
      lua_geti(L, 1, i);
      // Call f(t[i])
      lua_call(L, 1, 1);
      // t[i] = result
      lua_seti(L, 1, i);
    }

    return 0;
  }
#+end_src

** Lua String Functions

#+begin_src c
  // Split string.
  static int lua_split (lua_State *L) {
    // subject
    const char *s = luaL_checkstring(L, 1);
    // separator
    const char *sep = luaL_checkstring(L, 2);
    const char *e;
    int i = 1;

    // Result table
    lua_newtable(L);

    // Repeat for each separator.
    while ((e = strchr(s, *sep)) != NULL) {
      // Push substring.
      lua_pushlstring(L, s, e - s);
      // Insert string in table.
      lua_rawseti(L, -2, i++);
      // Skip separator
      s = e + 1;
    }
    // Insert last substring.
    lua_pushstring(L, s);
    lua_rawseti(L, -2, i);

    return 1;
  }

  // Uppercase a string, using a buffer.
  static int lua_uppercase (lua_State *L) {
    size_t l;
    size_t i;
    // Declare a buffer.
    luaL_Buffer b;

    // Ensure argument is a string.
    const char *s = luaL_checklstring(L, 1, &l);

    // Initialize buffer.
    char *p = luaL_buffinitsize(L, &b, l);

    // For each character in the buffer, uppercase that character.
    for (i = 0; i < l; i += 1) {
      p[i] = toupper(uchar(s[i]));
    }

    // Flush buffer. Leave resulting string on the stack.
    luaL_pushresultsize(&b, l);

    return 1;
  }
#+end_src


Lua's generic buffer implementation.

#+begin_src c
  struct luaL_Buffer {
    char *b;      // Buffer address
    size_t size;  // Buffer size
    size_t n;     // Number of characters in buffer
    lua_State *L;
    union {
      LUAI_MAXALIGN;            // Ensure maximum alignment for buffer
      char b[LUAL_BUFFERSIZE];  // Initial buffer
    } init;
  };
#+end_src

** C Function Protocol in Lua

#+begin_src c
  typedef int (*lua_CFunction) (lua_State *L);

  static int average_sum(lua_State *L) {
    // Number of arguments.
    int n = lua_gettop(L);
    // Base sum.
    lua_Number sum = 0.0;
    // Index.
    int i;
    for (i = 1; i <= n; i += 1) {
      if (!lua_isnumber(L, i)) {
        lua_pushliteral(L, "incorrect argument");
        lua_error(L);
      }
      sum += lua_tonumber(L, i);
    }
    // First result.
    lua_pushnumber(L, sum / n);
    // Second result.
    lua_pushnumber(L, sum);
    // Number of results.
    return 2;
  }
#+end_src

** Lua Directory Iterator

#+begin_src c
  // === Lua Iterator ==
  //
  // for fname in dir.open(".") do
  //     print(fname)
  // end

  // === C Implmentation ===

  #include <dirent.h>
  #include <errno.h>
  #include <string.h>

  #include "lua.h"
  #include "lauxlib.h"

  // Forward declaration for the iterator function.
  static int dir_iter (lua_State *L);

  static int lua_dir (lua_State *L) {
    const char *path = luaL_checkstring(L, 1);

    // Create a userdata to store a DIR address.
    DIR **d = (DIR **)lua_newuserdata(L, sizeof(DIR *));

    // Pre-initialize
    *d = NULL;

    // Set its metatable.
    luaL_getmetatable(L, "LuaBook.dir");
    lua_setmetatable(L, -2);

    // Try to open the given directory.
    *d = opendir(path);
    // Error opening the directory?
    if (*d == NULL) {
      luaL_error(L, "cannot open %s: %s", path, strerror(errno));
    }
    // Creates and returns the iterator function. Its sole upvalue,
    // the directory userdata, is already on the top of the stack.
    lua_pushcclosure(L, dir_iter, 1);
    return 1;
  }

  // Iterator.
  static int dir_iter (lua_State *L) {
    DIR *d = *(DIR **)lua_touserdata(L, lua_upvalueindex(1));
    struct dirent *entry = readdir(d);
    if (entry != NULL) {
      lua_pushstring(L, entry->d_name);
      return 1;
    } else {
      // No more values to return.
      return 0;
    }
  }

  // Garbage collection metamethod.
  static int dir_gc (lua_State *L) {
    DIR *d = *(DIR **)lua_touserdata(L, 1);
    if (d) {
      closedir(d);
    }
    return 0;
  }

  // Add function to registry.
  static const struct luaL_Reg dirlib [] = {
    {"open", lua_dir},
    {NULL, NULL}
  };

  // Open one-function library.
  int luaopen_dir (lua_State *L) {
    luaL_newmetatable(L, "LuaBook.dir");

    // Set its __gc field.
    lua_pushcfunction(L, dir_gc);
    lua_setfield(L, -2, "__gc");

    // Create the library.
    luaL_newlib(L, dirlib);
    return 1;
  }
#+end_src

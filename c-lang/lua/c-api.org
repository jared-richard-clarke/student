* Lua's C API

** Sources

| source                        | author                                                                       |
|-------------------------------+------------------------------------------------------------------------------|
| *A Look at the Design of Lua* | Roberto Ierusalimschy, Luiz Henrique de Figueiredo, and Waldemar Celes Filho |
| *Programming in Lua*          | Roberto Ierusalimschy                                                        |

** Introduction

#+begin_quote
  "The Lua library defines no C global variables at all. It keeps all its state in the dynamic structure
   ~lua_State~; all functions inside Lua receive a pointer to this structure as an argument. This design makes
   Lua reentrant and ready to be used in multithreaded code...

   A major component in the communication between Lua and C is an omnipresent virtual stack. Almost
   all API calls operate on values on this stack. All data exchange from Lua to C and from C to Lua occurs
   through this stack. Moreover, we can use the stack to keep intermediate results, too...

   Lua manipulates this stack in a strict LIFO discipline (Last In, First Out). When we call Lua, it
   changes only the top part of the stack. Our C code has more freedom; specifically, it can inspect
   any element in the stack and even insert and delete elements at any position."

   â€” *Programming in Lua*, Roberto Ierusalimschy
#+end_quote

*** Pushing Elements

The API has a dedicated push function for each Lua type with a direct representation in C.

#+begin_src c
  void lua_pushnil     (lua_State *L);
  void lua_pushboolean (lua_State *L, int bool);
  void lua_pushnumber  (lua_State *L, lua_Number n);
  void lua_pushinteger (lua_State *L, lua_Integer n);
  void lua_pushlstring (lua_State *L, const char *s, size_t len);
  void lua_pushstring  (lua_State *L, const char *s);
#+end_src

*** Generic Stack Manipulation

#+begin_src c
  // Returns the number of elements on the stack.
  int  lua_gettop    (lua_State *L);
  // Sets the number of elements on the stack. lua_settop(L, 0) empties the stack.
  void lua_settop    (lua_State *L, int index);
  // Pushes onto the stack a copy of the element at the given index.
  void lua_pushvalue (lua_State *L, int index);
  // Rotates the stack elements from the given index to the top of the stack by "n" positions.
  void lua_rotate    (lua_State *L, int index, int n);
  // Removes element at given index, shifting elements above it to fill in the gap.
  void lua_remove    (lua_State *L, int index);
  // Inserts top element into given index, shifting elements above to open space.
  void lua_insert    (lua_State *L, int index);
  // Pops an element and sets it at the given index.
  void lua_replace   (lua_State *L, int index);
  // Copies the element at one index into another, leaving the original untouched.
  void lua_copy      (lua_State *L, int fromidx, int toidx);

  #define lua_pop(L, n) lua_settop(L, -(n) - 1)
  #define lua_remove(L, index) (lua_rotate(L, (index), -1), lua_pop(L, 1))
  #define lua_insert(L, index) lua_rotate(L, (index), 1)
#+end_src

| function                          | stack                               |
|-----------------------------------+-------------------------------------|
| ~lua_State *L = luaL_newstate();~ | []                                  |
| ~lua_pushboolean(L, 1);~          | [true]                              |
| ~lua_pushnumber(L, 10);~          | [true, 10]                          |
| ~lua_pushnil(L);~                 | [true, 10, nil]                     |
| ~lua_pushstring(L, "hello");~     | [true, 10, nil, "hello"]            |
| ~lua_pushvalue(L, -4);~           | [true, 10, nil, "hello", true]      |
| ~lua_replace(L, 3);~              | [true, 10, true, "hello"]           |
| ~lua_settop(L, -5);~              | [true, 10, true, "hello", nil, nil] |
| ~lua_rotate(L, 3, 1);~            | [true, 10, nil, true, "hello", nil] |
| ~lua_remove(L, -3);~              | [true, 10, nil, "hello", nil]       |
| ~lua_settop(L, -5);~              | [true]                              |
| ~lua_close(L);~                   |                                     |

** Lua Standalone Interpreter

Lua is implemented not as a standalone program, but as a C library. The standalone Lua interpreter
is an interface that feeds files and strings from the user to the Lua library.

#+begin_src c
  // Main body of the Lua stand-alone intepreter. Called in protected mode.
  // Parses and handles all arguments to the main program.
  static int pmain (lua_State *L) {
    int argc = (int)lua_tointeger(L, 1);
    char **argv = (char **)lua_touserdata(L, 2);
    int script;
    int args = collectargs(argv, &script);

    // First argument is not an option.
    int optlim = (script > 0) ? script : argc;
    // Check that interpreter has the correct version.
    luaL_checkversion(L);

    // Bad arguments?
    if (args == has_error) {
      print_usage(argv[script]);
      return 0;
    }
    // Option '-v'?
    if (args & has_v) {
      print_version();
    }
    // Option '-E'?
    if (args & has_E) {
      lua_pushboolean(L, 1);
      // Signal for libraries to ignore environment variables.
      lua_setfield(L, LUA_REGISTRYINDEX, "LUA_NOENV");
    }
    // Open standard libraries.
    luaL_openlibs(L);
    // Create table 'arg'
    createargtable(L, argv, argc, script);
    // Start GC in generational mode.
    lua_gc(L, LUA_GCRESTART);
    lua_gc(L, LUA_GCGEN, 0, 0);
    // No option '-E'?
    if (!(args & has_E)) {
      // Run LUA_INIT
      if (handle_luainit(L) != LUA_OK) {
        return 0;
      }
    }
    // Execute arguments '-e' and '-l'.
    if (!runargs(L, argv, optlim))
      return 0;
    // Execute main script (if there is one).
    if (script > 0) {
      if (handle_script(L, argv + script) != LUA_OK)
        return 0;
    }
    // If -i option, run read-eval-print loop.
    if (args & has_i) {
      doREPL(L);
    } else if (script < 1 && !(args & (has_e | has_v))) {
      if (lua_stdin_is_tty()) {
        print_version();
        doREPL(L);
      } else {
        // Executes stdin as a file.
        dofile(L, NULL);
      }
    }
    // Signal no errors.
    lua_pushboolean(L, 1);
    return 1;
  }

  // The requisite main program as implemented in the Lua stand-alone interpreter.
  int main (int argc, char *argv[]) {
    int status, result;
    // Create thread state.
    lua_State *L = luaL_newstate();
    if (L == NULL) {
      l_message(argv[0], "cannot create state: not enough memory");
      return EXIT_FAILURE;
    }
    // Stop garbage collection while building state
    lua_gc(L, LUA_GCSTOP);
    // Prepare call to 'pmain' in protected mode.
    lua_pushcfunction(L, &pmain);
    // 1st argument.
    lua_pushinteger(L, argc);
    // 2nd argument.
    lua_pushlightuserdata(L, argv);
    // Call 'pmain'.
    status = lua_pcall(L, 2, 1, 0);
    // Get result.
    result = lua_toboolean(L, -1);
    report(L, status);
    lua_close(L);
    return (result && status == LUA_OK) ? EXIT_SUCCESS : EXIT_FAILURE;
  }
#+end_src

** Lua Map Function

An implementation of the map function using Lua's C API.

#+begin_src c
  int lua_map (lua_State *L) {
    int i, n;

    // 1st argument must be a table (t).
    luaL_checktype(L, 1, LUA_TTABLE);

    // 2nd argument must be a function (f).
    luaL_checktype(L, 2, LUA_TFUNCTION);

    // Get size of table
    n = luaL_getn(L, 1);

    for (i = 1; i <= n; i += 1) {
      // Push f
      lua_pushvalue(L, 2);
      // Push t[i]
      lua_rawgeti(L, 1, i);
      // Call f(t[i])
      lua_call(L, 1, 1);
      // t[i] = result
      lua_rawseti(L, 1, i);
    }

    return 0;
  }
#+end_src

** Lua Uppercase Function

#+begin_src c
  static int lua_uppercase (lua_State *L) {
    size_t l;
    size_t i;
    // Declare a buffer.
    luaL_Buffer b;

    // Ensure argument is a string.
    const char *s = luaL_checklstr(L, 1, &l);

    // Initialize buffer.
    luaL_buffinit(L, &b);

    // For each character in the string, uppercase that character,
    // and then push the result onto the buffer.
    for (i = 0; i < l; i += 1) {
      luaL_addchar(&b, toupper((unsigned char)(s[i])));
    }

    // Flush buffer. Leave resulting string on the stack.
    luaL_pushresult(&b);

    return 1;
  }
#+end_src

Lua's generic buffer implementation.

#+begin_src c
  struct luaL_Buffer {
    char *b;      // Buffer address
    size_t size;  // Buffer size
    size_t n;     // Number of characters in buffer
    lua_State *L;
    union {
      LUAI_MAXALIGN;            // Ensure maximum alignment for buffer
      char b[LUAL_BUFFERSIZE];  // Initial buffer
    } init;
  };
#+end_src

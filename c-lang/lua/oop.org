* Object-Oriented Programming

*Programming in Lua*, Roberto Ierusalimschy

** Colon Syntax and Implicit Self

#+begin_src lua
  Account = {
      balance = 0,
      withdraw = function (self, value)
          self.balance = self.balance - value
      end,
      deposit = function (self, value)
          self.balance = self.balance + value
      end
  }

  Account.withdraw(Account, 100)

  -- equivalent ->

  function Account:withdraw(value)
      self.balance = self.balance - value
  end

  function Account:deposit(value)
      self.balance = self.balance + value
  end

  Account:withdraw(100)
#+end_src

** Implementing Prototypal Inheritance

#+begin_src lua
  function Account:new (x)
      x = x or {}
      setmetatable(x, self)
      self.__index = self
      return x
  end

  a = Account:new{ balance = 0 }

  a:deposit(100)

  -- equivalent ->

  getmetatable(a).__index.deposit(a, 100)

  -- equivalent ->

  Account.deposit(a, 100)
#+end_src

** Private Fields Through Closure

An alternative design is to represent each object through two tables: one for its state, the
other its interface. The state object is held privately in a closure.

#+begin_src lua
  function create_account(x)
      local self = {
          balance = x,
          LIMIT = 10000
      }

      local withdraw = function (value)
          self.balance = self.balance - value
      end

      local deposit = function (value)
          self.balance = self.balance + value
      end

      local extra = function ()
          if self.balance > self.LIMIT then
              return self.balance * 0.10
          else
              return 0
          end
      end

      local get = function ()
          return self.balance + self.extra()
      end
  end
#+end_src

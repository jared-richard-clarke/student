* Functions in Lua

** Sources

| source                                         | author                |
|------------------------------------------------+-----------------------|
| *Programming in Lua*                           | Roberto Ierusalimschy |
| *First-Class Functions in an Imperative World* | Roberto Ierusalimschy |

** Function Syntax

| syntax                            | translation                         |
|-----------------------------------+-------------------------------------|
| ~function f () body end~          | ~f = function () body end~          |
| ~function a.b.c () body end~      | ~a.b.c = function () body end~      |
| ~local function f () body end~    | ~local f; f = function () body end~ |
| ~function object:f (xs) body end~ | ~f = function (self, xs) body end~  |

** Lambdas / Closures / Anonymous Functions

- Properties of a lambda:

  - The function is a value. It can be passed as a parameter, returned as a result, assigned
    to a variable, and be a field in structured data.

  - The function can be nested, that is, it can be defined inside other functions.

  - The anonymous function has a dedicated syntax, the function literal. A function literal
    can be created and invoked inside any expression.

  - The function respects *lexical scoping*. It has full access to variables defined within
    its enclosing functions, even when the function is returned from its enclosing function.

| language        | first-class values      | nested | anonymous                | lexical scoping |
|-----------------+-------------------------+--------+--------------------------+-----------------|
| C               | yes (function pointers) | no     | no                       | no              |
| LISP (original) | yes                     | yes    | yes                      | no              |
| Pascal          | no                      | yes    | no                       | yes             |
| Modula-2        | yes (only non-nested)   | yes    | yes                      | yes             |
| Python 3        | yes                     | yes    | yes (single expressions) | yes             |

** Local Functions

When Lua compiles the call ~factorial(n - 1)~ in the function body, the local
variable ~factorial~ is not yet defined. The call expression looks for the
~factorial~ definition in the outer environment instead.

#+begin_src lua
  local function factorial (n)
      if n < 2 then
          return 1
      else
          return n * factorial(n - 1)
      end
  end

  -- expands ->

  local factorial -- The local variable must be defined before it is called.
  factorial = function (x)
      if n < 2 then
          return 1
      else
          return x * factorial(x - 1)
      end
  end
#+end_src

** Lexical Scope and Closures

The loop below creates ten anonymous functions within a table, each of them
closing over a different ~y~ variable while sharing the same ~x~.

#+begin_src lua
  table = {}

  local x = 7

  for i = 1, 10 do
      local y = 0
      table[i] = function () y = y + 1; return x + y end
  end

  table[1]() --> 8
  table[1]() --> 9
  table[2]() --> 8
#+end_src

** Functions in Tables

#+begin_src lua
  Library = {}

  Library.add = function (x, y) return x + y end
  Library.sub = function (x, y) return x - y end
  Library.mul = function (x, y) return x * y end
  Library.div = function (x, y) return x / y end

  -- equivalent ->

  Library = {}

  function Library.add (x, y)
      return x + y
  end
  function Library.sub (x, y)
      return x - y
  end
  function Library.mul (x, y)
      return x * y
  end
  function Library.div (x, y)
      return x / y
  end

  -- equivalent ->

  Library = {
      add = function (x, y) return x + y end
      sub = function (x, y) return x - y end
      mul = function (x, y) return x * y end
      div = function (x, y) return x / y end
  }

  -- Every chunk is compiled within the scope of a local variable
  -- named "_ENV". Any table used as the value of "_ENV" is called
  -- an environment.

  local _ENV = {}

  -- _ENV["add"]
  function add (x, y) return x + y end

  -- _ENV["sub"]
  function sub (x, y) return x - y end
#+end_src

** Iterators

In Lua, an iterator can be implemented using an impure function that returns
the next element of an iteration each time it is called.

#+begin_src lua
  -- Factory function returns an anonymous function, the generator.
  function range(x, y)
      return function()
                 if x > y then
                     return nil
                 else
                     x = x + 1
                     return x - 1
                 end
             end
  end

  sum = 0

  for number in range(1, 10) do
      sum = sum + number
  end

  print(sum) --> 55
#+end_src

** Tail Calls

#+begin_src lua
  function factorial(x)
      local function loop(iter, product)
          if iter < 2 then
              return product
          else
              return loop(iter - 1, iter * product)
          end
      end
      return loop(x, 1)
  end
#+end_src

** The Z Combinator

#+begin_src lua
  -- === Z Combinator ===
  -- let Z = λf.(λx.f(λx.f(λv.((x x) v)))(λx.f(λv.((x x) v)))
  --     F = λf.λn. if n = 0 then 1 else n x f(n - 1)
  -- in
  --    (Z F) 4

  local Z = function (f)
      return
          (function (x) return f (function (v) return x(x)(v) end) end)
          (function (x) return f (function (v) return x(x)(v) end) end)
  end

  -- factorial function

  local F = function (f)
                return function (n)
                           if n == 0 then
                               return 1
                           else
                               return n * f(n - 1)
                           end
                       end
  end

  Z(F)(4) --> 24
#+end_src

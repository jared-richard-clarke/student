* ~classic.lua~

Class-based object orientation in Lua.

** Sources

| source        | author |
|---------------+--------|
| ~classic.lua~ | rxi    |

** Implementation

#+begin_src lua
  -- === Base Class ===

  local Object = {}
  Object.__index = Object

  function Object:new()
  end

  -- === Class Creation and Extension ===

  function Object:extend()
      local class = {}
      for key, value in pairs(self) do
          if key:find("__") == 1 then
              class[key] = value
          end
      end
      class.__index = class
      class.super = self
      setmetatable(class, self)
      return class
  end

  -- === Mixins ===

  function Object:implement(...)
      for _, class in pairs({...}) do
          for key, value in pairs(class) do
              if self[key] == nil and type(value) == "function" then
                  self[key] = value
              end
          end
      end
  end

  -- === Object Reflection ===

  function Object:is(T)
      local meta = getmetatable(self)
      while meta do
          if meta == T then
              return true
          end
          meta = getmetatable(meta)
      end
      return false
  end

  function Object:__tostring()
      return "Object"
  end

  -- === Object Creation ===

  function Object:__call(...)
      local object = setmetatable({}, self)
      object:new(...)
      return object
  end

  return Object
#+end_src

** Usage

#+begin_src lua
  -- === Base Class ===

  Object = require("classic")

  -- === Class Creation ===

  Point = Object.extend()

  function Point:new(x, y)
      self.x = x or 0
      self.y = y or 0
  end

  local point = Point(3, 4)

  -- === Class Extension ===

  Rectangle = Point:extend()

  function Rectangle:new(x, y, width, height)
      Rectangle.super.new(self, x, y)
      self.width  = width or 0
      self.height = height or 0
  end

  -- === Object Reflection ===

  point:is(Object)    --> true
  point:is(Point)     --> true
  point:is(Rectangle) --> false

  -- === Mixins ===

  Printer = Object:extend()

  function Printer:print()
      for key, value in pairs(self) do
          print(key, value)
      end
  end

  Point:implement(Printer)

  point.print()

  -- === Meta Methods ===

  function Point:__tostring()
      return "(" .. self.x .. ", " .. self.y ")"
  end
#+end_src

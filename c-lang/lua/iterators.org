* Loops, Iterators, Generators, and Closures

** Sources

| source                     | author                                                             |
|----------------------------+--------------------------------------------------------------------|
| *Programming in Lua*       | Roberto Ierusalimschy                                              |
| *Lua 5.4 Reference Manual* | Roberto Ierusalimschy, Luiz Henrique de Figueiredo, Waldemar Celes |

** Introduction

#+begin_quote
  "The name "iterator" is a little misleading, because our iterators do not iterate:
   What iterates is the for loop. Iterators only provide the successive values for
   the iteration. Maybe a better name would be "generator", but "iterator" is already
   well established in other languages, such as Java."

  — Roberto Ierusalimschy
#+end_quote

** Numeric ~for~ Loop

The numeric ~for~ loop keeps three numbers:

1. initial value
2. limit
3. step (If absent, defaults to 1)

#+begin_src lua
  -- for x = value, y, z do print(x) end
  --
  -- where x = initial value
  --       y = limit
  --       z = step

  sum = 0
  for x = 1, 10 do sum = sum + x end
  print(sum) --> 55
#+end_src

** Generic ~for~ Loop

The generic ~for~ loop keeps three values:

1. iterator function
2. invariant state
3. control variable

~for~ first evaluates the expressions after ~in~. These expressions should result in three values:
the *iterator function*, the *invariant state*, and the *initial control variable*. When simple
iterators are used, the factory returns only the iterator function.

After initialization, ~for~ calls the iterator function with two arguments: the invariant state
and the control variable. ~for~ assigns the values returned by the iterator function to variables
declared by its variable list. If the first value returned, the control variable, is ~nil~, the
loop terminates. Otherwise, ~for~ executes its body and calls the iteration function again,
repeating the process.

*** Generic ~for~ Semantics

#+begin_quote
  "So, If the iterator function is *f*, the invariant state is *s*, and the initial value for
   the control variable is *a_{0}*, the control variable will loop over the values
   *a_{1} = f(s, a_{0}), a_{2} = f(s, a_{1})*, and so on, until *a_{i}* is *nil*. If the *for*
   has other variables, they simply get the extra values returned by each call to *f*."

  — Roberto Ierusalimschy
#+end_quote

#+begin_example
  for v1, v2 ... vn in expressions do
    block
  end

  -- equivalent ->

  do
    local f, s, v = expressions
    while true do
      local v1, v2 ... vn = f(s, v)
      v = v1
      if v == nil then break end
      block
    end
  end

  where f = iterator function
        s = invariant state
        v = control variable
#+end_example

** Closures as Iterators

#+begin_src lua
  function iter(xs)
    local x = 0
    return function()
             x = x + 1
             return xs[x] end
           end
  end

  list = { 1, 2, 3 }

  -- === Generic "for" Loop ===

  for element in iter(list) do
    print(element)
  end

  -- === "while" Loop ===

  do
    local next = iter(list)
    while true do
      local element = next()
      if element == nil then break end
      print(element)
    end
  end
#+end_src

** Stateless Iterators: ~ipairs~ and ~pairs~

Stateless iterators keep no internal state. All state is kept externally in the variables
of the generic ~for~ loop.

#+begin_src lua
  function iter(xs, i)
    i = i + 1
    local x = xs[i]
    if x then
      return i, x
    end
  end

  -- iter = iterator function
  -- xs   = invariant state
  -- 0    = control variable
  function ipairs(xs)
    return iter, xs, 0
  end

  xs = { "one", "two", "three" }

  for i, x in ipairs(xs) do
    print(i, x)
  end

  -- pairs iterator
  function pairs(t)
    return next, t, nil
  end

  dictionary = { x = 3, y = 4 }

  -- Calls "next(dictionary, key)", which returns the next key in "dictionary"
  -- alongside its associated value.
  for key, value in pairs(dictionary) do
    print(key, value)
  end

  -- equivalent ->

  for key, value in next, dictionary do
    print(key, value)
  end
  -- where next       = iterator function
  --       dictionary = invariant state

  -- equivalent ->

  do
    local next, dictionary = pairs(dictionary)
    while true do
      key, value = next(dictionary, key)
      if value == nil then break end
      print(key, value)
    end
  end
#+end_src

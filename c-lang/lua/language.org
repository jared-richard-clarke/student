* Lua Syntax, Operators, and Types

** Sources

| source                     | author                                                             |
|----------------------------+--------------------------------------------------------------------|
| *Lua 5.4 Reference Manual* | Roberto Ierusalimschy, Luiz Henrique de Figueiredo, Waldemar Celes |

** Syntax

Extended BNF grammar where *{E}* is 0 or more *Es* and *[E]* is optional.

#+begin_src ebnf
  chunk               ::= block

  block               ::= { statement } [ return-statement ]

  statement           ::=  ";"
                        |  variables "=" expressions
                        |  function-call
                        |  label
                        |  "break"
                        |  "goto" Name
                        |  "do" block "end"
                        |  "while" expression "do" block "end"
                        |  "repeat" block "until" expression
                        |  "if" expression "then" block { "elseif" expression "then" block } [ "else" block ] end 
                        |  "for" Name "=" expression "," expression [ "," expression ] "do" block "end"
                        |  "for" names "in" expressions "do" block "end"
                        |  "function" function-name function-body
                        |  "local" "function" Name function-body
                        |  "local" attributes [ "=" expressions ]

  attributes          ::=  Name attribute { "," Name attribute }

  attribute           ::= [ "<" Name ">" ]

  return-statement    ::= "return" [ expressions ] [ ";" ]

  label               ::= "::" Name "::"

  function-name       ::= Name { "." Name } [ ":" Name ]

  variables           ::= variable { "," variable }

  variable            ::= Name
                        | prefix-expression "[" expression "]"
                        | prefix-expression "." Name

  names               ::= Name { "," Name }

  expressions         ::= expression { "," expression }

  expression          ::= "nil"
                        | "false"
                        | "true"
                        | Numeral
                        | LiteralString
                        | "..."
                        | function-definition
                        | prefix-expression
                        | table-constructor
                        | expression binary expression
                        | unary expression

  prefix-expression   ::= variable
                        | function-call
                        | "(" expression ")"

  function-call       ::= prefix-expression arguments
                        | prefix-expression ":" Name arguments

  arguments           ::= "(" [ expressions ] ")"
                        | table-constructor
                        | LiteralString

  function-definition ::= "function" function-body

  function-body       ::= "(" [ parameters ] ")" block "end"

  parameters          ::= names [ "," "..." ]
                        | "..."

  table-constructor   ::= "{" [ fields ] "}"

  fields              ::= field { field-separator field } [ field-separator ]

  field               ::= "[" expression "]" "=" expression
                        | Name "=" expression
                        | expression

  field-separator     ::= "," | ";"

  binary              ::= "+"  | "-"   | "*"  | "/"  | "//" | "^"  | "%" | "&"  | "~"
                        | "|"  | ">>"  | "<<" | ".." | "<"  | "<=" | ">" | ">=" | "=="
                        | "~=" | "and" | "or"

  unary               ::= "-" | "not" | "#" | "~"
#+end_src

** Keywords

| ~and~    | ~false~ | ~local~ | ~then~     | ~break~  | ~for~   |
| ~nil~    | ~true~  | ~do~    | ~function~ | ~not~    | ~until~ |
| ~else~   | ~goto~  | ~or~    | ~while~    | ~elseif~ | ~if~    |
| ~repeat~ | ~end~   | ~in~    | ~return~   |          |         |

** Operator Precedence

| precedence | operators            | associativity |
|------------+----------------------+---------------|
|          1 | ^                    | right         |
|          2 | unary (not # - ~)    | left          |
|          3 | *  /  //  %          | left          |
|          4 | +  -                 | left          |
|          5 | ..                   | right         |
|          6 | <<  >>               | left          |
|          7 | &                    | left          |
|          8 | ~                    | left          |
|          9 | \vert{}              | left          |
|         10 | <  >  <=  >=  ~=  == | left          |
|         11 | and                  | left          |
|         12 | or                   | left          |

** Types

| nil      | boolean | number | string   |
| function | table   | thread | userdata |

#+begin_quote
  "Lua is a dynamically typed language. This means that variables do not have types;
   only values do. There are no type definitions in the language. All values carry
   their own type.

   All values in Lua are first-class values. This means that all values can be stored
   in variables, passed as arguments to other functions, and returned as results."

  â€” *Lua 5.4 Reference Manual*
#+end_quote

- nil :: A single value whose main property is to be different from any other value. It often
  represents the absence of a value.

- boolean :: Two values: *true* and *false*. Both *nil* and *false* make a condition *false*.
  All other values make a condition *true*.

- number :: Represents two subtypes: *integer* and *float*. Standard Lua uses 64-bit integers and
  double-precision (64-bit) floats.

  - More often than not, these two number types are interchangeable. ~type(x)~
    returns ~number~. The function ~math.type~ distinguishes between the two.

  - For mathematical operations, if both operands are integers, the operation returns
    an integer result, otherwise the operation returns a float. With mixed operands,
    Lua converts the integer value to float prior to evaluation.

- string :: Immutable sequence of bytes. Strings are 8-bit clean, meaning any 8-bit value,
  including embedded zeros (~'\0'~). Lua is encoding-agnostic, meaning it makes no assumptions
  about the contents of a string.

- function :: A function in Lua is a callable, nestable, anonymous, lexically-scoped,
  first-class expression. Lua can call and manipulate functions implemented both in Lua and in C.

- userdata :: Arbitrary C data stored in Lua variables. A block of raw memory. Userdata has
  no predefined operations in Lua, except assignment and identity testing. Metatables can
  define operations for full userdata values. Userdata can only be created and modified through
  Lua's C API.

  - *full userdata*: A block of memory managed by Lua.

  - *light userdata*: A C pointer value.

- thread :: Independent threads of execution used to implement coroutines. Lua threads are not
  operating system threads, meaning Lua supports coroutines on all systems

- table :: Heterogeneous, associative arrays. Tables are the sole data-structuring mechanism
  in Lua. They are capable of containing any value except *nil* and *NaN*.

  - Any key associated to the value *nil* is not considered part of the table. Conversely,
    any key that is not part of the table has an associated *nil* value.

  - Table indexing implements raw equality. Expressions ~table[i]~ and ~table[j]~ denote the
    same element if and only if indexes ~i~ and ~j~ are raw equal, meaning they are equal
    without delegating to metamethods.

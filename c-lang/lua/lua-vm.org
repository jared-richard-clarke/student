* Lua's Virtual Machine

** Sources

| source                          | author                                                                       |
|---------------------------------+------------------------------------------------------------------------------|
| *The Implementation of Lua 5.0* | Roberto Ierusalimschy, Luiz Henrique de Figueiredo, and Waldemar Celes Filho |
| *Lua Source Code*, 5.4          | Roberto Ierusalimschy, Luiz Henrique de Figueiredo, and Waldemar Celes Filho |
| *Crafting Interpreters*         | Robert Nystrom                                                               |

As of version 5.4, there are 83 instructions in Lua's virtual machine. Most instructions
correspond directly to language constructs, such as arithmetic, table creation and indexing,
function and method calls, setting variables and getting values. There are also jump
instructions for implementing control flow.

** Notational Conventions

- ~R[x]~: ~xth~ register.

- ~K[x]~: ~xth~ constant.

- ~RK[x]~: if ~k(i)~ then ~K[x]~ else ~R[x]~.


** Instruction Set

| opcode     | operands | description                                                      |
|------------+----------+------------------------------------------------------------------|
| MOVE       | A B      | R[A] := R[B]                                                     |
| LOADI      | A sBx    | R[A] := sBx                                                      |
| LOADF      | A sBx    | R[A] := (lua_Number)sBx                                          |
| LOADK      | A Bx     | R[A] := K[Bx]                                                    |
| LOADKX     | A        | R[A] := K[extra arg]                                             |
| LOADFALSE  | A        | R[A] := false                                                    |
| LFALSESKIP | A        | R[A] := false; pc++                                              |
| LOADTRUE   | A        | R[A] := true                                                     |
| LOADNIL    | A B      | R[A], R[A+1], ..., R[A+B] := nil                                 |
| GETUPVAL   | A B      | R[A] := UpValue[B]                                               |
| SETUPVAL   | A B      | UpValue[B] := R[A]                                               |
|------------+----------+------------------------------------------------------------------|
| GETTABUP   | A B C    | R[A] := UpValue[B][K[C]:shortstring]                             |
| GETTABLE   | A B C    | R[A] := R[B][R[C]]                                               |
| GETI       | A B C    | R[A] := R[B][C]                                                  |
| GETFIELD   | A B C    | R[A] := R[B][K[C]:shortstring]                                   |
|------------+----------+------------------------------------------------------------------|
| SETTABUP   | A B C    | UpValue[A][K[B]:shortstring] := RK(C)                            |
| SETTABLE   | A B C    | R[A][R[B]] := RK(C)                                              |
| SETI       | A B C    | R[A][B] := RK(C)                                                 |
| SETFIELD   | A B C    | R[A][K[B]:shortstring] := RK(C)                                  |
|------------+----------+------------------------------------------------------------------|
| NEWTABLE   | A B C k  | R[A] := {}                                                       |
|------------+----------+------------------------------------------------------------------|
| SELF       | A B C    | R[A+1] := R[B]; R[A] := R[B][RK(C):string]                       |
|------------+----------+------------------------------------------------------------------|
| ADDI       | A B sC   | R[A] := R[B] + sC                                                |
|------------+----------+------------------------------------------------------------------|
| ADDK       | A B C    | R[A] := R[B] + K[C]:number                                       |
| SUBK       | A B C    | R[A] := R[B] - K[C]:number                                       |
| MULK       | A B C    | R[A] := R[B] * K[C]:number                                       |
| MODK       | A B C    | R[A] := R[B] % K[C]:number                                       |
| POWK       | A B C    | R[A] := R[B] ^ K[C]:number                                       |
| DIVK       | A B C    | R[A] := R[B] / K[C]:number                                       |
| IDIVK      | A B C    | R[A] := R[B] // K[C]:number                                      |
|------------+----------+------------------------------------------------------------------|
| BANDK      | A B C    | R[A] := R[B] & K[C]:integer                                      |
| BORK       | A B C    | R[A] := R[B] \vert{} K[C]:integer                                |
| BXORK      | A B C    | R[A] := R[B] ~ K[C]:integer                                      |
|------------+----------+------------------------------------------------------------------|
| SHRI       | A B sC   | R[A] := R[B] >> sC                                               |
| SHLI       | A B sC   | R[A] := sC << R[B]                                               |
|------------+----------+------------------------------------------------------------------|
| ADD        | A B C    | R[A] := R[B] + R[C]                                              |
| SUB        | A B C    | R[A] := R[B] - R[C]                                              |
| MUL        | A B C    | R[A] := R[B] * R[C]                                              |
| MOD        | A B C    | R[A] := R[B] % R[C]                                              |
| POW        | A B C    | R[A] := R[B] ^ R[C]                                              |
| DIV        | A B C    | R[A] := R[B] / R[C]                                              |
| IDIV       | A B C    | R[A] := R[B] // R[C]                                             |
|------------+----------+------------------------------------------------------------------|
| BAND       | A B C    | R[A] := R[B] & R[C]                                              |
| BOR        | A B C    | R[A] := R[B] \vert{} R[C]                                        |
| BXOR       | A B C    | R[A] := R[B] ~ R[C]                                              |
| SHL        | A B C    | R[A] := R[B] << R[C]                                             |
| SHR        | A B C    | R[A] := R[B] >> R[C]                                             |
|------------+----------+------------------------------------------------------------------|
| MMBIN      | A B C    | call C metamethod over R[A] and R[B]                             |
| MMBINI     | A sB C k | call C metamethod over R[A] and sB                               |
| MMBINK     | A B C k  | call C metamethod over R[A] and K[B]                             |
|------------+----------+------------------------------------------------------------------|
| UNM        | A B      | R[A] := -R[B]                                                    |
| BNOT       | A B      | R[A] := ~R[B]                                                    |
| NOT        | A B      | R[A] := not R[B]                                                 |
| LEN        | A B      | R[A] := #R[B] (length operator)                                  |
|------------+----------+------------------------------------------------------------------|
| CONCAT     | A B      | R[A] := R[A].. ... ..R[A + B - 1]                                |
|------------+----------+------------------------------------------------------------------|
| CLOSE      | A        | close all upvalues >= R[A]                                       |
| TBC        | A        | mark variable A "to be closed"                                   |
| JMP        | sJ       | pc += sJ                                                         |
| EQ         | A B k    | if ((R[A] = R[B]) ~= k) then pc++                                |
| LT         | A B k    | if ((R[A] <  R[B]) ~= k) then pc++                               |
| LE         | A B k    | if ((R[A] <= R[B]) ~= k) then pc++                               |
|------------+----------+------------------------------------------------------------------|
| EQK        | A B k    | if ((R[A] = K[B]) ~= k) then pc++                                |
| EQI        | A sB k   | if ((R[A] = sB) ~= k) then pc++                                  |
| LTI        | A sB k   | if ((R[A] < sB) ~= k) then pc++                                  |
| LEI        | A sB k   | if ((R[A] <= sB) ~= k) then pc++                                 |
| GTI        | A sB k   | if ((R[A] > sB) ~= k) then pc++                                  |
| GEI        | A sB k   | if ((R[A] >= sB) ~= k) then pc++                                 |
|------------+----------+------------------------------------------------------------------|
| TEST       | A k      | if (not R[A] = k) then pc++                                      |
| TESTSET    | A B k    | if (not R[B] = k) then pc++ else R[A] := R[B]                    |
|------------+----------+------------------------------------------------------------------|
| CALL       | A B C    | R[A], ... ,R[A+C-2] := R[A](R[A+1], ... ,R[A+B-1])               |
| TAILCALL   | A B C k  | return R[A](R[A+1], ... ,R[A+B-1])                               |
|------------+----------+------------------------------------------------------------------|
| RETURN     | A B C k  | return R[A], ... ,R[A+B-2]                                       |
| RETURN0    |          | return                                                           |
| RETURN1    | A        | return R[A]                                                      |
|------------+----------+------------------------------------------------------------------|
| FORLOOP    | A Bx     | update counters; if loop continues then pc-=Bx;                  |
| FORPREP    | A Bx     | <check values and prepare counters> if not to run then pc+=Bx+1; |
|------------+----------+------------------------------------------------------------------|
| TFORPREP   | A Bx     | create upvalue for R[A + 3]; pc+=Bx                              |
| TFORCALL   | A C      | R[A+4], ... ,R[A+3+C] := R[A](R[A+1], R[A+2]);                   |
| TFORLOOP   | A Bx     | if R[A+2] ~= nil then { R[A]=R[A+2]; pc -= Bx }                  |
|------------+----------+------------------------------------------------------------------|
| SETLIST    | A B C k  | R[A][C+i] := R[A+i], 1 <= i <= B                                 |
|------------+----------+------------------------------------------------------------------|
| CLOSURE    | A Bx     | R[A] := closure(KPROTO[Bx])                                      |
|------------+----------+------------------------------------------------------------------|
| VARARG     | A C      | R[A], R[A+1], ..., R[A+C-2] = vararg                             |
|------------+----------+------------------------------------------------------------------|
| VARARGPREP | A        | (adjust vararg parameters)                                       |
|------------+----------+------------------------------------------------------------------|
| EXTRAARG   | Ax       | extra (larger) argument for previous opcode                      |

** Instruction Layout

#+begin_example
  +----+---+-------+
  | OP | A | B | C |
  |----|---|-------|
  | OP | A | Bx    |
  |----|---|-------|
  | OP | A | sBx   |
  |----|-----------|
  | OP | Ax        |
  |----|-----------|
  | OP | sJ        |
  +----+-----------+

  === Instruction layout as documented in source code: lopcodes.h ===

  We assume that instructions are unsigned 32-bit integers.
  All instructions have an opcode in the first 7 bits.
  Instructions can have the following formats:
  
         |3 3 2 2 2 2 2 2|2 2 2 2 1 1 1 1|1|1 1 1 1 1 0 0 0|0 0 0 0 0 0 0|
         |---------------|---------------|-|---------------|-------------|
         |1 0 9 8 7 6 5 4|3 2 1 0 9 8 7 6|5|4 3 2 1 0 9 8 7|6 5 4 3 2 1 0|
  -------|---------------|---------------|-|---------------|-------------|
  iABC   |      C(8)     |      B(8)     |k|     A(8)      |   Op(7)     |
  -------|---------------------------------|---------------|-------------|
  iABx   |            Bx(17)               |     A(8)      |   Op(7)     |
  -------|---------------------------------|---------------|-------------|
  iAsBx  |           sBx (signed)(17)      |     A(8)      |   Op(7)     |
  -------|-------------------------------------------------|-------------|
  iAx    |                      Ax(25)                     |   Op(7)     |
  -------|-------------------------------------------------|-------------|
  isJ    |                      sJ (signed)(25)            |   Op(7)     |

  A signed argument is represented in excess K: the represented value is
  the written unsigned value minus K, where K is half the maximum for the
  corresponding unsigned argument.

  === Size and position of opcode arguments ===
  
  SIZE_C  = 8
  SIZE_B  = 8
  SIZE_Bx = SIZE_C + SIZE_B + 1
  SIZE_A  = 8
  SIZE_Ax = SIZE_Bx + SIZE_A
  SIZE_sJ = SIZE_Bx + SIZE_A

  SIZE_OP = 7

  POS_OP  = 0

  POS_A   = POS_OP + SIZE_OP
  POS_k   = POS_A + SIZE_A
  POS_B   = POS_k + 1
  POS_C   = POS_B + SIZE_B

  POS_Bx  = POS_k

  POS_Ax  = POS_A

  POS_sJ  = POS_A
#+end_example

** Lua Function to Bytecode

#+begin_src lua
  -- === Lua Function ===

  function max(a, b)
      local m = a
      if b > a then
          m = b
      end
      return m
  end

  -- === Bytecode: 5.0 ===
  --
  --   Op      | A | B | C |
  --  ----------------------
  -- 1 MOVE      2   0   0    ; R(A) := R(B) local a
  -- 2 LT        0   0   1    ; RK(B) local a < RK(C) local b ?
  -- 3 JMP       0   1        ; sBx pc -> 5
  -- 4 MOVE      2   1   0    ; R(A) local m := R(B) local b
  -- 5 RETURN    2   2   0    ; return R(A) local m
  -- 6 RETURN    0   1   0    ; return
  --
  -- | index | name | startpc | endpc |
  -- |-------+------+---------+-------|
  -- | 0     | a    | 1       | 6     |
  -- | 1     | b    | 1       | 6     |
  -- | 2     | m    | 1       | 6     |

  -- === Bytecode: 5.4.7 ===
  --
  --   Op      | A | B | C |
  --  ----------------------
  -- 1 MOVE      2   0        ; R(A) := R(B) local a
  -- 2 LT        0   1   0    ; RK(A) local a < RK(B) local b ?
  -- 3 JMP       1            ; A to pc -> 5
  -- 4 MOVE      2   1        ; R(A) local m := R(B) local b
  -- 5 RETURN1   2            ; return R(A) local m
  -- 6 RETURN0                ; return
  --
  -- | index | name | startpc | endpc |
  -- |-------+------+---------+-------|
  -- | 0     | a    | 1       | 7     |
  -- | 1     | b    | 1       | 7     |
  -- | 2     | m    | 2       | 7     |
#+end_src

** Lua Data Types

#+begin_src c
  // tagged union (value_, tt_)
  // where value_ = union of C types implementing Lua types
  //       tt_    = the tag identifying type
  typedef struct TValue {
    Value value_;
    lu_byte tt_;
  } TValue;

  // The union of all Lua values
  typedef union Value {
    // strings, tables, functions (referenced and garbage-collected data)
    struct GCObject *gc;
    // light userdata
    void *p;
    // light C functions
    lua_CFunction f;
    // integers
    lua_Integer i;
    // floating point (double)
    lua_Number n;
    // unused field
    lu_byte ub;
  } Value;
#+end_src

** Register Based (Lua 5.0)

#+begin_src lua
  local a, t, i  -- 1: LOADNIL  0 2 0
  a = a + i      -- 2: ADD      0 0 2
  a = a + 1      -- 3: ADD      0 0 250 ; 1
  a = t[i]       -- 4: GETTABLE 0 1 2
#+end_src

** Stack Based (Lua 4.0)

#+begin_src lua
  local a, t, i   --  1: PUSHNIL    3
  a = a + i       --  2: GETLOCAL   0 ; a
                  --  3: GETLOCAL   2 ; i
                  --  4: ADD
                  --  5: SETLOCAL   0 ; a
  a = a + 1       --  6: GETLOCAL   0 ; a
                  --  7: ADDI       1
                  --  8: SETLOCAL   0 ; a
  a = t[i]        --  9: GETLOCAL   1 ; t
                  -- 10: GETINDEXED 2 ; i
                  -- 11: SETLOCAL   0 ; a
#+end_src

** Functions, Closures, and UpValues

#+begin_quote
  "When Lua compiles a function it generates a *prototype* containing the virtual machine
   instructions for the function, its constant values (numbers, literal strings, etc.),
   and some debug information. At run time, whenever Lua executes a ~function...end~
   expression, it creates a new closure. Each closure has a reference to its corresponding
   prototype, a reference to its environment (a table wherein it looks for global variables),
   and an array of references to upvalues, which are used to access outer local variables...

   Lua uses a structure called an *upvalue* to implement closures. Any outer local variable
   is accessed indirectly through an upvalue. The upvalue originally points to the stack
   slot wherein the variable lives. When the variable goes out of scope, it migrates into
   a slot inside the upvalue itself...

   Unlike its inner functions, the function that declares the variable accesses [that variable]
   as it accesses its own local variables: directly in the stack."

  — *The Implementation of Lua 5.0*
#+end_quote

*** Sample Source Code: Function Prototype and Closure

#+begin_src c
  // === source: lobject.h ===
  
  // Function Prototype
  typedef struct Proto {
    // CommonHeader -----------+
    struct GCObject *next; //  |
    lu_byte tt;            //  |
    lu_byte marked;        // <+
    // Number of fixed, named parameters
    lu_byte numparams;
    lu_byte is_vararg;
    // Number of registers needed by this function
    lu_byte maxstacksize;
    int sizeupvalues;
    int sizek;
    int sizecode;
    int sizelineinfo;
    int sizep;
    int sizelocvars;
    int sizeabslineinfo;
    // Debug information
    int linedefined;
    int lastlinedefined;
    // List of constants used by this function
    TValue *k;
    // List of opcode instructions
    Instruction *code;
    // List of functions defined within this function
    struct Proto **p;
    // List of upvalue descriptions: name, kind, In stack?
    Upvaldesc *upvalues;
    // Debug information
    ls_byte *lineinfo;
    // Absolute line source for a given instruction
    AbsLineInfo *abslineinfo;
    // List of local variable lifetimes
    LocVar *locvars;
    TString  *source;
    GCObject *gclist;
  } Proto;

  // Upvalues for Lua closures
  typedef struct UpVal {
    // CommonHeader -----------+
    struct GCObject *next; //  |
    lu_byte tt;            //  |
    lu_byte marked;        // <+
    union {
      // Pointer to stack or upvalue
      TValue *p;
      // Offset for stack reallocation
      ptrdiff_t offset;
    } v;
    union {
      // Open upvalue
      struct {
        // Linked list
        struct UpVal *next;
        struct UpVal **previous;
      } open;
      // Closed upvalue
      TValue value;
    } u;
  } UpVal;

  // Closures for C functions registered with Lua.
  typedef struct CClosure {
    ClosureHeader;
    // typedef int (*lua_CFunction) (lua_State *L);
    lua_CFunction f;
    // List of upvalues
    TValue upvalue[1];
  } CClosure;

  // Lua Closure
  typedef struct LClosure {
    // ClosureHeader -------------+
    // CommonHeader -----------+  |
    struct GCObject *next; //  |  |
    lu_byte tt;            //  |  |
    lu_byte marked;        // <+  |
    lu_byte nupvalues;     //     |
    GCObject *gclist       // <---+
    struct Proto *p;
    // List of upvalues
    UpVal *upvals[1];
  } LClosure;

  typedef union Closure {
    CClosure c;
    LClosure l;
  } Closure;
#+end_src

*** Closure Diagram

#+begin_example
  === Closures ===

  1. Resolves local variables that are declared in surrounding functions.
  2. Capture variables that have already left the stack.

  === Open Upvalues ===

   function f(x, y)
       function g(z)
           return x + y + z
       end
       return g
   end

   sum = f(7, 11)

                            Open Upvalue         Open Upvalue
                           +-------------+      +-------------+
        Open Upvalues <----| next        |<-----| next        |
                           +-------------+      +-------------+
                           | location    |--+   | location    |--+
                           +-------------+  |   +-------------+  |
                           | closed      |  |   | closed      |  |
                           +-------------+  |   +-------------+  |
                                            |                    |
        +-----------------------------------+                    |
        |    +---------------------------------------------------+
        V    V
  +---+---+---->
  | f | 7 | 11 | <-- Stack
  +---+---+---->

  === Closed Upvalues ===

  sum(1)

                            Function Prototype
                           +-------------+
          Closure      +-->| chunk       |--> Bytecode Array
         +----------+  |   |-------------|
     +-->| function |--+   | constants   |--> Value Array
     |   |----------|      +-------------+
     |   | upvalues |--+
     |   +----------+  |    Upvalue Pointer Array
     |                 |   +-------------+-------------+
     |                 +-->| index 0     | index 1     |
     |                     +-------------+-------------+
     |                            |           |
     |                  +---------+           |
     |                  |   Closed Upvalue    |   Closed Upvalue
     |                  |  +-------------+    |  +-------------+
     |  Open Upvalues <----| next        |<------| next        |
     |                  |  +-------------+    |  +-------------+
     |                  +->| location    |--+ +->| location    |--+
     |                     +-------------+  |    +-------------+  |
     |                     | closed 7    |<-+    | closed 11   |<-+
     |                     +-------------+       +-------------+
     |
  +------->
  | g | 1 | <-- Stack
  +------->
#+end_example

* Tables

** Sources

| source                        | author                                                                 |
|-------------------------------+------------------------------------------------------------------------|
| *A Look at the Design of Lua* | Roberto Ierusalimschy, Luiz Henrique De Figueiredo, and Waldemar Celes |
| *Programming in Lua*          | Roberto Ierusalimschy                                                  |

** Implementing Modules

Lua loads any chunk as the body of an enclosing anonymous function. A module
is a chunk — an anonymous function — that creates and returns a table.
The table provides the namespace, lexical scoping provides encapsulation, and
first-class functions allow exportation.

*** Tables

#+begin_src lua
  -- === File: "chunk.lua" ===

  -- function ()
       local Module = {}

       function Module.new (x, y)
         return { x = x, y = y }
       end

       function Module.add (v1, v2)
         return Module.new(v1.x + v2.x, v1.y + v2.y)
       end

       function Module.magnitude (v)
         return math.sqrt(v.x ^ 2 + v.y ^ 2)
       end

       return Module
  -- end

  -- local vec = require("chunk")
  --
  -- five = vec.magnitude(vec.new(3, 4))
#+end_src

*** The ~_ENV~ Table

The anonymous function of each chunk is compiled in the scope of the local variable
~_ENV~, so that ~add~ compiles to ~_ENV.add~. By default, ~_ENV~ is loaded with a
fixed table called the global environment. Changing ~_ENV~ allows functions to be
called with different environments.

#+begin_src lua
  -- function ()
       local sqrt = math.sqrt
       local _ENV = {}

       -- _ENV["new"]
       function new (x, y)
         return { x = x, y = y }
       end
       -- _ENV["add"]
       function add (v1, v2)
         return new(v1.x + v2.x, v1.y + v2.y)
       end

       -- _ENV["magnitude"]
       function magnitude (v)
         return sqrt(v.x ^ 2 + v.y ^ 2)
       end

       return _ENV
  -- end
#+end_src

** Implementing Object-Oriented Programming

#+begin_quote
  "A table in Lua is an object in more than one sense. Like objects, tables have a state.
   Like objects, tables have an identity (a *self*) that is independent of their values;
   specifically, two objects (*tables*) with the same value are different objects, whereas
   an object can have different values at different times. Like objects, tables have a
   life cycle that is independent of who created them or where they were created."

  — Roberto Ierusalimschy
#+end_quote

*** Meta Tables

#+begin_quote
  "Each value in Lua can have a metatable. Tables and userdata have individual metatables;
   values of other types share one single metatable for all values of that type.
   Lua always creates new tables without metatables.

   When looking for a metamethod, Lua performs the following steps: if the first value has
   a metatable with the required metamethod, Lua uses this metamethod, independently of
   the second value; otherwise, if the second value has a metatable with the required
   metamethod, Lua uses it; otherwise, Lua raises an error."

  — Roberto Ierusalimschy
#+end_quote

#+begin_src lua
  local meta = {}

  function vector (x, y)
    local v = { x = x, y = y }
    setmetatable(v, meta)
    return v
  end

  -- Operator overloading through metamethods.
  function meta.__add (v1, v2)
    return vector(v1.x + v2.x, v1.y + v2.y)
  end

  A = vector(1, 2)
  B = vector(2, 2)
  C = A + B --> { x = 3, y = 4 }
#+end_src

*** Protoypes

#+begin_src lua
  -- Prototype
  local Account = { balance = 0 }

  -- Delegating the indexing operator "[]".
  -- If we access an absent field, Lua will look for a
  -- corresponding field in the table's metatable.
  local meta = { __index = Account }
  --    meta = { __index = function (_, key) return Account[key] end }

  --       Account.new = function (self)
  function Account:new ()
    local object = {}
    setmetatable(object, meta)
    return object
  end

  -- function Account:new ()
  --   local object = {}
  --   self.__index = self
  --   setmetatable(object, self)
  --   return object
  -- end

  --       Account.deposit = function (self, v)
  function Account:deposit (v)
    self.balance = self.balance + v
  end

  --       Account.withdraw = function (self, v)
  function Account:withdraw (v)
    if amount > self.balance then error("insufficient funds") end
    self.balance = self.balance - v
  end

  --       Account.balance = function (self)
  function Account:balance ()
    return self.balance
  end

  return Account

  -- Account = require("Account")
  --
  -- account = Account:new()
  -- account:deposit(100)
  -- balance = account:balance()
#+end_src

*** Privacy

**** Read-Only Tables

#+begin_src lua
  function read_only (t)
    local proxy = {}
    local meta = {
      __index = t,
      __newindex = function (t, k, v)
        error("attempt to update a read-only table")
      end
    }
    setmetatable(proxy, meta)
    return proxy
  end
#+end_src

**** Account Revisited

#+begin_src lua
  -- === Implementation 1 ===

  function new_account (x)
    local self = { balance = x }

    local deposit = function (v)
                      self.balance = self.balance + v
                    end

    local withdraw = function (v)
                       if amount > self.balance then error("insufficient funds") end
                       self.balance = self.balance - v
                     end

    local get_balance = function () return self.balance end

    return {
      withdraw    = withdraw,
      deposit     = deposit,
      get_balance = get_balance
    }
  end

  -- === Implementation 2 ===

  local balance = {}

  -- Set keys to weak for garbage collection.
  setmetatable(balance, { __mode = "k" })

  local Account = {}

  function Account:new ()
    local object = {}
    self.__index = self
    setmetatable(object, self)
    balance[object] = 0
    return object
  end

  function Account:deposit (v)
    balance[self] = balance[self] + v
  end

  function Account:withdraw (v)
    if amount > self.balance then error("insufficient funds") end
    balance[self] = balance[self] - v
  end

  function Account:balance ()
    return balance[self]
  end

  return Account
#+end_src

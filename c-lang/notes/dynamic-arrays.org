* ~Chunk~: Dynamic Arrays

** Sources

| source                  | author      |
|-------------------------+-------------|
| *Crafting Interpreters* | Bob Nystrom |

** Introduction

In his book *Crafting Interpreters*, Bob Nystrom builds a dynamic array
for his implementation of a byte-code interpreter.

According to Nystrom, dynamic arrays provide three advantages:

1. Cache-friendly, dense storage.
2. Constant-time indexed element lookup.
3. Constant-time appending to the end of an array.

A dynamic array consists of an underlying array as well as the capacity, which counts the
number of entries allocated to the array, and the count, which tracks the number
of allocated entries in use.

If the count is less than the capacity, elements can be appended to the end of the array.
If the count is at or exceeds capacity, seven steps are taken:

1. Allocate new array with more capacity.
2. Copy the existing elements from the old array to the new one.
3. Store the new capacity.
4. Delete the old array.
5. Update fields to point to the new array.
6. Store the element in the new array.
7. Update the count.

*Side Note*: Slices in the Go programming language are a high-level versions of dynamic arrays.

** Code Example

Below is a consolidated, simplified, and earlier version of Nystrom's ~Chunk~ implementation.

#+begin_src c
  #include <stddef.h>
  #include <stdint.h>
  #include <stdlib.h>

  #define GROW_CAPACITY(capacity) \
      ((capacity) < 8 ? 8 : (capacity)*2)

  #define GROW_ARRAY(type, pointer, oldCount, newCount)      \
      (type *)reallocate(pointer, sizeof(type) * (oldCount), \
                         sizeof(type) * (newCount))

  #define FREE_ARRAY(type, pointer, oldCount) \
      reallocate(pointer, sizeof(type) * (oldCount), 0)

  void *reallocate(void *pointer, size_t oldSize, size_t newSize)
  {
      if (newSize == 0)
      {
          free(pointer);
          return NULL;
      }

      void *result = realloc(pointer, newSize);
      if (result == NULL)
          exit(1);
      return result;
  }

  // Chunk: a dynamic array
  typedef struct
  {
      int count;
      int capacity;
      uint8_t *code;
  } Chunk;

  void initChunk(Chunk *chunk)
  {
      chunk->count = 0;
      chunk->capacity = 0;
      chunk->code = NULL;
  }

  void writeChunk(Chunk *chunk, uint8_t byte)
  {
      if (chunk->capacity < chunk->count + 1)
      {
          int oldCapacity = chunk->capacity;
          chunk->capacity = GROW_CAPACITY(oldCapacity);
          chunk->code = GROW_ARRAY(uint8_t, chunk->code,
                                   oldCapacity, chunk->capacity);
      }

      chunk->code[chunk->count] = byte;
      chunk->count++;
  }

  void freeChunk(Chunk *chunk)
  {
      FREE_ARRAY(uint8_t, chunk->code, chunk->capacity);
      initChunk(chunk);
  }
#+end_src

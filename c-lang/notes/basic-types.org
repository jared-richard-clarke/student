* C Basic Types and Operations

** Sources

| source         | author       |
|----------------+--------------|
| *Modern C*     | Jens Gustedt |

** Summary

- C programs run in an abstract state machine that is mostly independent of the specific
  computer where it is launched.

- All basic C types are kinds of numbers, but not all of them can be used directly for
  arithmetic.

- Values have a type and a binary representation.

- When necessary, types of values are implicitly converted to fit the needs of particular
  places where they are used.

- Variables must be explicitly initialized before their first use.

- Integer computations give exact values as long as there is no overflow.

- Floating-point computations only give approximated results that are cut off after a
  certain number of binary digits.

** Primary Types

The C language provides the four basic arithmetic type specifiers ~char~, ~int~, ~float~,
and ~double~, and the modifiers ~signed~, ~unsigned~, ~short~, and ~long~.

The type ~size_t~ represents values in range ~[0, SIZE_MAX]~. Depending on the platform ~SIZE_MAX~
is equal to ~2^16 - 1~, ~2^32 - 1~, or ~2^64 - 1~. ~SIZE_MAX~ is contained in ~stdint.h~. ~size_t~
is an unsigned integer type.

Narrow types must be promoted to a wider type — usually a ~signed int~ — before they are used
in an arithmetic expression.

- Use ~size_t~ for sizes, cardinalities, or ordinals.

- Use ~unsigned~ for small, non-negative quantities.

- Use ~signed~ for small quantities that bear a sign.

- Use ~ptrdiff_t~ for large differences that bear a sign.

- Use ~double~ for floating-point calculations.

- Use ~double complex~ for complex calculations.

#+begin_example
  | class                     | systematic name      | other name          | rank |
  |---------------------------+----------------------+---------------------+------|<
  |                           | _Bool                | bool                | 0    | |
  |                           | unsigned char        |                     | 1    | +-+
  |                unsigned   | unsigned short       |                     | 2    | | |
  |                           |----------------------+---------------------+------|<  |
  |                           | unsigned int         | unsigned            | 3    |   |
  |                           | unsigned long        |                     | 4    |   +- narrow types
  |                           | unsigned long long   |                     | 5    |   |
  |                -----------+----------------------+---------------------+------|<  |
  | integers       [un]signed | char                 |                     | 1    | | |
  |                -----------+----------------------+---------------------+------| +-+
  |                           | signed char          |                     | 1    | |
  |                           | signed short         | short               | 2    | |
  |                           |----------------------+---------------------+------|<
  |                signed     | signed int           | signed or int       | 3    |
  |                           | signed long          | long                | 4    |
  |                           | signed long long     | long long           | 5    |
  |---------------------------+----------------------+---------------------+------|
  |                           | float                |                     |      |
  |                real       | double               |                     |      |
  |                           | long double          |                     |      |
  | floating point            |----------------------+---------------------+------|
  |                           | float _Complex       | float complex       |      |
  |                complex    | double _Complex      | double complex      |      |
  |                           | long double _Complex | long double complex |      |
#+end_example

** Semantic Arithmetic Types

| type      | header   | context                   | meaning                              |
|-----------+----------+---------------------------+--------------------------------------|
| size_t    | stddef.h |                           | type for "sizes" and cardinalities   |
|-----------+----------+---------------------------+--------------------------------------|
| ptrdiff_t | stddef.h |                           | type for size differences            |
|-----------+----------+---------------------------+--------------------------------------|
| uintmax_t | stdint.h |                           | maximum width unsigned integer       |
|-----------+----------+---------------------------+--------------------------------------|
| intmax_t  | stdint.h |                           | maximum width signed integer         |
|-----------+----------+---------------------------+--------------------------------------|
| time_t    | time.h   | time(0), difftime(t2, t1) | calendar time in seconds since epoch |
|-----------+----------+---------------------------+--------------------------------------|
| clock_t   | time.h   | clock()                   | processor time                       |

** Value Operators

| operator          | alt-name | form    | type a           | type b     | type result | operation      |
|-------------------+----------+---------+------------------+------------+-------------+----------------|
|                   |          | a       | narrow           |            | Wide        | promotion      |
| + -               |          | a@b     | pointer          | integer    | pointer     | arithmetic     |
| + - * /           |          | a@b     | arithmetic       | arithmetic | arithmetic  | arithmetic     |
| + -               |          | @a      | arithmetic       |            | arithmetic  | arithmetic     |
| %                 |          | a@b     | integer          | integer    | integer     | arithmetic     |
| ~                 | compl    | @a      | integer          |            | integer     | bitwise        |
| &                 | bitand   | a@b     | integer          | integer    | integer     | bitwise        |
| \vert{}           | bitor    | a@b     | integer          | integer    | integer     | bitwise        |
| ^                 | xor      | a@b     | integer          | integer    | integer     | bitwise        |
| << >>             |          | a@b     | integer          | positive   | integer     | bitwise        |
| == < > <= >=      |          | a@b     | scalar           | scalar     | 0, 1        | comparison     |
| !=                | not_eq   | a@b     | scalar           | scalar     | 0, 1        | comparsion     |
|                   | !!a      | a       | scalar           |            | 0, 1        | logic          |
| !a                | not      | @a      | scalar           |            | 0, 1        | logic          |
| && \vert{}\vert{} | and or   | a@b     | scalar           | scalar     | 0, 1        | logic          |
| .                 |          | a@m     | struct           |            | value       | member         |
| \star{}           |          | @a      | pointer          |            | object      | reference      |
| []                |          | a[b]    | pointer          | integer    | object      | member         |
| ->                |          | a@m     | struct pointer   |            | object      | member         |
| ()                |          | a(b...) | function pointer |            | value       | call           |
| sizeof            |          | @ a     | none             |            | size_t      | size, ICE      |
| _Alignof          | alignof  | @(a)    | none             |            | size_t      | alignment, ICE |

** Object Operators

| operator    | alt-name | form  | type                  | result  | operation      |
|-------------+----------+-------+-----------------------+---------+----------------|
|             |          | o     | array*                | pointer | array decay    |
|             |          | o     | function              | pointer | function decay |
|             |          | o     | other                 | value   | evaluation     |
| =           |          | o@a   | non-array             | value   | assignment     |
| += -= *= /= |          | o@a   | arithmetic            | value   | arithmetic     |
| += -=       |          | o@a   | pointer               | value   | arithmetic     |
| %=          |          | o@a   | integer               | value   | arithmetic     |
| ++ --       |          | @o o@ | arithmetic or pointer | value   | arithmetic     |
| &=          | and_eq   | o@a   | integer               | value   | bitwise        |
| \vert{}=    | or_eq    | o@a   | integer               | value   | bitwise        |
| ^=          | xor_eq   | o@a   | integer               | value   | bitwise        |
| <<= >>=     |          | o@a   | integer               | value   | bitwise        |
| .           |          | o@m   | struct                | object  | member         |
| []          |          | o[a]  | array*                | object  | member         |
| &           |          | @o    | any*                  | pointer | address        |
| sizeof      |          | @ o   | data object, non-VLA  | size_t  | size, ICE      |
| sizeof      |          | @ o   | VLA                   | size_t  | size           |
| _Alignof    | alignof  | @(o)  | non-function          | size_t  | alignment, ICE |

** Type Operators

| operator | alt-name | form           | type T | operation     |
|----------+----------+----------------+--------+---------------|
| sizeof   |          | sizeof(T)      | any    | size          |
| _Alignof | alignof  | _Alignof(T)    | any    | alignment     |
|          | offsetof | offsetof(T, m) | struct | member offset |

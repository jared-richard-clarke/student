* C ~struct~

~coordinate~ is a variable of type ~struct point~. It is common practice to make a type
synonym so ~struct point~ doesn't need to be typed for every variable declaration.

#+begin_src c
  struct point {
    double x;
    double y;
  } coordinate;

  // === or ===

  typedef struct {
    double x;
    double y;
  } point;

  point coordinate = { 3, 4 };
#+end_src

** Flexible Array Members

*Flexible Array Member* is a feature introduced in the C99 standard that allows structs to contain
a variable-sized array, preferably declared as the last member. The structure must contain at
least one named member in addition to the flexible array. The size of the structure is determined
by the static size of its other members plus the dynamically-allocated memory of the array.

#+begin_src c
  typedef struct Student {
    int id;
    // Convention to store the size of the flexible array.
    int size;
    // Flexible Array Member.
    char name[];
  } Student;

  Student* new_student(Student* student, int id, char name[]) {
    student = malloc(sizeof(*student) + sizeof(char) * strlen(name));

    student->id = id;
    strcpy(student->name, name);

    student->size = (sizeof(*student) + sizeof(char) * strlen(student->name));

    return student;
  }
#+end_src

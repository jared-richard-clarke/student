* File Pointers in ~<stdio.h>~

| source                       | author                             |
|------------------------------+------------------------------------|
| *The C Programming Language* | Brian Kernighan and Dennis Ritchie |

Example implementation of file pointers in the C standard library.

#+begin_src c
  #define NULL     0
  #define EOF      (-1)
  #define BUFSIZ   1024
  // Maximum number of open files.
  #define OPEN_MAX 20

  typedef struct _iobuf {
    int  cnt;   // Characters left.
    char *ptr;  // Next character position.
    char *base; // Location of buffer.
    int  flag;  // Mode of file access.
    int  fd;    // File descriptor.
  } FILE;

  extern FILE _iobuf[OPEN_MAX];

  #define stdin  (&_iob[0])
  #define stdout (&_iob[1])
  #define stderr (&_iob[2])

  enum _flags {
    _READ =  01,  // File open for reading.
    _WRITE = 02,  // File open for writing.
    _UNBUF = 04,  // File is unbuffered.
    _EOF   = 010, // EOF has occurred in this file.
    _ERR   = 020  // Error has occurred in this file.
  }

  int _fillbuf(FILE *);
  int _flushbuf(int, FILE *);

  #define feof(p)   (((p)->flag & _EOF) != 0)
  #define ferror(p) (((p)->flag & _ERR) != 0)
  #define fileno(p) ((p)->fd)

  #define getc(p)    (--(p)->cnt >= 0 ? (unsigned char) *(p)->ptr++ : _fillbuf(p))
  #define putc(x, p) (--(p)->cnt >= 0 ? *(p)->ptr++ = (x) : _flushbuf((x), p))

  #define getchar()  getc(stdin)
  #define putchar(x) putc((x), stdout)
#+end_src

* C: Common Memory Mistakes

** Read-Only String Constants

String literals are character arrays stored in the code segment of the program, which is immutable.
Two string literals may share the same space in memory. Character arrays, however, contain deep copies
of string literals assigned to them, and different arrays represent different memory locations.

#+begin_src c
  char *t1 = "text";
  char *t2 = "text";

  t1 == t2; // True

  char arr1[] = "text";
  char arr2[] = "text";

  arr1 == arr2;         // False
  &arr1[0] == &arr2[0]; // False
#+end_src

** Buffer Overflow / Underflow

C does not perform bounds-checking on array accesses. This can corrupt other variables on the stack
as well as the very implementation of the call stack.

#+begin_src c
  // Not enough memory for 'E' and the null byte.
  char* array = malloc(4);
  strcpy(array, "ABCDE");

  // | 0 | 1 | 2 | 3 |
  // |---+---+---+---|
  // | A | B | C | D | E | \0 |
  // ^---------------^--------^
  //     allocated    unallocated
#+end_src

** Handling Pointers to Out-of-Scope Automatic Variables

Automatic variables are bound to stack memory only as long as they are in scope. After they go out
of scope, the data stored at their memory addresses becomes undefined. Static variables reside
in the data segment, which is safe to access even when those variables are not in scope.

#+begin_src c
  // Result will go out of scope after the function returns.
  int *fn() {
    int result = 42;
    return &result;
  }
#+end_src

** ~sizeof(type *)~ vs. ~sizeof(type)~

#+begin_src c
  typedef struct {
    char name[100];
  } User;

  // Allocated only enough bytes to a pointer, not the struct as intended.
  User *user = (User *) malloc(sizeof (User *));

  // Allocating for the struct.
  User *user = (User *) malloc(sizeof (User));
#+end_src

** Strings Require ~strlen(s)+1~ Bytes

Every string must have null byte after the last actual character. To store the string
~Hi~ it takes 3 bytes: ~{'H', 'i', '\0'}~.

** Failing to Initialize Memory

Automatic stack variables and heap memory obtained with ~malloc~ are not initialized to zero by default.

#+begin_src c
  void fn() {
    char array[10];
    char *p = malloc(10);
    printf("%s %s\n", array, p); // <- undefined behavior
  }
#+end_src

** Double Free

It is an error to free the same heap memory twice.

#+begin_src c
  char *p = malloc(10);
  free(p);
  free(p); // <- undefined behavior
#+end_src

** Dangling Pointers

Accessing freed memory results in undefined behavior. A defensive programming practice is to set
pointers to ~NULL~ as soon as the memory is freed, since their is no other way to reliably check
if a pointer points to a valid address.

#+begin_src c
  char *p = malloc(10);
  strcpy(p, "Hello");
  free(p);
  strcpy(p, "World"); // <- undefined behavior

  // === potential solution ===
  #define safe_free(p) {free(p); (p) = NULL;}
#+end_src

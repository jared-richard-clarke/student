* Basic Memory Management in C

Source: *Systems Encyclopedia*

** Overview

A simplfied C runtime memory model can be broken down into three separate pieces:

- Automatic Allocation :: Consists of locally-initialized variables.
  The memory allocated to these variables are managed by C.

- Dynamic Allocation :: Any memory that the C library explicitly requests via system call.
  Dynamic allocation is needed for programs where the amount of memory needed is unknown
  before the program runs.

- Static and Global Allocation :: Any variable declared with the ~static~ keyword or declared
  globally will exist in a separate memory space. This space is never freed during
  the execution of a program.

** Standard Library

#+begin_src c
  // === stdlib.h ===

  // Given some unsigned integer "size", "malloc" will allocate a contiguous block
  // of "size" bytes and returns a pointer to that allocated block. This block will
  // exist in memory until explicitly deallocated with "free".
  void *malloc(size_t size);

  // "calloc" allocates "size * nmemb" bytes of memory. Unlike "malloc", "calloc" sets
  // each byte of the allocated memory to 0.
  void *calloc(size_t nmemb, size_t size);

  // Given a "ptr" to some piece of allocated memory and an unsigned integer "size",
  // "realloc" will free the memory that "ptr" points to and reallocates a new block
  // of "size" bytes. "realloc" will attempt to preserve the data inside the block
  // that "ptr" points to during reallocation.
  //
  // - If "size" > block, will copy data and leave the rest of memory unset.
  // - If "size" < block, will copy as much as it can and truncates the rest.
  // - If failure, returns NULL. The pointer to the original data will be lost.
  void *realloc(void *ptr, size_t size);

  // Operator that returns the size in bytes of a particular type signature.
  sizeof(int);

  // Given a pointer to a piece of allocated memory, "free" deallocates that memory.
  void free(void *ptr);

  // === string.h ===
  
  // Given two pointers "dest" and "src", "memcpy" will copy "n" bytes from "src" into
  // "dest" and return a pointer to "dest".
  void *memcpy(void *restrict dest, const void *restrict src, size_t n);

  // Performs the same function, but has well-defined behavior for when the memory regions
  // that "src" and "dest" point to overlap.
  void *memmove(void *dest, const void *src, size_t n);

  // Defines a singular value to copy into a block of memory rather than an entire buffer.
  // Given some pointer "s" and a byte value "c", "memset" will set "n" bytes of memory
  // in the block pointed to by "s" to take the value "c".
  void *memset(void *s, int c, size_t n);
#+end_src

** Common Pitfalls

As a general rule, dynamic allocation should mostly be used for pieces of data where the byte
size of data is unknown — like dynamically-sized arrays or variable-length strings — or for
data whose lifespan needs to be preserved outside the scope of the function it is contained
inside.

- memory leaks :: Allocating memory that is *not* or *cannot* be freed.

- double frees :: Occurs when a piece of memory that is already deallocated is deallocated
  again with ~free~. This is undefined behavior, which often results in segmentation faults.

- dangling pointers :: Pointers to pieces of freed data. These pointers should be set to ~NULL~
  to avoid undefined behavior.
  

* Strings in C

*Strings in C*, Systems Encyclopedia

C does not feature an explicit string type. Instead, they are strictly represented as character arrays
terminated with a null byte, ~\0~ or ~NUL~.

*Side Note*: ~NUL~ is the notation for ASCII character code ~\0~. ~NULL~ is a macro defined in
~stddef~ for null pointers.

C strings are a special case of character arrays. Not all character arrays are considered strings,
but any contiguous and null-terminated buffer of characters is guaranteed to behave like a string.

** String Creation

#+begin_src c
  // Set a char pointer to point to a string literal in read-only memory.
  char* text1 = "text";

  // Initialize a char array on the stack using a string literal.
  char text2[5] = "text";

  // Initialize a char array on the stack using an array literal.
  char text3[5] = {'t', 'e', 'x', 't', '\0'};

  // Dynamically allocate memory for a string then write a string
  // literal to that memory.
  char* text4 = malloc(5);
  strcpy(text4, "text");

  // Same as using malloc and strcpy.
  char* text5 = strdup("text");

  //  === string representation in memory ===
  //
  //  | 0 | 1 | 2 | 3 | 4  |
  //  |---+---+---+---+----|
  //  | t | e | x | t | \0 |
#+end_src

** Standard Library Functions

#+begin_src c
  // === string comparison and length ===

  // Compares strings by each ASCII codepoint. Returns 0 if "s1" and "s2" are the same.
  // Returns 1 if "s1" is greater than "s2". Returns -1 if "s1" is less than "s2".
  // Performs case-sensitive, lexicographic comparison.
  int strcmp(const char *s1, const char *s2);

  // Given "s1", "s2", and some integer "n", compares the first "n" bytes of each string.
  int strncmp(const char *s1, const char *s2, size_t n);

  // Counts the number of characters in "s" until it reaches the "NUL" byte.
  int strlen(const char *s);

  // === concatenation ==

  // Concatenates "src" on "dest". Moves "\0" to the end of the newly-formed string.
  char *strcat(char *dest, const char *src);

  // Concatenates the first "n" bytes of "src" onto "dest".
  char *strncat(char *dest, const char *src, size_t n);

  // === searching ===

  // Searches for the first instance of "c" in "s" and returns a pointer to that instance.
  // Returns a null pointer if unsuccessful.
  char *strchr(const char *s, int c);

  // Searches for the last instance of "c" in "s".
  char *strrchr(const char *s, int c);

  // Attempts to find a substring. Returns a null pointer if unsuccessful.
  char *strstr(const char *str, const char *substr);

  // === copying and allocation ===

  // Copies the contents of "src" into "dest", character by character, stopping when
  // it reaches "\0".
  char *strcpy(char *dest, const char *src);

  // Copies the "src" into "dest" but will stop copying when either it has copied "n"
  // bytes or when it reaches a null byte, depending on which comes first.
  char *strncpy(char *dest, const char *src, size_t n);

  // Creates duplicate strings of "s", allocating memory for that duplicate and returning
  // a pointer to the first character.
  char *strdup(const char *s);

  // === tokenization ===

  // Sequences of calls to this function splits "str" into tokens, which are sequences of
  // contiguous characters separated by any of the characters that are part of "delimiters".
  // If a token is found, returns a pointer to the beginning of the token. Otherwise, a null
  // pointer.
  char *strtok(char *str, const char *delimiters);
#+end_src

** Common Pitfalls

- Forgetting the ~NUL~ byte. Strings must be strictly terminated.

- Buffer overflows. Overwriting data that sits adjacent to a string.

- Changing read-only memory. Attempts will cause a segmentation fault.

** General Rules

- Fixed-sized modifiable strings should be initialized directly as arrays instead of pointers.

- Any dynamically-sized modifiable strings should be allocated with ~malloc~.

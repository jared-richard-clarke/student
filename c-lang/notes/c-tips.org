#+title: Tips for C Programming
#+author: Nic Barker

** Sources

| source                   | author     |
|--------------------------+------------|
| *Tips for C Programming* | Nic Barker |

** C Versions

#+begin_src c
  /* === C89 === */
  int main(void) {
      /* The scope of "i" extends beyond the "for" loop */
      int i;
      for (i = 0; i < 10; i++) {
          printf("%d", i);
      }
  }

  // === C99 ===
  int main(void) {
      // The scope of "i" is bound to the "for" loop.
      for (int i = 0; i < 10; i++) {
          printf("%d", i);
      }
  }

  /* === C89 === */
  typedef struct {
      int id;
      int age;
      char* name;
  } User;

  User jane = {
      557,
      34,
      "Jane",
  };

  // === C99 ===
  // Designated Initializers, where named fields
  // can be initialized in any order.
  User jane = {
      .id   = 557,
      .age  = 34,
      .name = "Jane",
  };

  /* === C89 === */
  Point point = { 25, 42 };
  function(point);

  // === C99 ===
  // Compound Literals.
  function((Point) { 25, 42 });
#+end_src

*** C89: x86_64 arch

| name             | type                    |
|------------------+-------------------------|
| ~signed char~    | ~int8~                  |
| ~long int~       | ~int32~ or ~int64~      |
| ~long long~      | ~int64~                 |
| ~unsigned short~ | ~uint16~                |
| ~char~           | maybe ~uint8~ or ~int8~ |

*** C99: ~<stdint.h>~

No matter the compiler or architecture, these macros are guaranteed
to be signed and sized according to their identifier.

| signed    | unsigned   |
|-----------+------------|
| ~int8_t~  | ~uint8_t~  |
| ~int16_t~ | ~uint16_t~ |
| ~int32_t~ | ~uint32_t~ |
| ~int64_t~ | ~uint64_t~ |

** Compiler Flags

- ~-std=c99~ :: Compile for C99.

- ~-Wall~ :: Enable all compiler warnings.

- ~-Werror~ :: Promote all warnings to errors.

- ~-fsanitize=address~ :: Use address sanitization during development to catch
  silent memory corruption.

* Unity Builds

Compile program within a single translation unit to avoid complex interdependencies.

#+begin_example
  === clang main.c file2.c file3.c ===

             +---------+ +---------+
             | file2.h | | file3.h |
             +---------+ +---------+
                  |        |  |
       +-------------------+  |
       |          |           |
  +--------+ +---------+ +---------+
  | main.c | | file2.c | | file3.c |
  +--------+ +---------+ +---------+

  === clang main.c ===

               +---------+
             +-| file2.c |
  +--------+ | +---------+
  | main.c |-+
  +--------+ | +---------+
             +-| file3.c |
               +---------+

 +-------------------------+
 |  // Include everything. |
 |  #include "file2.c"     |
 |  #include "file3.c"     |
 +-------------------------+
#+end_example

** ASAN

- ASAN (Address Sanitizer) :: A compiler program used to catch silent memory-corruption errors.

With every call to ~malloc~ an address sanitizer typically inserts meta-data around the boundaries
of allocated memory. Reads and writes to these boundaries will throw an error.

#+begin_src c
  // +------+-----------+------+
  // | ASAN | int_array | ASAN |
  // +------+-----------+------+
  // ^--+---^           ^--+---^
  //    |                  |
  //    +--------+---------+
  //             |
  // Triggers errors if indexed.

  #include <stdlib.h>

  // Off-by-one errors may or may not trigger a segmentation fault, because
  // "malloc" may or may not allocate more memory than is requested by the
  // caller. A 64-byte call to "malloc" may return a 4 kilobyte page of memory.
  void IterateItems(void) {
      int array_length = 10;
      int* int_array = malloc(sizeof(int) * array_length);
      for (int i = 0; i <= array_length; i++) {
                      // ^ off-by-one error
          int_array[i] = 5;
      }
  }
#+end_src

** Arrays and Strings

Wrap array and string pointers in bounds-checking meta-data.

#+begin_src c
  typedef struct {
      int32_t* items;
      int32_t length;
      int32_t capacity;
  } Int32Array;

  int IntArray_Get(Int32Array array, int32_t index) {
      if (index >= 0 && index < array.length) {
          return array.items[index];
      }
      return 0; // <- Optionally set a debug breakpoint.
  }

  void IterateItems(Int32Array array) {
      for (int32_t i = 0; i < array.length; i++) {
          int32_t item = Int32Array_Get(array, i);
      }
  }

  // If possible, avoid the C convention of terminating strings
  // with '\0'. Unfortunately, all string functions within the
  // standard library depend on this null-terminating behavior.
  // Write your own string functions.
  typedef struct {
      char* chars;
      int32_t length;
  } String;
#+end_src

** Indexes and Pointers

When storing an access to an array, prefer indexes over pointers. Pointer addresses
change with their backing array, and direct pointer access will skip any bounds
checking.

#+begin_example
  === Array 1 ===
  +--------+--------+--------+--------+
  | 0x0000 | 0x0001 | 0x0002 | 0x0003 | <- Pointer Addresses
  +--------+--------+--------+--------+
      0        1        2        3      <- Indexes

  === Array 2 ===
  +--------+--------+--------+--------+
  | 0x0025 | 0x0026 | 0x0027 | 0x0028 | <- Pointer Addresses
  +--------+--------+--------+--------+
      0        1        2        3      <- Indexes
#+end_example

* Rust: ~Option<T>~

** Bottom Values

Bottom value ~null~ is useful but difficult to use safely. If a program uses ~null~ as if it were a not-null value,
an error will be thrown. Rust provides ~Option<T>~ â€” an enum that encodes a value that is either present or absent.

#+begin_src rust
  // as defined in the standard library
  enum Option<T> {
      None,
      Some(T),
  }
#+end_src

** ~unwrap~

Returns the contained ~Some~ value, consuming the ~self~ value.
Panics otherwise.

#+begin_src rust
  impl<T> Option<T> {
      fn unwrap(self) -> T {
          match self {
              Some(t) => t,
              None => panic("called 'Option::unwrap()' on a 'None' value"),
          }
      }
  }
#+end_src

** ~unwrap_or~

Returns the contained ~Some~ value or a provided default.

#+begin_src rust
  impl<T> Option<T> {
      fn unwrap_or(self, default: T) -> T {
          match self {
              Some(t) => t,
              None => default
          }
      }
  }
#+end_src

** ~unwrap_or_else~ ( simplified )

#+begin_src rust
  impl<T> Option<T> {
      pub fn unwrap_or_else<F>(self, f: F) -> T
      where
          F: FnOnce() -> T
      {
          match self {
              Some(x) => x,
              None => f(),
          }
      }
  }
#+end_src

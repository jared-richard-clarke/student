* Computer Systems: The Rust Programming Language

** Sources

| source                                                  | author      |
|---------------------------------------------------------+-------------|
| *Mozilla Colloquium on Computer Systems Seminar Series* | Aaron Turon |

** Ownership and Borrowing

1. All resources have a clear owner.

2. Others can borrow from the owner.

3. Owner cannot free or mutate the resource while it is borrowed.

** Ownership / Borrowing Solution

- No need for a runtime -> C++

- Memory Safety -> garbage collection

- Data-race freedom -> No guaranteed solution

** More to Rust than Safety

- Explicit control is often correlated with painfully verbose syntax.

- Rust offers lots of conveniences traditionally associated with garbage-collected runtimes: closures,
  pattern matching, type inference, and traits.

** Aliasing + Mutation

*** Ownership (T)

- Forbids aliasing.

- Only one variable can own data at a time.

*** Shared Borrow (&T)

- Forbids mutation. (* mutation only in controlled situations)

- Allows simultaneous access to shared data.

*** Mutable Borrow (&mut T)

- Forbids aliasing, allows mutation.

- Only one code block can borrow and mutate data at a time. This prevents data races.

- A `&mut T` is the only way to access the memory it points at ...

** Data Race = Aliasing + Mutation + No Ordering ( no synchronization )

- Two unsynchronized threads accessing the same data where at least one writes.

*** Solutions for Safe Concurrency

- Actor Model :: Forbids aliasing. Pass owned values between actors. ( Erlang )

- Functional Model :: Forbids mutation. ( Haskell )

- Rust Model :: Forbids both from occurring simultaneously.

  - Messaging( actor model ): Ownership is passed between threads.

  - Shared, read-only access( functional model ): Ownership and borrowing.
    Passing data to a bunch of threads so they can read from it.

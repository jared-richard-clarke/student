* Rust: Primitives and Composite Types

** Sources

| source                                      | author        |
|---------------------------------------------+---------------|
| *The Rust Standard Library*, version 1.80.0 | rust-lang.org |
| *The Rustonomicon*                          | rust-lang.org |
| *The Rust Reference*,  version 1.80.0       | rust-lang.org |

** Overview

- primitive types:
  - boolean: ~bool~
  - numeric: integer and float
  - textual: ~char~ and ~str~
  - never: ~!~

- sequence types:
  - tuple
  - array
  - slice

- user-defined types:
  - struct
  - enum
  - union

- function types
  - functions
  - closures

- pointer types:
  - references
  - raw pointers
  - function pointers

- trait types:
  - trait objects
  - impl trait

** Primitive Types

#+begin_quote
"Primitives are usually aligned to their size, although this is platform-specific behavior."

— Rustonomicon
#+end_quote

- ~array~ :: A fixed-size array, denoted ~[T; N]~, for the element type ~T~, and the
  non-negative compile-time constant size, ~N~.
  
- ~bool~ :: The boolean type.
  
- ~char~ :: A Unicode scalar value, which is any Unicode code point other than a surrogate
  code point. Always four bytes in size.
  
- ~f16~ :: A 16-bit floating point type (specifically, the *binary16* type defined in IEEE 754-2008).

- ~f32~ :: A 32-bit floating point type (specifically, the *binary32* type defined in IEEE 754-2008).

- ~f64~ :: A 64-bit floating point type (specifically, the *binary64* type defined in IEEE 754-2008).

- ~f128~ :: A 128-bit floating point type (specifically, the *binary128* type defined in IEEE 754-2008).
  
- ~fn~ :: Function pointers, like ~fn(usize) -> bool~.
  
- ~i8~ :: The 8-bit signed integer type.
  
- ~i16~ :: The 16-bit signed integer type.
  
- ~i32~ :: The 32-bit signed integer type.
  
- ~i64~ :: The 64-bit signed integer type.
  
- ~i128~ :: The 128-bit signed integer type.
  
- ~isize~ :: The pointer-sized signed integer type.
  
- ~pointer~ :: Raw, unsafe pointers, ~*const T~, and ~*mut T~.
  
- ~reference~ :: References, ~&T~ and ~&mut T~. A pointer that is assumed to be aligned, not
  null, and pointing to memory containing a valid value of ~T~. Enforces borrowing rules.
  
- ~slice~ :: A dynamically-sized view into a contiguous sequence, ~[T]~. Contiguous here
  means that elements are laid out so that every element is the same distance from its
  neighbors.
  
- ~str~ :: String slices.
  
- ~tuple~ :: A finite heterogeneous sequence, ~(T, U, ..)~.
  
- ~u8~ :: The 8-bit unsigned integer type.
  
- ~u16~ :: The 16-bit unsigned integer type.
  
- ~u32~ :: The 32-bit unsigned integer type.
  
- ~u64~ :: The 64-bit unsigned integer type.
  
- ~u128~ :: The 128-bit unsigned integer type.
  
- ~unit~ :: The ~()~ type, also called *unit*.
  
- ~usize~ :: The pointer-sized unsigned integer type.

- ~never~ :: The ~!~ type. Also called *never*. Represents computations that never resolve
  to any value. ~!~ can be coerced into any other type.

** Composite and Custom Types

#+begin_quote
"By default, composite structures have an alignment equal to the maximum of their field alignments.
Rust will ... insert padding where necessary to ensure that all fields are properly aligned and that
the overall type's size is a multiple of its alignment."

— Rustonomicon
#+end_quote

Although data is stored within these types directly, their layout — with the exception of arrays —
is unspecified. This omission allows the Rust compiler to reorder and realign data for improved
efficiency.

- ~struct~ :: Named product type.

- ~tuple~ :: Unnamed product type.

- ~array~ :: Homogeneous product type.

- ~enum~ :: Named sum type or tagged union. An *enum* is *field-less* if none of its variants have
  associated data.

- ~union~ :: Untagged union.

** Dynamically Sized Types

- Dynamically Sized Type (DST) :: Types without a statically known size or alignment. These types
  can only exist behind a pointer — usually a wide pointer consisting of a pointer paired with
  some extra data.

- trait object :: Referred to as ~dyn Trait~, a trait object points to both an instance of a type
  implementing a specified trait and a table used to look up trait methods on that type at runtime.
  Must always be placed behind a pointer: ~&dyn Trait~, ~Box<dyn Trait>~, ~Rc<dyn Trait>~, etc.

- slice :: A view into a contiguous block of memory represented as a pointer and a length.

** Zero Sized Types

A *Zero Sized Type (ZST)* is a Rust type that occupies no space. ~Set<Key>~ is a wrapper around
~Map<Key, ()>~. Calling the generic type ~Map<Key, Value>~ with the unit type for ~Value~ allows
Rust to compile a hashset without the overhead of loading and discarding unused space for ~Value~.

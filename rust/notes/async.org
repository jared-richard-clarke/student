* Async Await in Rust

** Sources

| source                                  | author         |
|-----------------------------------------+----------------|
| *Understanding Async Await in Rust*     | eventhelix.com |
| *Rust Standard Library*, version 1.80.1 | rust-lang.org  |
| *Asynchronous Programming in Rust*      | rust-lang.org  |
| *Tokio Tutorial*                        | tokio.rs       |

** Future Trait

#+begin_quote
  "Unlike how futures are implemented in other languages, a Rust future does not represent
   a computation happening in the background, rather the Rust future is the computation itself.
   The owner of the future is responsible for advancing the computation by polling the future.
   This is done by calling ~Future::poll~."

  — *Tokio Tutorial*, tokio.rs
#+end_quote

#+begin_src rust
  // "The core method of future, poll, attempts to resolve the future into a final value.
  //  This method does not block if the value is not ready. Instead, the current task is
  //  scheduled to be woken up when it's possible to make further progress by polling again.
  //  The context passed to the poll method can provide a Waker, which is a handle for
  //  waking up the current task.
  //
  //  When using a future, you generally won’t call poll directly, but instead
  //  .await the value."
  //
  // — The Rust Standard Library

  pub trait Future {
      type Output;

      // Required method
      fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output>;
  }
#+end_src

The return value of an ~async fn~ is an anonymous type that implements the ~Future~ trait.
These types must be driven by a runtime. A runtime typically contains a task scheduler,
an I/O event loop, and timers amongst other things.

#+begin_quote
  "Async functions are called like any other Rust function. However, calling these functions
   does not result in the function body executing. Instead, calling an ~async fn~ returns
   a value representing the operation. This is conceptually analogous to a zero-argument
   closure. To actually run the operation, you should use the ~.await~ operator on the
   return value."

  — *Tokio Tutorial*, tokio.rs
#+end_quote

** Futures and Async: Single Threaded

#+begin_src rust
  #[derive(Default)]
  struct Unit {
      // The 1-D position of the unit. In a real game, it would be 2D or 3D.
      pub pos: i32,
  }
  type UnitRef = Rc<RefCell<Unit>>;

  // A future that will move the unit towards "target_pos" at each step,
  // and complete when the unit has reached that position.
  struct UnitGotoFuture {
      unit: UnitRef,
      target_pos: i32,
  }
  impl Future for UnitGotoFuture {
      type Output = ();
      fn poll(self: Pin<&mut Self>, _cx: &mut Context) -> Poll<Self::Output> {
          let unit_pos = self.unit.borrow().pos;
          if unit_pos == self.target_pos {
              Poll::Ready(())
          } else {
              self.unit.borrow_mut().pos += (self.target_pos - unit_pos).signum();
              Poll::Pending
          }
      }
  }

  // Helper async function to write unit behavior.
  async fn goto(unit: UnitRef, pos: i32) {
      UnitGotoFuture {
          unit,
          target_pos: pos,
      }
      .await;
  }
#+end_src

** Async Desugared

Rust futures are state machines. Below ~GotoFuture~ is represented as an ~enum~ of the
future's possible states. When ~poll~ is invoked by a runtime, the future attempts to
advance its internal state as much as possible. If the future is able to complete,
~Poll::Ready~ is returned to the runtime with the output of its computation. Otherwise,
~Poll::Pending~ is returned, which tells the runtime to call ~poll~ again on this
future at a later time.

Futures can compose other futures. Calling ~poll~ on an outer future might call an inner
future's ~poll~ function.

#+begin_src rust
  // The state machine enum defines three states for the "goto" function:
  // 1. Start: The initial state, where the function is called with the unit and target position.
  // 2. Waiting: The state where the function is waiting for the "UnitGotoFuture" to complete.
  // 3. Done: The final state, where the function has been completed.

  #[repr(u8)]
  enum GotoFuture {
      // Initial state
      Start(UnitRef, i32) = 0,
      // Waiting for UnitGotoFuture to complete
      Waiting(UnitGotoFuture) = 3,
      // Final state
      Done = 1,
  }

  impl Future for GotoFuture {
      type Output = ();

      // The "Future's" poll method will be called by the async executor to check if the future
      // is ready and if the execution can continue.
      fn poll(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {
          // The loop is used to transition between states
          loop {
              match &mut *self {
                  // Start (0): In the start state, create a "UnitGotoFuture" and move to the waiting state.
                  GotoFuture::Start(unit, pos) => {
                      let fut = UnitGotoFuture { unit: unit.clone(), target_pos: *pos };
                      *self = GotoFuture::Waiting(fut);
                  }
                  // Waiting (3): In the waiting state, poll the "UnitGotoFuture"
                  // and move to the done state if it's ready.
                  GotoFuture::Waiting(ref mut fut) => {
                      match Pin::new(fut).poll(cx) {
                          Poll::Ready(()) => *self = GotoFuture::Done,
                          Poll::Pending => return Poll::Pending,
                      }
                  }
                  // Done (1): In the done state, return ready.
                  GotoFuture::Done => return Poll::Ready(()),
              }
          }
      }
  }

  // The original async function is equivalent to creating a new
  // "GotoFuture" instance in the start state.
  fn goto(unit: UnitRef, pos: i32) -> impl Future<Output = ()> {
      GotoFuture::Start(unit, pos)
  }
#+end_src

** The State Machine

#+begin_example
                      +--------------------------------------------+
                      | Start(0)                                   |
                      |--------------------------------------------|
                      | Invoked, but has not hit an "await" point. |
                      +--------------------------------------------+
                         /                                      |
                        / "await"                               |
                       /                                        |
                      V                                         |
  +------------------------------------------+                  |
  | Waiting(3)                               |--+               |
  |------------------------------------------|  | unresolved    | resolved
  | UnitGotoFuture{ unit, target_pos }.await |<-+               |
  +------------------------------------------+                  |
                       \                                        |
                        \ resolved                              |
                         \                                      |
                          V                                     V
                      +--------------------------------------------+
                      | Done(1)                                    |
                      |--------------------------------------------|
                      | The future is resolved as "unit" has       |
                      | reached "target_pos".                      |
                      +--------------------------------------------+
#+end_example

** The Executor

#+begin_example
  +----------+                  +-------------+
  | executor |                  | goto_future |
  +----------+                  +-------------+
       |                               |
       |                    +----------------------+
       |                    | env.state = Start(0) |
       |                    +----------------------+
       |                               |
       | -- 1. poll(env, context) --> +-+
       |                              | |
       |                         +------------+
       |                         | resolved?  |
       |                         +------------+
       |                              | |
       |                         +------------+
       |                         | unresolved |
       |                         +------------+
       |                              | |
       |                    +------------------------+
       |                    | env.state = Waiting(3) |
       |                    +------------------------+
       |                              | |
       | <- 2. return Poll::Pending - +-+
       |                               |
       |                               |
       | -- 3. poll(env, context) --> +-+
       |                              | |
       |                         +------------+
       |                         | resolved?  |
       |                         +------------+
       |                              | |
       |                         +------------+
       |                         | resolved   |
       |                         +------------+
       |                              | |
       |                     +---------------------+
       |                     | env.state = Done(1) |
       |                     +---------------------+
       |                              | |
       | <- 4. return Poll::Ready --- +-+
       |                               |
       V                               V
  +----------+                  +-------------+
  | executor |                  | goto_future |
  +----------+                  +-------------+
#+end_example

** Implementing Future: Extended Example

#+begin_src rust
  // === library ===
  
  use std::{
      future::Future,
      pin::Pin,
      sync::{Arc, Mutex},
      task::{Context, Poll, Waker},
      thread,
      time::Duration,
  };

  pub struct TimerFuture {
      shared_state: Arc<Mutex<SharedState>>,
  }

  // Shared state between the future and the waiting thread
  struct SharedState {
      // Whether or not the sleep time has elapsed
      completed: bool,

      // The waker for the task that `TimerFuture` is running on.
      // The thread can use this after setting `completed = true` to tell
      // `TimerFuture`'s task to wake up, see that `completed = true`, and
      // move forward.
      waker: Option<Waker>,
  }

  impl Future for TimerFuture {
      type Output = ();
      fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {
          // Look at the shared state to see if the timer has already completed.
          let mut shared_state = self.shared_state.lock().unwrap();
          if shared_state.completed {
              Poll::Ready(())
          } else {
              // Set waker so that the thread can wake up the current task
              // when the timer has completed, ensuring that the future is polled
              // again and sees that `completed = true`.
              //
              // It's tempting to do this once rather than repeatedly cloning
              // the waker each time. However, the `TimerFuture` can move between
              // tasks on the executor, which could cause a stale waker pointing
              // to the wrong task, preventing `TimerFuture` from waking up
              // correctly.
              //
              // N.B. it's possible to check for this using the `Waker::will_wake`
              // function, but we omit that here to keep things simple.
              shared_state.waker = Some(cx.waker().clone());
              Poll::Pending
          }
      }
  }

  impl TimerFuture {
      /// Create a new `TimerFuture` which will complete after the provided
      /// timeout.
      pub fn new(duration: Duration) -> Self {
          let shared_state = Arc::new(Mutex::new(SharedState {
              completed: false,
              waker: None,
          }));

          // Spawn the new thread
          let thread_shared_state = shared_state.clone();
          thread::spawn(move || {
              thread::sleep(duration);
              let mut shared_state = thread_shared_state.lock().unwrap();
              // Signal that the timer has completed and wake up the last
              // task on which the future was polled, if one exists.
              shared_state.completed = true;
              if let Some(waker) = shared_state.waker.take() {
                  waker.wake()
              }
          });

          TimerFuture { shared_state }
      }
  }

  // === main ===
  
  use futures::{
      future::{BoxFuture, FutureExt},
      task::{waker_ref, ArcWake},
  };
  use std::{
      future::Future,
      sync::mpsc::{sync_channel, Receiver, SyncSender},
      sync::{Arc, Mutex},
      task::Context,
      time::Duration,
  };
  // The timer we wrote in the previous section:
  use timer_future::TimerFuture;

  fn main() {
      let (executor, spawner) = new_executor_and_spawner();

      // Spawn a task to print before and after waiting on a timer.
      spawner.spawn(async {
          println!("howdy!");
          // Wait for our timer future to complete after two seconds.
          TimerFuture::new(Duration::new(2, 0)).await;
          println!("done!");
      });

      // Drop the spawner so that our executor knows it is finished and won't
      // receive more incoming tasks to run.
      drop(spawner);

      // Run the executor until the task queue is empty.
      // This will print "howdy!", pause, and then print "done!".
      executor.run();
  }

  // Task executor that receives tasks off of a channel and runs them.
  struct Executor {
      ready_queue: Receiver<Arc<Task>>,
  }

  // `Spawner` spawns new futures onto the task channel.
  #[derive(Clone)]
  struct Spawner {
      task_sender: SyncSender<Arc<Task>>,
  }

  // A future that can reschedule itself to be polled by an `Executor`.
  struct Task {
      // In-progress future that should be pushed to completion.
      //
      // The `Mutex` is not necessary for correctness, since we only have
      // one thread executing tasks at once. However, Rust isn't smart
      // enough to know that `future` is only mutated from one thread,
      // so we need to use the `Mutex` to prove thread-safety. A production
      // executor would not need this, and could use `UnsafeCell` instead.
      future: Mutex<Option<BoxFuture<'static, ()>>>,

      // Handle to place the task itself back onto the task queue.
      task_sender: SyncSender<Arc<Task>>,
  }

  fn new_executor_and_spawner() -> (Executor, Spawner) {
      // Maximum number of tasks to allow queueing in the channel at once.
      // This is just to make `sync_channel` happy, and wouldn't be present in
      // a real executor.
      const MAX_QUEUED_TASKS: usize = 10_000;
      let (task_sender, ready_queue) = sync_channel(MAX_QUEUED_TASKS);
      (Executor { ready_queue }, Spawner { task_sender })
  }

  impl Spawner {
      fn spawn(&self, future: impl Future<Output = ()> + 'static + Send) {
          let future = future.boxed();
          let task = Arc::new(Task {
              future: Mutex::new(Some(future)),
              task_sender: self.task_sender.clone(),
          });
          self.task_sender.try_send(task).expect("too many tasks queued");
      }
  }

  impl ArcWake for Task {
      fn wake_by_ref(arc_self: &Arc<Self>) {
          // Implement `wake` by sending this task back onto the task channel
          // so that it will be polled again by the executor.
          let cloned = arc_self.clone();
          arc_self
              .task_sender
              .try_send(cloned)
              .expect("too many tasks queued");
      }
  }

  impl Executor {
      fn run(&self) {
          while let Ok(task) = self.ready_queue.recv() {
              // Take the future, and if it has not yet completed (is still Some),
              // poll it in an attempt to complete it.
              let mut future_slot = task.future.lock().unwrap();
              if let Some(mut future) = future_slot.take() {
                  // Create a `LocalWaker` from the task itself
                  let waker = waker_ref(&task);
                  let context = &mut Context::from_waker(&waker);
                  // `BoxFuture<T>` is a type alias for
                  // `Pin<Box<dyn Future<Output = T> + Send + 'static>>`.
                  // We can get a `Pin<&mut dyn Future + Send + 'static>`
                  // from it by calling the `Pin::as_mut` method.
                  if future.as_mut().poll(context).is_pending() {
                      // We're not done processing the future, so put it
                      // back in its task to be run again in the future.
                      *future_slot = Some(future);
                  }
              }
          }
      }
  }
#+end_src

* Rust Ownership and Borrowing

** Sources

| source                          | author                          |
|---------------------------------+---------------------------------|
| *The Rust Programming Language* | Steve Klabnik and Carol Nichols |

** Ownership Rules

- Each value in Rust has a variable that's called its *owner*.

- There can only be one owner at a time.

- When the owner goes out of scope, the value will be dropped.

** Borrow Checker

References provide the ability to read and write data without consuming ownership of it. 
References are created with borrows (~&~ and ~&mut~) and used with dereferences (~*~), often implicitly.

Rust's borrow checker enforces a system of permissions that ensures references are used safely:

- All variables can read, own, and (optionally) write their data.

- Creating a reference will transfer permissions from the borrowed path to the reference.

- Permissions are returned once the reference's lifetime has ended.

- Data must outlive all references that point to it.


The core idea behind the borrow checker is that variables have three kinds of permissions on their data.

- *Read( R )*: data can be copied to another location.

- *Write( W )*: data can be mutated in place.

- *Own( O )*: data can be owned or dropped.

By default a variable has *RO* permissions. *RWO* if prefaced by ~let mut~.
References can temporarily remove these permissions to prevent undefined behavior.

** Paths

Permissions are defined on paths and not just variables. A path is anything you
can put on the left-hand side of an assignment. Paths include:

- Variables, like ~a~.

- Dereferences of paths, like ~*a~.

- Array accesses of paths, like ~a[0]~.

- Fields of paths, like ~a.0~ for tuples or ~a.field~ for structs.

- Any combination of the above, like ~*((*a)[0].1)~.

** Reference Types

- *immutable references ( shared references )*: Permit aliasing but disallow mutation.

- *mutable references ( unique references )*: Temporarily provide mutable access to data without moving it â€”
  one alias at a time.

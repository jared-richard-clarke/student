* Rust: Ownership and Borrowing

** Sources

| source                                                  | author                          |
|---------------------------------------------------------+---------------------------------|
| *The Rust Programming Language*                         | Steve Klabnik and Carol Nichols |
| *The Rustonomicon*                                      | rust-lang.org                   |
| *Mozilla Colloquium on Computer Systems Seminar Series* | Aaron Turon                     |

** Ownership Rules

- Each value in Rust has a variable that's called its *owner*.

- There can only be one owner at a time.

- Ownership can be transferred by moves, which happen on assignment and function calls.

- When the owner goes out of scope, the value will be dropped.

** Aliasing + Mutation

*** Ownership (T)

- Forbids aliasing.

- Only one variable can own data at a time.

*** Shared Borrow (&T)

- Forbids mutation. (* mutation only in controlled situations)

- Allows simultaneous access to shared data.

*** Mutable Borrow (&mut T)

- Forbids aliasing, allows mutation.

- Only one code block can borrow and mutate data at a time. This prevents data races.

- A ~&mut T~ is the only way to access its memory.

** Borrow Checker

References provide the ability to read and write data without consuming ownership of it. 
References are created with borrows (~&~ and ~&mut~) and used with dereferences (~*~), often implicitly.

Rust's borrow checker enforces a system of permissions that ensures references are used safely:

- All variables can read, own, and (optionally) write their data.

- Creating a reference will transfer permissions from the borrowed path to the reference.

- Permissions are returned once the reference's lifetime has ended.

- Data must outlive all references that point to it.


The core idea behind the borrow checker is that variables have three kinds of permissions on their data.

- *Read( R )*: data can be copied to another location.

- *Write( W )*: data can be mutated in place.

- *Own( O )*: data can be owned or dropped.

By default a variable has *RO* permissions. *RWO* if prefaced by ~let mut~.
References can temporarily remove these permissions to prevent undefined behavior.

** Paths

Permissions are defined on paths and not just variables. A path is anything you
can put on the left-hand side of an assignment. Paths include:

- Variables, like ~a~.

- Dereferences of paths, like ~*a~.

- Array accesses of paths, like ~a[0]~.

- Fields of paths, like ~a.0~ for tuples or ~a.field~ for structs.

- Any combination of the above, like ~*((*a)[0].1)~.

** Lifetimes

Rust enforces permissions through lifetimes â€” regions of code through which a reference must remain
valid. Permissions are restored to the referent at the end of a reference's lifetime.
Scope dictates lifetime.

#+begin_src rust
  let x = 7;
  let y = &x;
  let z = &y;

  // === Lifetimes as Dictated by Scope ===

  'a: {
      let x: i32 = 7;
      'b: {
          let y: &'b i32 = &'b x;
          'c: {
              let z: &'c &'b i32 = &'c y;
          }
      }
  }

  // === Reference that Outlives Referent ===
  //
  // Reference "&s" must outlive scope 'a, but its referent "s" is within scope 'b.
  // The reference outlives its referent, creating potentially undefined behavior.

  fn as_str(data: &u32) -> &str {
      let s = format!("{}", data);
      &s
  }

  // - Desugars ->

  fn as_str<'a>(data: &'a u32) -> &'a str {
      'b: {
          let s = format!("{}", data);
          return &'a s;
      }
  }
#+end_src

** Data Race = Aliasing + Mutation + No Ordering ( no synchronization )

- Two unsynchronized threads accessing the same data where at least one writes.

*** Solutions for Safe Concurrency

- Actor Model :: Forbids aliasing. Pass owned values between actors. ( Erlang )

- Functional Model :: Forbids mutation. ( Haskell )

- Rust Model :: Forbids both from occurring simultaneously.

  - Messaging( actor model ): Ownership is passed between threads.

  - Shared, read-only access( functional model ): Ownership and borrowing.
    Passing data to a bunch of threads so they can read from it.

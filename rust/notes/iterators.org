* Rust Iterators

** Sources

| source                                      | author        |
|---------------------------------------------+---------------|
| *The Rust Standard Library*, version 1.80.1 | rust-lang.org |
| *Why Async Rust?*                           | srrrse        |

** Iterator Core

- iterator :: A stateful cursor into a collection, built via a series of combinators.

#+begin_quote
  "External iterators integrated perfectly with Rust's ownership and borrowing
   system because they essentially compile to a struct which holds the state of
   iteration inside of itself, and which can therefore contain references to
   data structures being iterated over just like any other struct. And thanks
   to monomorphization, a complex iterator built by assembling multiple
   combinators also compiled into a single struct, making it transparent to the
   optimizer. The only problem was that they were harder to write by hand,
   because you need to define the state machine that will be used for iteration...

   This pattern of building single-object state machines out of smaller components,
   whether applied to iterators or futures, is a key part of how Rust works.
   It falls out of the language almost naturally."

   — *Why Async Rust*, srrrs
#+end_quote

#+begin_src rust
  trait Iterator {
      // The type of the elements being iterated over.
      type Item;
      // Advances the iterator and returns the next value.
      fn next(&mut self) -> Option<Self::Item>;
  }
#+end_src

An iterator has a method, ~next~, which when called, returns an ~Option<Item>~.
Calling ~next~ will return ~Some(Item)~ as long as there are elements, and once
they’ve all been exhausted, will return ~None~ to indicate that iteration is finished.

~Iterator~'s full definition includes a number of provided methods — 75 as of Rust 1.80.1 —
that are defined in terms of ~next~. These methods are provided automatically to any data
type that implements ~next~ as part of the ~Iterator~ trait.

** Three Forms of Iteration

1. ~iter()~, which iterates over ~&T~. ( immutable borrow )
2. ~iter_mut()~, which iterates over ~&mut T~. ( mutable borrow )
3. ~into_iter()~, which iterates over ~T~. ( owned data )

** Implementing an Iterator

Creating an iterator involves two steps: creating a ~struct~ to hold the iterator’s state, 
and then implementing the ~next~ method of the ~Iterator~ trait for that ~struct~.
There is a corresponding ~struct~ for each iterator and iterator adapter in the
~std::iter~ module.

#+begin_src rust
  use std::iter::Iterator;

  struct Counter {
      count: usize,
  }

  impl Counter {
      fn new() -> Counter {
          Counter { count: 0 }
      }
  }

  impl Iterator for Counter {
      type Item = usize;

      fn next(&mut self) -> Option<Self::Item> {
          if self.count <= 3 {
              self.count += 1;
              Some(self.count)
          } else {
              None
          }
      }
  }

  let mut counter = Counter::new();

  assert_eq!(counter.next(), Some(1));
  assert_eq!(counter.next(), Some(2));
  assert_eq!(counter.next(), Some(3));
  assert_eq!(counter.next(), None);

  let sum: usize = Counter::new()
      .zip(Counter::new().skip(1))
      .map(|(a, b)| a * b)
      .filter(|x| x % 3 == 0)
      .sum();

  assert_eq!(18, sum);
#+end_src

** The ~for~ Loop Syntax and ~IntoIterator~

Rust's ~for~ loop is syntactic sugar for producing and using iterators. In order to use this
syntax, a data structure must either be an iterator or a collection that implements the
~IntoIterator~ trait.

#+begin_src rust
  // === Vec: implements "IntoIterator" ===

  let values = vec![1, 2, 3, 4, 5, 6, 7];

  for x in values {
      println!("{x}");
  }

  // - compiles into ->

  let values = vec![1, 2, 3, 4, 5, 6, 7];
  {
      let result = match IntoIterator::into_iter(values) {
          mut iter => loop {
              let next;
              match iter.next() {
                  Some(val) => next = val,
                  None => break,
              };
              let x = next;
              let () = { println!("{x}"); };
          },
      };
      result
  }

  // === Counter: implements "Iterator" ===

    let mut sum = 0;
    for count in Counter::new() {
        sum += count;
    }
    assert_eq!(sum, 10);

    // - equivalent ->

    let sum: usize = Counter::new().sum();
    assert_eq!(sum, 10);
#+end_src

The standard library implements the ~IntoIterator~ trait for all implementations of ~Iterator~.
This means two things:

1. Any ~Iterator~ can be used in a ~for~ loop.

2. Any collection that implements ~IntoIterator~ can be used in a ~for~ loop.

#+begin_src rust
  trait IntoIterator {
      type Item;
      type IntoIter: Iterator<Item = Self::Item>;

      fn into_iter(self) -> Self::IntoIter;
  }

  impl<I: Iterator> IntoIterator for I {
      type Item = I::Item;
      type IntoIter = I;

      fn into_iter(self) -> I {
          self
      }
  }
#+end_src

To iterate over a collection without consuming it, many collections offer methods that
provide iterators over references, conventionally called ~iter()~ and ~iter_mut()~.

A collection ~X~ that provides ~into_iter()~ might also implement ~IntoIterator~ for ~&X~,
where ~into_iter()~ delegates to ~iter()~. It might also implement ~IntoIterator~ for ~&mut X~,
where ~into_iter~ delegates to ~iter_mut()~.

#+begin_src rust
  let values = vec![1, 2, 3];
  for x in &values { // - equivalent -> "values.iter()"
      println!("{x}");
  }

  let mut values = vec![1, 2, 3];
  for x in &mut values { // - equivalent -> "values.iter_mut()"
      *x += 1;
  }
#+end_src

** Adapters

Functions which take an ~Iterator~ and return another ~Iterator~, such as ~map~, ~take~,
and ~filter~. Each adapter transforms the output of ~next~.

#+begin_src rust
  let mut counter = Counter::new().map(|x| x * 2);

  assert_eq!(counter.next(), Some(2));
  assert_eq!(counter.next(), Some(4));
  assert_eq!(counter.next(), Some(6));
  assert_eq!(counter.next(), None);

  let mut counter = Count::new().map(|x| x * 2).filter(|x| x < 6);

  assert_eq!(counter.next(), Some(2));
  assert_eq!(counter.next(), Some(4));
  assert_eq!(counter.next(), None);
#+end_src

*** Map Adapter

An iterator that calls a given closure on each element of the underlying iterator.

#+begin_src rust
  // The "map" method as provided by the "Iterator" trait.
  fn map<B, F>(self, f: F) -> Map<Self, F>
  where
      Self: Sized,
      F: FnMut(Self::Item) -> B,
  {
      Map::new(self, f)
  }

  // "Map" struct as created by the "map" method.
  struct Map<I, F> {
      iter: I,
      f: F,
  }

  impl<I, F> Map<I, F> {
      fn new(iter: I, f: F) -> Map<I, F> {
          Map { iter, f }
      }
    }
  }

  impl<B, I: Iterator, F> Iterator for Map<I, F>
  where
      F: FnMut(I::Item) -> B,
  {
      type Item = B;

      fn next(&mut self) -> Option<B> {
          // "map" as implemented for "Option". If "Some(x)" then return "Some(f(x))".
          // Otherwise return "None".
          self.iter.next().map(&mut self.f)
      }
  }
#+end_src

*** Take Adapter

An iterator that yields the first ~n~ elements, or fewer if the underlying iterator ends sooner.

#+begin_src rust
  // The "take" method as provided by the "Iterator" trait.
  fn take(self, n: usize) -> Take<Self>
  where
      Self: Sized,
  {
      Take::new(self, n)
  }

  // The "Take" struct as created by the "take" method.
  struct Take<I> {
      iter: I,
      n: usize,
  }

  impl<I> Take<I> {
      fn new(iter: I, n: usize) -> Take<I> {
          Take { iter, n }
      }
  }

  impl<I> Iterator for Take<I>
  where
      I: Iterator,
  {
      type Item = <I as Iterator>::Item;

      fn next(&mut self) -> Option<<I as Iterator>::Item> {
          if self.n != 0 {
              self.n -= 1;
              self.iter.next()
          } else {
              None
          }
      }
  }
#+end_src

*** Filter Adapter

An iterator which uses a closure to determine if an element of the underlying iterator should be yielded.

#+begin_src rust
  // The "filter" method as provided by the "Iterator" trait.
  fn filter<P>(self, predicate: P) -> Filter<Self, P>
  where
      Self: Sized,
      P: FnMut(&Self::Item) -> bool,
  {
      Filter::new(self, predicate)
  }

  // The "Filter" struct as created by the "filter" method.
  struct Filter<I, P> {
      iter: I,
      predicate: P,
  }
  
  impl<I, P> Filter<I, P> {
      fn new(iter: I, predicate: P) -> Filter<I, P> {
          Filter { iter, predicate }
      }
  }

  impl<I: Iterator, P> Iterator for Filter<I, P>
  where
      P: FnMut(&I::Item) -> bool,
  {
      type Item = I::Item;

      fn next(&mut self) -> Option<I::Item> {
          self.iter.find(&mut self.predicate)
      }
  }

  // Method provided by the "Iterator" trait.
  // "find" searches for an element of an iterator that satisfies the given predicate.
  // Method is short-circuiting, ceasing iteration once predicate returns "true".
  fn find<P>(&mut self, predicate: P) -> Option<Self::Item>
  where
      Self: Sized,
      P: FnMut(&Self::Item) -> bool,
  {
      fn check<T>(mut predicate: impl FnMut(&T) -> bool) -> impl FnMut((), T) -> ControlFlow<T> {
          move |(), x| {
              if predicate(&x) { ControlFlow::Break(x) } else { ControlFlow::Continue(()) }
          }
      }

      // "break_value()" converts the "ControlFlow" enum into an "Option" enum,
      // which is "Some" if the "ControlFlow" was "Break" and "None" otherwise.
      self.try_fold((), check(predicate)).break_value()
  }

  // Method provided by the "Iterator" trait.
  // "try_fold" is similar to "fold" but short-circuits, propagating errors back to the caller.
  fn try_fold<B, F, R>(&mut self, init: B, mut f: F) -> R
  where
      Self: Sized,
      F: FnMut(B, Self::Item) -> R,
      R: Try<Output = B>,
  {
      let mut accum = init;
      while let Some(x) = self.next() {
          accum = f(accum, x)?;
      }
      try { accum }
  }
#+end_src

** General ~Iterator~ Trait Methods

Not all methods provided by the ~Iterator~ trait return adapters.

*** Fold Method

A method provided by the ~Iterator~ trait, ~fold~ combines every element into an accumulator
by repeatedly applying a closure that takes the accumulator and the next element in the iterator.
Returns the accumulated value once the iterator is exhausted.

#+begin_src rust
  // The "fold" method as provided by the "Iterator" trait.
  fn fold<B, F>(mut self, init: B, mut f: F) -> B
  where
      Self: Sized,
      F: FnMut(B, Self::Item) -> B,
  {
      let mut accum = init;
      while let Some(x) = self.next() {
          accum = f(accum, x);
      }
      accum
  }

  // === Example ===
  let xs = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];

  let sum = xs.iter().fold(0, |acc, x| acc + x);

  assert_eq!(sum, 55);
#+end_src

*** For-Each Method

A method provided by the ~Iterator~ trait, ~for_each~ calls a closure on each element of an iterator.
This is equivalent to using a ~for~ loop, although ~break~ and ~continue~ are not possible from
within the closure.

#+begin_src rust
  fn for_each<F>(self, f: F)
  where
      Self: Sized,
      F: FnMut(Self::Item),
  {
      fn call<T>(mut f: impl FnMut(T)) -> impl FnMut((), T) {
          move |(), item| f(item)
      }

      self.fold((), call(f));
  }

  // === Example ===
  let xs = [1, 2, 3];

  xs.iter().for_each(|x| println!("{x}"));
#+end_src

*** Collect Method

Transforms an iterator into a relevant collection.

#+begin_src rust
  fn collect<B: FromIterator<Self::Item>>(self) -> B
  where
      Self: Sized,
  {
      FromIterator::from_iter(self)
  }

  // === Example ===
  let array = [1, 2, 3];

  let doubled: Vec<i32> = array.iter().map(|x| x * 2).collect();

  assert_eq!(vec![2, 4, 6], doubled);

  // === required trait ===
  trait FromIterator<A>: Sized {
      fn from_iter<T: IntoIterator<Item = A>>(iter: T) -> Self;
  }
#+end_src

** Infinity

Iterators are lazily evaluated, meaning they can be infinite in range.

#+begin_src rust
  let numbers: RangeFrom<i32> = 0..;

  for number in numbers.take(7) {
      println!("{number}");
  }
#+end_src

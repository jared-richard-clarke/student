* Rust Generics

** Sources

| source                          | author                          |
|---------------------------------+---------------------------------|
| *The Rust Programming Language* | Steve Klabnik and Carol Nichols |

** Method Definitions

#+begin_src rust
  struct Point<T> {
      x: T,
      y: T,
  }

  impl<T> Point<T> {
  //   ^ By declaring `T` as a generic type after `impl`, Rust can identify
  //     that the type in the angle brackets after `Point` is a generic type
  //     rather than a concrete type.
      fn x(&self) -> &T {
          &self.x
      }
  }

  impl Point<f32> {
  //          ^ Concrete type. Only `Point<f32>` implements this method.
      fn distance_from_origin(&self) -> f32 {
          (self.x.powi(2) + self.y.powi(2)).sqrt()
      }
  }
#+end_src

** Monomorphization

#+begin_src rust
  // No runtime cost is payed for generics, because the compiler creates
  // unique, static definitions for each type.

  enum Option<T> {
      Some(T),
      None,
  }

  let integer = Some(7);
  let float = Some(11.0);

  // - Compiles ->

  enum Option_i32 {
      Some(i32),
      None,
  }
  enum Option_f64 {
      Some(f64),
      None,
  }

  let integer = Option_i32::Some(7);
  let float = Option_f64::Some(11.0);
#+end_src

** Type Bounds

Safe Rust does not assume any behaviors for generic types. Type parameters must use
trait bounds to stipulate what behavior a type implements.

#+begin_src rust
  // Generic type `T` must implement the `Display` trait in order to be used by `printer`.
  fn printer<T: Display>(t: T) {
      println!("{}", t);
  }

  // The only safe operation that has the signature `T -> T` is the identity function.
  // `mystery` cannot assume anything else about generic type `T`.
  fn mystery<T>(x: T) -> T {
      x
  }
#+end_src

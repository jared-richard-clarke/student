* Thompson's Construction

** Sources

| source                                               | author          |
|------------------------------------------------------+-----------------|
| *Regular Expression Search Algorithm*                | Ken Thompson    |
| *Thompson's Construction*                            | Wikipedia       |
| *Regular Expression Matching Can Be Simple and Fast* | Russ Cox        |
| *Theory of Computation*                              | Michael Sipser  |
| *Visualizing Thompson's Construction*                | Gregory Cernera |

** NFA Fragments

*Side Note*: The unlabeled edges are ε-transitions.

#+begin_quote
  "Previous search algorithms involve backtracking when a partially successful search path fails.
   This necessitates a lot of storage and bookkeeping, and executes slowly. In the regular expression
   recognition technique described in this paper, each character in the text to be searched is
   examined in sequence against a list of all possible current characters. During this examination a
   new list of all possible next characters is built. When the end of the current list is reached,
   the new list becomes the current list, the next character is obtained, and the process continues.
   In the terms of Brzozowski, this algorithm continually takes the left derivative of the given
   regular expression with respect to the text to be searched. The parallel nature of this algorithm
   makes it extremely fast."

   — *Regular Expression Search Algorithm*, Ken Thompson

  "[E]fficiency comes from tracking the set of reachable states but not which paths were used
   to reach them. In an *NFA* with *n* nodes, there can only be *n* reachable states at any step,
   but there might be *2ⁿ* paths through the *NFA*."

   — *Regular Expression Matching Can Be Simple and Fast*, Russ Cox
#+end_quote

#+begin_example
  === empty ===

  >◯--ε-->◎
   ^      ^
   |      |
   start  accept

  === symbol ===

  >◯--a-->◎

  === alternation or union (s|t) ===

  S ∪ T = { w | w ∈ S ∨ w ∈ T }

    ----------
   | ◯ N(s) ◯ |
    / ------ \
  >◯          ◎
    \ ------ /
   | ◯ N(t) ◯ |
    ----------

  === concatenation (st or s•t) ===

  S • T = { xy | x ∈ S ∧ y ∈ T }

    ----------      ----------
  >| ◯ N(s) ◯ |--->| ◯ N(t) ◎ |
    ----------      ----------
            ^--------^
           joined state

  === Kleene star (s*) ===

  S⁰   = {ε}
  S¹   = S
  Sⁿ⁺¹ = { xy | x ∈ Sⁿ ∧ y ∈ S } for each n > 0

             <+
            /  \
         ----------
  >◯--->| ◯ N(s) ◯ |--->◎
    \    ----------    /
     +---------------->
#+end_example

** NFA Fragments (Russ Cox)

#+begin_quote
  "The NFA for a regular expression is built up from partial NFAs for each subexpression,
   with a different construction for each operator. The partial NFAs have no matching states:
   instead they have one or more dangling arrows, pointing to nothing. The construction
   process will finish by connecting these arrows to a matching state."

  — *Regular Expression Matching Can Be Simple and Fast*, Russ Cox
#+end_quote

#+begin_src c
  // Side Note: Infix-to-postfix function is excluded from this example.
  //
  // === state fragments ===
  //
  // Represents an NFA state plus zero or one or two arrows exiting.
  //
  //                +--->out
  //                |
  // >◯-c->out     >◯                    ◎
  //                |
  //                +--->out1
  //
  // c < 256       c = 256 (Split)       c = 257 (Match)

  enum {
    Split = 256
    Match = 257,
  };

  typedef struct State {
    int c;
    State *out;
    State *out1;
    int lastlist;
  } State;

  // Matching state.
  State matchstate = { Match };
  // State counter.
  int nstate;

  // Allocate and initialize State.
  State* state(int c, State *out, State *out1) {
    State *s;

    nstate++;
    s = malloc(sizeof *s);
    s->lastlist = 0;
    s->c = c;
    s->out = out;
    s->out1 = out1;
    return s;
  }

  typedef struct Frag {
    State *start; // Pointer to the fragment's start state.
    Ptrlist *out; // List of dangling arrows in the NFA fragment.
  } Frag;

  // Initialize Frag.
  Frag frag(State *start, Ptrlist *out) {
    Frag n = { start, out };
    return n;
  }

  // Pointers double as storage for pointer lists.
  typedef union Ptrlist {
    Ptrlist *next;
    State *s;
  } Ptrlist;

  // === pointer list construction ===

  // Creates a singleton pointer list.
  Ptrlist* list1(State **outp) {
    Ptrlist *l;

    l = (Ptrlist*)outp;
    l->next = NULL;
    return l;
  }

  // Connects the dangling arrows in pointer list "l" to the state "s"
  void patch(Ptrlist *l, State *s) {
    Ptrlist *next;

    for (; l; l=next) {
      next = l->next;
      l->s = s;
    }
  }

  // Join the pointer lists l1 and l2.
  Ptrlist* append(Ptrlist *l1, Ptrlist *l2) {
    Ptrlist *oldl1;

    oldl1 = l1;
    while (l1->next) {
      l1 = l1->next;
    }
    l1->next = l2;
    return oldl1;
  }

  // === NFA Construction Loop ==
  //
  // Convert postfix regular expression to NFA. Return start state.

  State* post2nfa(char *postfix) {
    char *p;
    Frag stack[1000], *stackp, e1, e2, e;
    State *s;

    if (postfix == NULL) {
      return NULL;
    }

  #define push(s) *stackp++ = s
  #define pop()   *--stackp

    stackp = stack;
    for (p = postfix; *p; p++) {
      switch(*p){

        // === literal characters ===

      default:                                         //    *p
        s = state(*p, NULL, NULL);                     // >◯---->
        push(frag(s, list1(&s->out)));
        break;

        // === concatenation (e₁e₂) ===

      case: '.':
        e2 = pop();                                    //   ----      ----
        e1 = pop();                                    // >| e₁ |--->| e₂ |--->
        patch(e1.out, e2.start);                       //   ----      ----
        push(frag(e1.start, e2.out));
        break;

        // === alternation (e₁|e₂) ===

                                                       //        ----
      case '|':                                        //  +--->| e₁ |--->
        e2 = pop();                                    //  |     ----
        e1 = pop();                                    // >◯
        s = state(Split, e1.start, e2.start);          //  |     ----
        push(frag(s, append(e1.out, e2.out)));         //  +--->| e₂ |--->
        break;                                         //        ----

        // === zero-or-one (e?) ===
                                                       //        ---
      case '?':                                        //  +--->| e |--->
        e = pop();                                     //  |     ---
        s = state(Split, e.start, NULL);               // >◯
        push(frag(s, append(e.out, list1(&s->out1)))); //  |
        break;                                         //  +------------>

        // === zero or more (e*) ===

                                                       //        ---
      case '*':                                        //  +--->| e |---+
        e = pop();                                     //  |     ---    |
        s = state(Split, e.start, NULL);               // >◯<-----------+
        patch(e.out, s);                               //  |
        push(frag(s, list1(&s->out1)));                //  +------------>
        break;

        // === one or more (e+) ===

      case '+':                                        //    +------+
        e = pop();                                     //    V      |
        s = state(Split, e.start, NULL);               //   ---     |
        patch(e.out, s);                               // >| e |--->◯--->
        push(frag(e.start, list1(&s->out1)));          //   ---
        break;
      }
    }

    e = pop();
    if(stackp != stack) {
      return NULL;
    }
    patch(e.out, &matchstate);                         // >◎
    return e.start;
  #undef pop
  #undef push
  }
#+end_src

** Simulating the NFA

*** Simulator: C Code

#+begin_src c
  typedef struct List {
    State **s;
    int n;
  };

  List l1, l2;
  static int listid;

  // Computes initial state set.
  List* startlist(State *start, List *l) {
    l->n = 0;
    listid++;
    addstate(l, start);
    return l;
  }

  // Checks state set for match.
  int ismatch(List *l) {
    int i;

    for (i=0; i<l->n; i++) {
      if (l->s[i] == &matchstate) {
        return 1;
      }
    }
    return 0;
  }

  // Adds states to set, recursively traversing epsilon transitions.
  void addstate(List *l, State *s) {
    if (s == NULL || s->lastlist == listid) {
      return;
    }
    s->lastlist = listid;
    if(s->c == Split) {
      addstate(l, s->out);
      addstate(l, s->out1);
      return;
    }
    l->s[l->n++] = s;
  }

  // Step through the states in "clist" past the character "c",
  // to create the next NFA state set in "nlist".
  void step(List *clist, int c, List *nlist) {
    int i;
    State *s;

    listid++;
    nlist->n = 0;
    for (i=0; i<clist->n; i++) {
      s = clist->s[i];
      if (s->c == c) {
        addstate(nlist, s->out);
      }
    }
  }

  // // DFA state: a cached NFA state list.
  // typedef struct DState {
  //   List l;
  //   DState *next[256];
  //   DState *left;
  //   DState *right;
  // } DState;
  //
  // // Compare lists. First by length, then by members.
  // static int listcmp(List *l1, List *l2) {
  //   int i;
  //
  //   if (l1->n < l2->n) {
  //     return -1;
  //   }
  //   if (l1->n > l2->n) {
  //     return 1;
  //   }
  //   for (i=0; i<l1->n; i++) {
  //     if (l1->s[i] < l2->s[i]) {
  //       return -1;
  //     } else if (l1->s[i] > l2->s[i]) {
  //       return 1;
  //     }
  //   }
  //   return 0;
  // }
  //
  // // Compare pointers by address.
  // static int ptrcmp(const void *a, const void *b) {
  //   if (a < b) { return -1; }
  //   if (a > b) { return 1; }
  //   return 0;
  // }
  //
  // // Return the cached DState for list l, creating a new one if needed.
  // DState *alldstates;
  // DState* dstate(List *l) {
  //   int i;
  //   DState **dp, *d;
  //
  //   qsort(l->s, l->n, sizeof l->s[0], ptrcmp);
  //   dp = &allstates;
  //   while ((d = *dp) != NULL) {
  //     i = listcmp(l, &d->l);
  //     if (i < 0) {
  //       dp = &d->left;
  //     } else if (i > 0) {
  //       dp = &d->right;
  //     } else {
  //       return d;
  //     }
  //   }
  //
  //    d = malloc(sizeof *d + l->n*sizeof l->s[0]);
  //    memset(d, 0, sizeof *d);
  //    d->l.s = (State**)(d+1);
  //    memmove(d->l.s, l->s, l->n*sizeof l->s[0]);
  //    d->l.n = l->n;
  //    *dp = d;
  //    return d;
  // }
  //
  // void startnfa(State *start, List *l) {
  //   l->n = 0;
  //   listid++;
  //   addstate(l, start);
  // }
  //
  // DState* startdstate(State *start) {
  //   return dstate(startlist(start, &l1));
  // }
  //
  // DState* nextstate(DState *d, int c) {
  //   step(&d->l, c, &l1);
  //   return d->next[c] = dstate(&l1);
  // }
  //
  // // Run the DFA on input s.
  // int match(DState *start, char *s) {
  //   DState *d, *next;
  //   int c, i;
  //
  //   d = start;
  //   for(; *s; s++) {
  //           c = *s & 0xFF;
  //           if((next = d->next[c]) == NULL) {
  //                   next = nextstate(d, c);
  //           }
  //           d = next;
  //   }
  //   return ismatch(&d->l);
  // }

  // Run the NFA on the input "s".
  int match(State *start, char *s){
    int i, c;
    List *clist, *nlist, *t;

    clist = startlist(start, &l1);
    nlist = &l2;
    for (; *s; s++) {
      c = *s & 0xFF;
      step(clist, c, nlist);
      // Swap "clist" and "nlist".
      t = clist; clist = nlist; nlist = t;
    }
    return ismatch(clist);
  }
#+end_src

*** Simulation: ~aba|abb~

#+begin_example
  === Backtracking: O(2ⁿ) ===    === Multi-State: O(n) ===

  Step 0:  a b b                 Step 0:  a b b
          ^                              ^

     ◯-a->◯-b->◯-a->                ●-a->◯-b->◯-a->
    /               \              /               \
  >●                 ◎           >●                 ◎
    \               /              \               /
     ◯-a->◯-b->◯-b->                ●-a->◯-b->◯-b->

  Step 1:  a b b                 Step 1:  a b b
          ^                                ^
     ●-a->◯-b->◯-a->                ◯-a->●-b->◯-a->
    /               \              /               \
  >◯                 ◎           >◯                 ◎
    \               /              \               /
     ◯-a->◯-b->◯-b->                ◯-a->●-b->◯-b->

  Step 2:  a b b                 Step 2:  a b b
            ^                                ^
     ◯-a->●-b->◯-a->                ◯-a->◯-b->●-a->
    /               \              /               \
  >◯                 ◎           >◯                 ◎
    \               /              \               /
     ◯-a->◯-b->◯-b->                ◯-a->◯-b->●-b->

  Step 3:  a b b                 Step 3:  a b b
              ^                                ^
  Backtrack on failure.          Drop failed first thread. Match on second.

     ◯-a->◯-b->●-a->                ◯-a->◯-b->◯-a->
    /               \              /               \
  >◯                 ◎           >◯                 ●
    \               /              \               /
     ◯-a->◯-b->◯-b->                ◯-a->◯-b->◯-b->

  Step 4:  a b b
          ^
     ◯-a->◯-b->◯-a->
    /               \
  >◯                 ◎
    \               /
     ●-a->◯-b->◯-b->

  Step 5:  a b b
            ^
     ◯-a->◯-b->◯-a->
    /               \
  >◯                 ◎
    \               /
     ◯-a->●-b->◯-b->

  Step 6:  a b b
              ^
     ◯-a->◯-b->◯-a->
    /               \
  >◯                 ◎
    \               /
     ◯-a->◯-b->●-b->

  Step 7:  a b b
                ^
     ◯-a->◯-b->◯-a->
    /               \
  >◯                 ●
    \               /
     ◯-a->◯-b->◯-b->
#+end_example

** RE to NFA to Op-Code Construction

#+begin_example
  === regular expression ===

  infix:   a(a|b)*b

  postfix: aab|*•b•

  === NFA construction ===

  1. aab|*•b•
     ^

     >◯-a->◎

  2. aab|*•b•
      ^

     >◯-a->◎

  3. aab|*•b•
       ^

     >◯-b->◎

  4. aab|*•b•
        ^

        ◯-a->
       /     \
     >◯       ◎
       \     /
        ◯-b->

  5.  aab|*•b•
          ^

            <-------+
            | ◯-a-> |
            |/     \|
       ◯--->◯       ◯--->◎
        \    \     /    /
         \    ◯-b->    /
          +----------->

  6. aab|*•b•
          ^

                <-------+
                | ◯-a-> |
                |/     \|
     >◯-a->◯--->◯       ◯--->◎
            \    \     /    /
             \    ◯-b->    /
              +----------->

  7. aab|*•b•
           ^

     >◯-b->◎

  8. aab|*•b•
            ^

                <-------+
                | ◯-a-> |
                |/     \|
     >◯-a->◯--->◯       ◯--->◯-b->◎
            \    \     /    /
             \    ◯-b->    /
              +----------->

  === op code ===

  | 0 | char a     |
  |---+------------|
  | 1 | split 2, 7 |
  |---+------------|
  | 2 | split 3, 5 |
  |---+------------|
  | 3 | char a     |
  |---+------------|
  | 4 | jump 6     |
  |---+------------|
  | 5 | char b     |
  |---+------------|
  | 6 | jump 1     |
  |---+------------|
  | 7 | char b     |
  |---+------------|
  | 8 | match      |

  === regular expression ===

  infix:   a|b|c

  postfix: abc||

  === NFA construction ===

  1. abc||
     ^

     >◯-a->◎

  2. abc||
      ^

     >◯-b->◎

  3. abc||
       ^

     >◯-c->◎

  4. abc||
        ^

        ◯-b->
       /     \
     >◯       ◎
       \     /
        ◯-c->

  5. abc||
         ^

        ◯---a--->
       /         \
     >◯   ◯-b---> ◎
       \ /       /
        ◯       /
         \     /
          ◯-c->

  === op code ===

  | 0 | split 1, 3 |
  |---+------------|
  | 1 | char a     |
  |---+------------|
  | 2 | jump 7     |
  |---+------------|
  | 3 | split 4, 6 |
  |---+------------|
  | 4 | char b     |
  |---+------------|
  | 5 | jump 7     |
  |---+------------|
  | 6 | char c     |
  |---+------------|
  | 7 | match      |

  === regular expression ===

  infix:   aba|abb
  postfix: ab•a•ab•b•|

  === NFA construction ===

  1. ab•a•ab•b•|
     ^

     >◯-a->◎

  2. ab•a•ab•b•|
      ^

     >◯-b->◎

  3. ab•a•ab•b•|
       ^

     >◯-a->◯-b->◎

  4. ab•a•ab•b•|
        ^

     >◯-a->◎

  5. ab•a•ab•b•|
         ^

     >◯-a->◯-b->◯-a->◎

  6-10. ab•a•ab•b•|
             ^---^

     >◯-a->◯-b->◯-b->◎

  11. ab•a•ab•b•|
                ^

        ◯-a->◯-b->◯-a->
       /               \
     >◯                 ◎
       \               /
        ◯-a->◯-b->◯-b->

  === op code ===

  | 0 | split 1, 5 |
  |---+------------|
  | 1 | char a     |
  |---+------------|
  | 2 | char b     |
  |---+------------|
  | 3 | char a     |
  |---+------------|
  | 4 | jump 8     |
  |---+------------|
  | 5 | char a     |
  |---+------------|
  | 6 | char b     |
  |---+------------|
  | 7 | char b     |
  |---+------------|
  | 8 | match      |
#+end_example

** RE to NFA to DFA

#+begin_example
  === regular expression ===

  infix:   (ab|c)*
  postfix: ab•c|*

  === NFA Construction ===

  1. ab•c|*
     ^

     >[1]-a->(2)

  2. ab•c|*
      ^

     >[3]-b->(4)

  3. ab•c|*
       ^

     >[1]-a->[2]-b->(4)

  4. ab•c|*
        ^

     >[5]-c->(6)

  5. ab•c|*
         ^

        [1]-a->[2]-b->[4]
        /               \
     >[7]               (8)
        \               /
        [5]-----c---->[6]

  6. ab•c|*
          ^
            <-----------------+
            |                 |
            |[1]-a->[2]-b->[4]|
            |/               \|
     >[9]->[7]               [8]->(10)
        \    \               /    /
         \   [5]-----c---->[6]   /
          \                     /
           +------------------->

  === subset construction ===

  | NFA States            | DFA State | a | b | c |
  |-----------------------+-----------+---+---+---|
  | { 9, 7, 1, 5, 10 }    | A         | B |   | C |
  | { 2 }                 | B         |   | D |   |
  | { 6, 8, 10, 7, 1, 5 } | C         | B |   | C |
  | { 4, 8, 7, 1, 5, 10 } | D         | B |   | C |

  while there is an unmarked state T in D-states {
      mark T
      for each input symbol a {
          U := ε-closure(move(T, a))
          if U is not in D-states {
              add U as unmarked state to D-states
          }
          D-transitions[T, a] := U
      }
  }

  === DFA ===

        <------a
        |      |
    a->[B]->b  |
    |   ^   |  |
  >(A)  a  (D)-+
    |   |   |
    c->(C)<-c
       / \
      +-c->
#+end_example

Each state in the *DFA* corresponds to a list of states from the *NFA*.

The epsilon closure *E(q)* of a state *q* in *Q* is the union of the set *{q}* with the set of
all states that can be reached from *q* via one or more *ε* transitions.

If *R* is a set of states from *Q*, the epsilon closure *E(R)* is defined as the union of the
epsilon closures of all the states in *R*.

1. The set of states of the *DFA* is *P(Q)*, the power set of states *Q* in the original *NFA*.

2. The start state of the *DFA* is *E({q₀})*, where *q₀* is the original start state of the *NFA*.

3. For sets *R* in *P(Q)* and input characters *c ∈ Σ*, the transition function *δn* of the *DFA*
   is defined in terms of the transition function *δ* of the *NFA* by *δn(R,c) = U_{r ∈ R} E(δ(r,c))*.

The set of accepting states *F* of the *DFA* is defined to be the set of all states containing
at least one final state of the *NFA*.

** Regular Expression Virtual Machine

*** Operation Codes

#+begin_example
 | Expression | Instructions     |
 |------------+------------------|
 | a          | char a           |
 |------------+------------------|
 | e₁e₂       | codes for e₁     |
 |            | codes for e₂     |
 |------------+------------------|
 | e₁|e₂      |     split L1, L2 |
 |            | L1: codes for e₁ |
 |            |     jump L3      |
 |            | L2: codes for e₂ |
 |            | L3:              |
 |------------+------------------|
 | e?         |     split L1, L2 |
 |            | L1: codes for e  |
 |            | L2:              |
 |------------+------------------|
 | e*         | L1: split L2, L3 |
 |            | L2: codes for e  |
 |            |     jump L1      |
 |            | L3:              |
 |------------+------------------|
 | e+         | L1: codes for e  |
 |            |     split L1, L3 |
 |            | L3:              |
#+end_example

*** Thompson's VM

#+begin_src c
  // Op Codes
  enum {
    Char,
    Match,
    Jump,
    Split
  };

  // Instruction
  struct Inst {
    int  opcode;
    int  c;
    Inst *x;
    Inst *y;
  };

  struct Thread {
    Inst *pc;
  };

  int thompson_vm(Inst *program, char *input) {
    // Number of instructions
    int length;
    // Current list and next list
    Threadlist *clist, *nlist;
    // Program counter
    Inst *pc;
    // String pointer
    char *sp;

    length = program_length(program);
    clist  = threadlist(length);
    nlist  = threadlist(length);

    addthread(clist, thread(program));

    for (sp = input; *sp, sp += 1) {
      for (i = 0; i < clist.n; i += 1) {
        pc = clist.t[i].pc;
        switch (pc->opcode) {
        case Char:
          if (*sp != pc->c) {
            break;
          }
          addthread(nlist, thread(pc + 1));
          break;
        case Match:
          return 1
        case Jump:
          addthread(clist, thread(pc->x));
          break;
        case Split:
          addthread(clist, thread(pc->x));
          addthread(clist, thread(pc->y));
          break;
        }
      }
      swap(clist, nlist);
      clear(nlist);
    }
  }
#+end_src

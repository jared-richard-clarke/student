* Thompson's Construction

** Sources

| source                                               | author          |
|------------------------------------------------------+-----------------|
| *Regular Expression Search Algorithm*                | Ken Thompson    |
| *Thompson's Construction*                            | Wikipedia       |
| *Regular Expression Matching Can Be Simple and Fast* | Russ Cox        |
| *Theory of Computation*                              | Michael Sipser  |
| *Visualizing Thompson's Construction*                | Gregory Cernera |

** NFA Fragments

*Side Note*: The unlabeled edges are ε-transitions.

#+begin_quote
  "Previous search algorithms involve backtracking when a partially successful search path fails.
   This necessitates a lot of storage and bookkeeping, and executes slowly. In the regular expression
   recognition technique described in this paper, each character in the text to be searched is
   examined in sequence against a list of all possible current characters. During this examination a
   new list of all possible next characters is built. When the end of the current list is reached,
   the new list becomes the current list, the next character is obtained, and the process continues.
   In the terms of Brzozowski, this algorithm continually takes the left derivative of the given
   regular expression with respect to the text to be searched. The parallel nature of this algorithm
   makes it extremely fast."

   — *Regular Expression Search Algorithm*, Ken Thompson
  
  "[E]fficiency comes from tracking the set of reachable states but not which paths were used
   to reach them. In an *NFA* with *n* nodes, there can only be *n* reachable states at any step,
   but there might be *2ⁿ* paths through the *NFA*."

   — *Regular Expression Matching Can Be Simple and Fast*, Russ Cox
#+end_quote

#+begin_example
  === empty ===

  >◯--ε-->◎
   ^      ^
   |      |
   start  accept

  === symbol ===

  >◯--a-->◎

  === alternation or union (s|t) ===

  S ∪ T = { w | w ∈ S ∨ w ∈ T }

    ----------
   | ◯ N(s) ◯ |
    / ------ \
  >◯          ◎
    \ ------ /
   | ◯ N(t) ◯ |
    ----------

  === concatenation (st or s•t) ===

  S • T = { xy | x ∈ S ∧ y ∈ T }

    ----------      ----------
  >| ◯ N(s) ◯ |--->| ◯ N(t) ◎ |
    ----------      ----------
            ^--------^
           joined state

  === Kleene star (s*) ===

  S⁰   = {ε}
  S¹   = S
  Sⁿ⁺¹ = { xy | x ∈ Sⁿ ∧ y ∈ S } for each n > 0

             <+
            /  \
         ----------
  >◯--->| ◯ N(s) ◯ |--->◎
    \    ----------    /
     +---------------->
#+end_example


** NFA Fragments (Russ Cox)

#+begin_src c
  // === state fragments ===

  typedef struct State {
    int c;
    State *out;
    State *out1;
    int lastlist;
  } State;

  //                +--->out
  //                |
  // >◯-c->out     >◯                    ◎
  //                |
  //                +--->out1
  //
  // c < 256       c = 256 (Split)       c = 257 (Match)

  typedef struct Frag {
    State *start; // Pointer to the fragment's start state.
    Ptrlist *out; // List of dangling arrows in the NFA fragment.
  } Frag;

  // Pointers double as storage for pointer lists.
  typedef union Ptrlist {
    Ptrlist *next;
    State *s;
  } Ptrlist;

  // === pointer list construction ===

  // Creates a singleton pointer list.
  Ptrlist* list1(State **outp) {
    Ptrlist *l;

    l = (Ptrlist*)outp;
    l->next = NULL;
    return l;
  }

  // Join the pointer lists l1 and l2.
  Ptrlist* append(Ptrlist *l1, Ptrlist *l2) {
    Ptrlist *oldl1;

    oldl1 = l1;
    while(l1->next) {
      l1 = l1->next;
    }
    l1->next = l2;
    return oldl1;
  }

  // Connects the dangling arrows in pointer list "l" to the state "s"
  void patch(Ptrlist *l, State *s) {
    Ptrlist *next;

    for(; l; l=next){
      next = l->next;
      l->s = s;
    }
  }

  // === NFA Construction Loop ==

  State* post2nfa(char *postfix) {
    char *p;
    Frag stack[1000], *stackp, e1, e2, e;
    State *s;

  #define push(s) *stackp++ = s
  #define pop()   *--stackp

    stackp = stack;
    for(p = postfix; *p; p++){
      switch(*p){

        // === literal characters ===

      default:                                         //    *p
        s = state(*p, NULL, NULL);                     // >◯---->
        push(frag(s, list1(&s->out)));
        break;

        // === concatenation (e₁e₂) ===

      case: '.':
        e2 = pop();                                    //   ----      ----
        e1 = pop();                                    // >| e₁ |--->| e₂ |--->
        patch(e1.out, e2.start);                       //   ----      ----
        push(frag(e1.start, e2.out));
        break;

        // === alternation (e₁|e₂) ===

                                                       //        ----
      case '|':                                        //  +--->| e₁ |--->
        e2 = pop();                                    //  |     ----
        e1 = pop();                                    // >◯
        s = state(Split, e1.start, e2.start);          //  |     ----
        push(frag(s, append(e1.out, e2.out)));         //  +--->| e₂ |--->
        break;                                         //        ----

        // === zero-or-one (e?) ===
                                                       //        ---
      case '?':                                        //  +--->| e |--->
        e = pop();                                     //  |     ---
        s = state(Split, e.start, NULL);               // >◯
        push(frag(s, append(e.out, list1(&s->out1)))); //  |
        break;                                         //  +------------>

        // === zero or more (e*) ===

                                                       //        ---
      case '*':                                        //  +--->| e |---+
        e = pop();                                     //  |     ---    |
        s = state(Split, e.start, NULL);               // >◯<-----------+
        patch(e.out, s);                               //  |
        push(frag(s, list1(&s->out1)));                //  +------------>
        break;

        // === one or more (e+) ===

      case '+':                                        //    +------+
        e = pop();                                     //    V      |
        s = state(Split, e.start, NULL);               //   ---     |
        patch(e.out, s);                               // >| e |--->◯--->
        push(frag(e.start, list1(&s->out1)));          //   ---
        break;
      }
    }

    e = pop();
    if(stackp != stack) {
      return NULL;
    }
    patch(e.out, &matchstate);                         // >◎
    return e.start;
  #undef pop
  #undef push
  }
#+end_src

** RE to NFA Construction

#+begin_example
  === regular expression ===

  infix:   a(a|b)*b

  postfix: aab|*•b•

  === NFA construction ===

  1. aab|*•b•
     ^

     >◯-a->◎

  2. aab|*•b•
      ^

     >◯-a->◎

  3. aab|*•b•
       ^

     >◯-b->◎

  4. aab|*•b•
        ^

        ◯-a->◯
       /      \
     >◯        ◎
       \      /
        ◯-b->◯

  5.  aab|*•b•
          ^

            <--------+
            | ◯-a->◯ |
            |/      \|
       ◯--->◯        ◯--->◎
        \    \      /    /
         \    ◯-b->◯    /
          +------------>

  6. aab|*•b•
          ^

                <--------+
                | ◯-a->◯ |
                |/      \|
     >◯-a->◯--->◯        ◯--->◎
            \    \      /    /
             \    ◯-b->◯    /
              +------------>

  7. aab|*•b•
           ^

     >◯-b->◎

  8. aab|*•b•
            ^

                <--------+
                | ◯-a->◯ |
                |/      \|
     >◯-a->◯--->◯        ◯--->◯-b->◎
            \    \      /    /
             \    ◯-b->◯    /
              +------------>

  === regular expression ===

  infix:   a|b|c

  postfix: abc||

  === NFA construction ===

  1. abc||
     ^

     >◯-a->◎

  2. abc||
      ^

     >◯-b->◎

  3. abc||
       ^

     >◯-c->◎

  4. abc||
        ^

        ◯-b->◯
       /      \
     >◯        ◎
       \      /
        ◯-c->◯

  5. abc||
         ^

        ◯---a--->◯
       /          \
     >◯   ◯-b->◯   ◎
       \ /      \ /
        ◯        ◯
         \      /
          ◯-c->◯

#+end_example

** RE to NFA to DFA

#+begin_example
  === regular expression ===

  infix:   (ab|c)*
  postfix: ab•c|*

  === NFA Construction ===

  1. ab•c|*
     ^

     >[1]-a->(2)

  2. ab•c|*
      ^

     >[3]-b->(4)

  3. ab•c|*
       ^

     >[1]-a->[2]-b->(4)

  4. ab•c|*
        ^

     >[5]-c->(6)

  5. ab•c|*
         ^

        [1]-a->[2]-b->[4]
        /               \
     >[7]               (8)
        \               /
        [5]-----c---->[6]

  6. ab•c|*
          ^
            <-----------------+
            |                 |
            |[1]-a->[2]-b->[4]|
            |/               \|
     >[9]->[7]               [8]->(10)
        \    \               /    /
         \   [5]-----c---->[6]   /
          \                     /
           +------------------->

  === subset construction ===

  | NFA States            | DFA State | a | b | c |
  |-----------------------+-----------+---+---+---|
  | { 9, 7, 1, 5, 10 }    | A         | B |   | C |
  | { 2 }                 | B         |   | D |   |
  | { 6, 8, 10, 7, 1, 5 } | C         | B |   | C |
  | { 4, 8, 7, 1, 5, 10 } | D         | B |   | C |

  while there is an unmarked state T in D-states {
      mark T
      for each input symbol a {
          U := ε-closure(move(T, a))
          if U is not in D-states {
              add U as unmarked state to D-states
          }
          D-transitions[T, a] := U
      }
  }

  === DFA ===

        <------a
        |      |
    a->[B]->b  |
    |   ^   |  |
  >(A)  a  (D)-+
    |   |   |
    c->(C)<-c
       / \
      +-c->
#+end_example

Each state in the *DFA* corresponds to a list of states from the *NFA*.

The epsilon closure *E(q)* of a state *q* in *Q* is the union of the set *{q}* with the set of all states
that can be reached from *q* via one or more *ε* transitions.

If *R* is a set of states from *Q*, the epsilon closure *E(R)* is defined as the union of the epsilon
closures of all the states in *R*.

1. The set of states of the *DFA* is *P(Q)*, the power set of states *Q* in the original *NFA*.

2. The start state of the *DFA* is *E({q₀})*, where *q₀* is the original start state of the *NFA*.

3. For sets *R* in *P(Q)* and input characters *c ∈ Σ*, the transition function *δ_{n}* of the *DFA* is defined
   in terms of the transition function *δ* of the *NFA* by *δ_{n}(R,c) = U_{r ∈ R} E(δ(r,c))*.

The set of accepting states *F* of the *DFA* is defined to be the set of all states containing at least one
final state of the *NFA*.

** Simulating the NFA

#+begin_src c
  typedef struct List {
    State **s;
    int n;
  };

  List l1, l2;
  static int listid;

  // Computes initial state set.
  List* startlist(State *start, List *l) {
    l->n = 0;
    listid++;
    addstate(l, start);
    return l;
  }

  // Checks state set for match.
  int ismatch(List *l) {
    int i;

    for(i=0; i<l->n; i++) {
      if(l->s[i] == &matchstate){
        return 1;
      }
    }
    return 0;
  }

  // Adds states to set, recursively traversing epsilon transitions.
  void addstate(List *l, State *s) {
    if(s == NULL || s->lastlist == listid) {
      return;
    }
    s->lastlist = listid;
    if(s->c == Split) {
      addstate(l, s->out);
      addstate(l, s->out1);
      return;
    }
    l->s[l->n++] = s;
  }

  // Step through the states in "clist" past the character "c",
  // to create the next state set in "nlist".
  void step(List *clist, int c, List *nlist) {
    int i;
    State *s;

    listid++;
    nlist->n = 0;
    for(i=0; i<clist->n; i++) {
      s = clist->s[i];
      if(s->c == c) {
        addstate(nlist, s->out);
      }
    }
  }

  // Simulate the NFA on the input "s".
  int match(State *start, char *s){
    int i, c;
    List *clist, *nlist, *t;

    clist = startlist(start, &l1);
    nlist = &l2;
    for(; *s; s++) {
      c = *s & 0xFF;
      step(clist, c, nlist);
      // Swap "clist" and "nlist".
      t = clist; clist = nlist; nlist = t;
    }
    return ismatch(clist);
  }
#+end_src

** Regular Expression Virtual Machine

#+begin_quote
  "We can view the bytecode as an encoding of the NFA graphs into machine instructions, or we can view
   the NFA graphs as the control-flow graph of the bytecodes."

   — *Regular Expression Matching: The Virtual Machine Approach*, Russ Cox
#+end_quote

- PC :: Program counter.

- SP :: String pointer.

- char c :: If the character *SP* points at is not *c*, stop this thread: it failed. Otherwise, advance
  *SP* to the next character and advance *PC* to the next instruction.

- match :: Stop thread. Match found.

- jmp x :: Set *PC* to the instruction at *x*.

- split x, y :: Split execution: continue at both *x* and *y*. Create a new thread with *SP* copied from
  the current thread. One thread continues with *PC x*. The other continues with *PC y*.

| operation   | instructions     |
|-------------+------------------|
| a           | char a           |
|-------------+------------------|
| e₁e₂        | codes for e₁     |
|             | codes for e₂     |
|-------------+------------------|
| e₁\vert{}e₂ | split L1, L2     |
|             | L1: codes for e₁ |
|             | jmp L3           |
|             | L2: codes for e₂ |
|             | L3:              |
|-------------+------------------|
| e?          | split L1, L2     |
|             | L1: codes for e  |
|             | L2:              |
|-------------+------------------|
| e*          | L1: split L2, L3 |
|             | L2: codes for e  |
|             | jmp L1           |
|             | L3:              |
|-------------+------------------|
| e+          | L1: codes for e  |
|             | split L1, L3     |
|             | L3:              |

** Regular Expression: ~a+b+~

*** Byte Code

| PC | Instruction |
|----+-------------|
|  0 | char a      |
|  1 | split 0, 2  |
|  2 | char b      |
|  3 | split 2, 4  |
|  4 | match       |

*** Virtual Machine

| Thread | PC           | SP    | Execution                                |
|--------+--------------+-------+------------------------------------------|
| T1     | 0 char a     | [a]ab | character match                          |
| T1     | 1 split 0, 2 | a[a]b | creates thread T2 at PC = 2 SP = a[a]b   |
| T1     | 0 char a     | a[a]b | character match                          |
| T1     | 1 split 0, 2 | a[a]b | creates thread T3 at PC = 2 SP = aa[b]   |
| T1     | 0 char a     | aa[b] | no match, thread T1 dies                 |
| T2     | 2 char b     | a[a]b | no match, thread T2 dies                 |
| T3     | 2 char b     | aa[b] | character match                          |
| T3     | 3 split 2, 4 | aab[] | creates thread T4 at PC = 4 SP = aab[]   |
| T3     | 2 char b     | aab[] | no match (end of string), thread T3 dies |
| T4     | 4 match      | aab[] | match                                    |

** Thompson's Virtual Machine

#+begin_src c
  enum {
    Char,
    Match,
    Jmp,
    Split
  };

  struct Inst {
    int opcode;
    int c;
    Inst *x;
    Inst *y;
  };

  struct Thread {
    Inst *pc;
  };
  Thread thread(Inst *pc);

  int thompsonvm(Inst *prog, char *input) {
    int len;
    ThreadList *clist, *nlist;
    Inst *pc;
    char *sp;

    // # of instructions
    len = proglen(prog);
    clist = threadlist(len);
    nlist = threadlist(len);

    addthread(clist, thread(prog));

    for (sp=input; *sp; sp += 1) {
      for (i=0; i<clist.n; i += 1) {
	pc = clist.t[i].pc;
	switch (pc->opcode) {
	case Char:
	  if (*sp != pc->c) {
	    break;
	  }
	  addthread(nlist, thread(pc+1));
	  break;
	case Match:
	  return 1;
	case Jmp:
	  addthread(clist, thread(pc->x));
	  break;
	case Split:
	  addthread(clist, thread(pc->x));
	  addthread(clist, thread(pc->y));
	  break;
	}
      }
      swap(clist, nlist);
      clear(nlist);
    }
  }
#+end_src

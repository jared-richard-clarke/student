* LR Grammars and Parsing

*Introduction to Compilers and Language Design*, Douglas Thain

*LR Parsing*, Wikipedia

** Actions

- L :: left-to-right parse

- R :: Right-most derivation. Expands the right-most nonterminal. Reductions in reverse order,
  from the leaves to the root.

- (k) :: *k* symbols of lookahead.

An *LR(k)* parser has a stack and input. Given the contents of a stack and *k* tokens
of lookahead, the parser does one of the following operations:

1. *shift n*: Push the matched terminal *t* onto the parse stack and scan the next input symbol
   into the lookahead buffer. Push next state *n* onto the parse stack as the new current state.

2. *reduce r_{m}*: Apply grammar rule *r_{m}: Lhs → S_{1} S_{2} ... S_{L}*.
   - Remove the matched topmost *L* symbols from the parse stack.
   - This exposes a prior state *p* that was expecting an instance of the *Lhs* symbol.
   - Join the *L* parse trees together as one parse tree with new root symbol *Lhs*.
   - Lookup the next state *n* from row *p* and column *Lhs* of the *Goto* table.
   - Push the symbol and tree for *Lhs* onto the parse stack.
   - Push the next state *n* onto the parse stack as the new current state.
   - The lookahead and input stream remain unchanged.

3. *accept*: Lookahead *t* is the *eof* marker. End of parsing. If the state stack contains just the
   start state, report success. Otherwise, report a syntax error.

4. *error*: Report a syntax error. The parser ends, or attempts some recovery.

The difference between *SLR*, *LALR*, and *LR* parsers is in the tables that they use. Different
tables use different techniques to determine when to *reduce*, and, if there is more than one grammar
rule with the same right-hand side, which left-hand-side nonterminal to push.

Two types of conflict can appear in an *LR* grammar:

| shift-reduce | reduce-reduce |
|--------------+---------------|
| T → id.( E ) | S → id( E ).  |
| T → id.      | E → id( E ).  |

** Choices

*LR(k)* parsers use *deterministic finite automata (DFAs)* to choose when to shift or reduce. The symbols
pushed onto the parser's stack are not actually terminals and nonterminals. They are *states* within
a finite state machine.

- At each step, the parser runs a *DFA* using symbols on the stack as input. The input
  is a sequence of terminals and nonterminals from the bottom up.

- The current state of the *DFA* plus the next *k* tokens of the input indicate whether to shift or reduce.

- The states of a *DFA* are sets of *items*.
  - An item is a production with a *marker(.)* indicating the current position of the parser.
  - In general, item *X → γ . δ* means *γ* is at the top of the stack. At the head of the input
    there is a string derivable from *δ*

*LR* parsers use two tables: the *action* table and the *goto* table. The two tables are usually combined,
with the action table specifying entries for terminals, and the goto table specifying entries for non-terminals.

- action table (Action[s, a]) :: Tells the parser what to do when the state on top of the stack is *s* and
  terminal *a* is the next input token. Possible actions are *shift*, *reduce*, *accept*, or *error*.

- goto table (Goto[s, X]) :: Points to the next stack state after a reduction of non-terminal *X* while
  state *s* is on top of the stack.

** Algorithm

We start with the initial state *s_{0}* on the stack. The next input is the terminal *a* and the current
state is *s_{t}*. The action of the parser is as follows:

- If *Action[s_{t}, a]* = *shift*, push the specified state onto the stack then grab the next token *a*
  from the input.

- If *Action[s_{t}, a]* = *reduce T → X_{1}...X_{k}* then pop *k* states off the stack, leaving state *s_{u}*
  on top. *Goto[s_{u}, Y]* gives a new state *s_{v}* to push onto the stack. The input remains unchanged.

- If *Action[s_{t}, a]* = *accept*, then the parse is completed and successful.

- If *Action[s_{t}, a]* = *error* — the table location is blank — then the parser emits a syntax error.

The differences between *LR* parsers:

- The definition of an item: the place we might be in an input.
- The number of states within the underlying finite state machine.
- The amount of information within the state.

#+begin_example
# === main loop: pseudo code ===

push initial state s0
a = scan()
loop
    t = top-of-stack (state) symbol
    switch action[t, a] {
       case shift s:
           push(s)
           a = scan()
       case reduce by A → alpha:
           for i = 1 to length(alpha) do pop() end
           t = top-of-stack symbol
           push(goto[t, A])
       case accept:
           return( SUCCESS )
       case error:
           call the error handler
           return( FAILURE )
    }
end
#+end_example

** LR(0) Automaton

*** Grammar

| rule | production |
|------+------------|
|    1 | S → S $    |
|    2 | S → ( L )  |
|    3 | S → x      |
|    4 | L → S      |
|    5 | L → L, S   |

*** Configurating Sets

1. Build action table.
2. If state contains item *X → γ.$* then *accept*.
3. If state contains item *X → γ.* then *reduce* *X → γ*.
4. If state *i* has edge to *j* with terminal, then *shift*.

| state | set        | successor |
|-------+------------+-----------|
| s1    | S' → .S $  | s4        |
|       | S  → .(L)  | s3        |
|       | S  → .x    | s2        |
|-------+------------+-----------|
| s2    | S → x.     | reduce 3  |
|-------+------------+-----------|
| s3    | S → (.L )  | s5        |
|       | L → .S     | s7        |
|       | L → .L, S  | s5        |
|       | S → .( L ) |           |
|       | S → .x     |           |
|-------+------------+-----------|
| s4    | S' → S.$   | accept    |
|-------+------------+-----------|
| s5    | S → ( L. ) | s6        |
|       | L → L., S  | s8        |
|-------+------------+-----------|
| s6    | S → ( L ). | reduce 2  |
|-------+------------+-----------|
| s7    | L → S.     | reduce 4  |
|-------+------------+-----------|
| s8    | L → L,.S   | s9        |
|       | S → .( L ) | s3        |
|       | S → .x     | s2        |
|-------+------------+-----------|
| s9    | L → L, S.  | reduce 5  |

*** Goto Graph / Transition Diagram

#+begin_example
1.
 -------------        2.             8.                   9.
| S' → .S $   |  x    --------   x   ------------    S   ----------
| S  → .(L)   |----->| S → x. |<----| L → L,.S   |----->| L → L,S. |
| S  → .x     |-+     --------      | S → .( L ) |       ----------
 -------------  |    3.             | S → .x     |
     S |      ( |     ------------   ------------
4.     V        +--->| S → (.L )  | ( |     ^
 ------------        | L → .S     |<--+     | ,
| S' → S.$   |       | L → .L, S  |         |       5.
 ------------        | S → .( L ) |  L    -----------
                     | S → .x     |----->| S → ( L.) |
                      ------------       | L → L.,S  |
                          |               -----------
                        S |                 |
                          V   7.            | )
                       --------             V        6.
                      | L → S. |          ------------
                       --------          | S → ( L ). |
                                          ------------
#+end_example

** LR(1) Parsing

The complete of canonical form of *LR(1)* parsing depends on the *LR(1)* automaton.
The *LR(1)* automaton is like the *LR(0)* automaton, except that each item is annotated with
the set of tokens that could potentially follow it, given the current state. This set is known
as the *lookahead* of the item. The lookahead is always a subset of the *FOLLOW* of the
relevant non-terminal.

- For an item like *A → α.B* with a lookahead of *{L}*, add new rules like *B → .γ* with a
  lookahead of *{L}*.

- For an item like *A → α.Bβ* with a lookahead of *{L}*, add new rules like *B → .γ* with a
  lookahead as follows:

  - If *β* cannot produce *ε*, the lookahead is *FIRST(β)*.
  - If *β* can produce *ε*, the lookahead is *FIRST(β) ∪ {L}*

** Shift-Reduce Parsing Example

*** LR(1) Grammar

| rule | production  |
|------+-------------|
|    0 | P → E $     |
|    1 | E → T E'    |
|    2 | E' → + T E' |
|    3 | E' → ε      |
|    4 | T → 1       |

*** FIRST Table

| non-terminal | first  |
|--------------+--------|
| P            | {1}    |
| E            | {1}    |
| E'           | {+, ε} |
| T            | {1}    |

*** LR(1) Closure Table

| goto        | kernel                 | state | closure                                                  |
|-------------+------------------------+-------+----------------------------------------------------------|
|             | [ P → .E, $ ]          |     0 | [ P → .E, $ ], [ E → .T E', $ ], [ T → .1, +/$ ]         |
| goto(0, E)  | [ P → E., $ ]          |     1 | [ P → E., $ ]                                            |
| goto(0, T)  | [ E → T.E', $ ]        |     2 | [ E → T.E', $ ], [ E' → .+ T E', $ ], [ E' → ., $ ]      |
| goto(0, 1)  | [ T → 1., +/$ ]        |     3 | [ T → 1., +/$ ]                                          |
| goto(2, E') | [ E → T E' ., $ ]      |     4 | [ E → T E'., $ ]                                         |
| goto(2, +)  | [ E' → +.T E', $ ]     |     5 | [ E' → +.T E', $ ], [ T → .1, +/$ ]                      |
| goto(5, T)  | [ E' → + T.E', $ ]     |     6 | [ E' → + T.E', $ ], [ E' → .+ T E', $ ], [ E' → ., $ ]   |
| goto(5, 1)  | [ T → 1., +/$ ]        |     3 |                                                          |
| goto(6, E') | [ E' → + T E' ., $ ]   |     7 | [ E' → + T E' ., $ ]                                     |
| goto(6, +)  | [ E' → +.T E', $ ]     |     5 |                                                          |

*** LR Table: Action and Goto

| state | +  | 1  | $      | P | E | E' | T |
|-------+----+----+--------+---+---+----+---|
|     0 |    | s3 |        |   | 1 |    | 2 |
|     1 |    |    | accept |   |   |    |   |
|     2 | s5 |    | r3     |   |   |  4 |   |
|     3 | r4 |    | r4     |   |   |    |   |
|     4 |    |    | r1     |   |   |    |   |
|     5 |    | s3 |        |   |   |    | 6 |
|     6 | s5 |    | r3     |   |   |  7 |   |
|     7 |    |    | r2     |   |   |    |   |

*** Trace: ~1 + 1~

| step | stack                      | input   | action |
|------+----------------------------+---------+--------|
|    1 | 0,                         | 1 + 1 $ | s3     |
|    2 | 0, 1, 3                    | + 1 $   | r4     |
|    3 | 0, T                       | + 1 $   | 2      |
|    4 | 0, T, 2                    | + 1 $   | s5     |
|    5 | 0, T, 2, +, 5              | 1 $     | s3     |
|    6 | 0, T, 2, +, 5, 1, 3        | $       | r4     |
|    7 | 0, T, 2, +, 5, T           | $       | 6      |
|    8 | 0, T, 2, +, 5, T, 6        | $       | r3     |
|    9 | 0, T, 2, +, 5, T, 6, E'    | $       | 7      |
|   10 | 0, T, 2, +, 5, T, 6, E', 7 | $       | r2     |
|   11 | 0, T, 2, E'                | $       | 4      |
|   12 | 0, T, 2, E', 4             | $       | r1     |
|   13 | 0, E                       | $       | 1      |
|   14 | 0, E, 1                    | $       | accept |

** LALR Parsing

The main downside to *LR(1)* parsing is that the *LR(1)* automaton can be many times larger
than an *LR(0)* automaton. *Lookahead LR* parsing is the practical answer to this problem.
To construct an *LALR* parser, the states of an *LR(1)* automaton with the same *core* must
be merged. The *core* of a state is simply the body of an *item*, ignoring lookahead.
The resulting *LALR* automaton has the same number of states as the *LR(0)* automaton, but
has more precise lookahead information available for each item.

*** LR(1) States

| state 1    | LA     | state 2    | LA     |
|------------+--------+------------+--------|
| E → .E + T | {$, +} | E → .E + T | {), +} |
| E → .T     | {$, +} | E → .T     | {), +} |

*** LALR State

| state      | LA        |
|------------+-----------|
| E → .E + T | {$, ), +} |
| E → .T     | {$, ), +} |

* LR Grammars and Parsing

** Sources

| source                                          | author                  |
|-------------------------------------------------+-------------------------|
| *Introduction to Compilers and Language Design* | Douglas Thain           |
| *Formal Languages* and *Set Theory*             | Wikipedia               |
| *Basics of Compiler Design*                     | Torben Ægidius Mogensen |

** Actions

- L :: left-to-right scan.

- R :: Right-most derivation. Expands the right-most nonterminal. Reductions in reverse order,
  from the leaves to the root.

- (k) :: *k* symbols of lookahead.

** Algorithm

- *Input*: A LR-Parser for an unambiguous context-free grammar *G* over an alphabet *Σ* and a
  word *w ∈ Σ\star{}*.

- *Output*: An error if *w ∉ L(G)* or a rightmost derivation for *w* otherwise.

  - Set the cursor to the rightmost symbol of *w$*.
  - Push the initial state *s_{0}* on top of the empty stack.
  - Repeat
    - Let *s* be the state on top of the stack.
    - Let *a* be the current symbol in *w$*.
    - If *action[s, a]* = *shift s_{n}* then
      - Push *a* on top of the stack.
      - Push *s_{n}* on top of the stack.
      - Advance the cursor to the next symbol on the right in *w$*.
    - if *action[s, a]* = *reduce A → β* then
      - pop | *β* | symbols off the stack. ( For *X → A B C*, pop *C*, *B*, and *A* )
      - let *s_{n}* be the state on top of the stack.
      - push *A* on top of the stack.
      - push *goto[s, A]* on top of the stack.
    - if *action[s, a]* = *accept* then
      - return success
    - else
      - return error

#+begin_example
# === parser-driving psuedo code ===

stack.push($, 0) # <----- always push a symbol/state pair
lookahead = scan()
loop:
    s = stack.top() # <-- always a state
    switch(action[s][lookahead])
    case shift sn:
        stack.push(lookahead, sn)
        lookahead = scan()
    case reduce A → β:
        stack.pop(β)
        sn = stack.top()
        stack.push(A, goto[sn][A])
    case accept:
        return success
    default:
        return error
#+end_example

The difference between *SLR*, *LALR*, and *LR* parsers is in the tables that they use. Different
tables use different techniques to determine when to *reduce*, and, if there is more than one grammar
rule with the same right-hand side, which left-hand-side nonterminal to push.

Two types of conflict can appear in an *LR* grammar:

| shift-reduce | reduce-reduce |
|--------------+---------------|
| T → id.( E ) | S → id( E ).  |
| T → id.      | E → id( E ).  |

** Parse Tree

#+begin_example
           ^
           |      +------+------+
           |      |      |      |
reductions | +----+----+ | +----+----+
           | |    |    | | |    |    |
           | | +--+--+ | | | +--+--+ |
           | | |  |  | | | | |  |  | |
           | ( 3  +  4 ) + ( 5  +  6 )
           <---------------------------
                      shifts
           --------------------------->
                   left-to-right
#+end_example

** LR(0) Parsing

- LR(0) Parser State :: All the possible rules that are currently under consideration by a shift-reduce
  parser. Each set of rules, or box, represents a state in the machine, connected by transitions from
  both terminals to non-terminals in a grammar. Also known as the *canonical collection* or
  *compact finite state machine* of a grammar.

- Item :: The contents of each state, which are rules augmented by a *marker*.  In general, item
  *X → γ . δ* means *γ* is at the top of the stack. At the head of the input there is a string
  derivable from *δ*.

- Marker(.) :: Marks the parser's current position in a rule.

- Kernel :: *State 0* created by taking the production for the start symbol *S → E* and adding a marker
  at the beginning of the right-hand side.

- Closure ::  Any set of items can be extended by recursively adding all the appropriate items until
  all non-terminals preceded by markers are accounted for. The minimal extension is called the closure
  of an item set.

** SLR Parser Example

An *SLR* grammar is one that has no *shift-reduce* or *reduce-reduce* conflicts when examining its
*FOLLOW* sets.

*** Grammar

| rule | production |
|------+------------|
|    0 | S → E $    |
|    1 | E → E + B  |
|    2 | E → B      |
|    3 | B → 0      |
|    4 | B → 1      |

*** Configurating Sets

Find the item set that each symbol *x ∈ {0, 1, +, E, B}* closes over.

1. Take the subset, *S*, of all items in the current item set where there is a dot in front of the symbol
   of interest, *x*.

2. For each item in *S*, move the dot to the right of *x*.

3. Close the resulting set of items.

| state | set          |
|-------+--------------|
|     0 | S → .E $     |
|       | + E → .E + B |
|       | + E → .B     |
|       | + B → .0     |
|       | + B → .1     |
|-------+--------------|
|     1 | S → E.$      |
|       | + E → E.+ B  |
|-------+--------------|
|     2 | E → B.       |
|-------+--------------|
|     3 | B → 0.       |
|-------+--------------|
|     4 | B → 1.       |
|-------+--------------|
|     5 | E → E +.B    |
|       | + B → .0     |
|       | + B → .1     |
|-------+--------------|
|     6 | E → E + B.   |

*** Goto Graph / Transition Diagram

#+begin_example
                  +                   $  +--------+
  +------------------------------+  +--->| accept |
  |                              |  |    +--------+
  | +-------------+        +-----------+
  | | state 0     |        | state 1   |
  | |-------------|   E    |-----------|        +---------+
  | |   S →.E $   |------->| S → E.$   |   +--->| state 3 |<-+
  | | + E →.E + B |        | E → E.+ B |   |    |---------|  |
  | | + E →.B     |        +-----------+   |    | B → 0.  |  |
  | | + B →.0     |   B    +---------+     |    +---------+  |
  | | + B →.1     |------->| state 2 |     |                 |
  | +-------------+        |---------|     |    +---------+  |
  |      | |               | E → B.  |     | +->| state 4 |  |
  |      | |          0    +---------+     | |  |---------|  |
  |      +---------------------------------+ |  | B → 1.  |  |
  |        |          1                      |  +---------+  |
  |        +---------------------------------+       ^       |
  |  +-------------+     +------------+              |       |
  +->| state 5     |     | state 6    |              |       |
     |-------------|  B  |------------|              |       |
     |   E → E +.B |---->| E → E + B. |              |       |
     | + B → .0    |     +------------+      1       |       |
     | + B → .1    |---------------------------------+       |
     +-------------+                                         |
            |                                0               |
            +------------------------------------------------+
#+end_example

*** First-Follow Table

| non-terminal | FIRST    | FOLLOW   |
|--------------+----------+----------|
| S            | { 0, 1 } | { $ }    |
| E            | { 0, 1 } | { $, + } |
| B            | { 0, 1 } | { $, + } |

*** Goto-Action Table

| state | +     | 0  | 1  | $      | E | B |
|-------+-------+----+----+--------+---+---|
|     0 |       | s3 | s4 |        | 1 | 2 |
|     1 | s5    |    |    | accept |   |   |
|     2 | r_{2} |    |    | r_{2}  |   |   |
|     3 | r_{3} |    |    | r_{3}  |   |   |
|     4 | r_{4} |    |    | r_{4}  |   |   |
|     5 |       | s3 | s4 |        |   | 6 |
|     6 | r_{1} |    |    | r_{1}  |   |   |

*** Stack Trace: ~1 + 0~

| step | stack                 | input   | action |
|------+-----------------------+---------+--------|
|    1 | ~0~                   | 1 + 0 $ | s4     |
|    2 | ~0~ 1 ~4~             | + 0 $   | r_{4}  |
|    3 | ~0~ B                 | + 0 $   | 2      |
|    4 | ~0~ B ~2~             | + 0 $   | r_{2}  |
|    5 | ~0~ E                 | + 0 $   | 1      |
|    6 | ~0~ E ~1~             | + 0 $   | s5     |
|    7 | ~0~ E ~1~ + ~5~       | 0 $     | s3     |
|    8 | ~0~ E ~1~ + ~5~ 0 ~3~ | $       | r_{3}  |
|    9 | ~0~ E ~1~ + ~5~ B     | $       | 6      |
|   10 | ~0~ E ~1~ + ~5~ B ~6~ | $       | r_{1}  |
|   11 | ~0~ E                 | $       | 1      |
|   12 | ~0~ E ~1~             | $       | accept |

** LR(1) Parsing

The complete of canonical form of *LR(1)* parsing depends on the *LR(1)* automaton.
The *LR(1)* automaton is like the *LR(0)* automaton, except that each item is annotated with
the set of tokens that could potentially follow it, given the current state. This set is known
as the *lookahead* of the item. The lookahead is always a subset of the *FOLLOW* set of the
relevant non-terminal.

- For an item like *A → α.B* with a lookahead of *{L}*, add new rules like *B → .γ* with a
  lookahead of *{L}*.

- For an item like *A → α.Bβ* with a lookahead of *{L}*, add new rules like *B → .γ* with a
  lookahead as follows:

  - If *β* cannot produce *ε*, the lookahead is *FIRST(β)*.
  - If *β* can produce *ε*, the lookahead is *FIRST(β) ∪ {L}*

** LR(1) Parser Example

*** Grammar

| rule | production   |
|------+--------------|
|    0 | S → E $      |
|    1 | E → E + T    |
|    2 | E → T        |
|    3 | T → id ( E ) |
|    4 | T → id       |

*** Configurating Sets

| state | set             | follow set |
|-------+-----------------+------------|
|     0 | S → .E          | $          |
|       | + E → .E + T    | $, +       |
|       | + E → .T        | $, +       |
|       | + T → .id ( E ) | $, +       |
|       | + T → .id       | $, +       |
|-------+-----------------+------------|
|     1 | S → E.$         | $          |
|       | + E → E.+ T     | $, +       |
|-------+-----------------+------------|
|     2 | E → T.          | $, +       |
|-------+-----------------+------------|
|     3 | T → id.( E )    | $, +       |
|       | + T → id.       | $, +       |
|-------+-----------------+------------|
|     4 | E → E +.T       | $, +       |
|       | + T → .id ( E ) | $, +       |
|       | + T → .id       | $, +       |
|-------+-----------------+------------|
|     5 | T → id (.E )    | $, +       |
|       | + E → .E + T    | ), +       |
|       | + E → .T        | ), +       |
|       | + T → .id ( E ) | ), +       |
|       | + T → .id       | ), +       |
|-------+-----------------+------------|
|     6 | E → E + T.      | $, +       |
|-------+-----------------+------------|
|     7 | T → id ( E.)    | $, +       |
|       | + E → E.+ T     | ), +       |
|-------+-----------------+------------|
|     8 | E → T.          | ), +       |
|-------+-----------------+------------|
|     9 | T → id.( E )    | ), +       |
|       | + T → id.       | ), +       |
|-------+-----------------+------------|
|    10 | T → id ( E ).   | $, +       |
|-------+-----------------+------------|
|    11 | E → E +.T       | ), +       |
|       | + T .id ( E )   | ), +       |
|       | + T .id         | ), +       |
|-------+-----------------+------------|
|    12 | T → id (.E )    | ), +       |
|       | + E → .E + T    | ), +       |
|       | + E → .T        | ), +       |
|       | + T → .id ( E ) | ), +       |
|       | + T → .id       | ), +       |
|-------+-----------------+------------|
|    13 | E → E + T       | ), +       |
|-------+-----------------+------------|
|    14 | T → id ( E.)    | ), +       |
|       | + E → E.+ T     | ), +       |
|-------+-----------------+------------|
|    15 | T → id ( E ).   | ), +       |

*** First Table

| non-terminal | FIRST  |
|--------------+--------|
| S            | { id } |
| E            | { id } |
| T            | { id } |

*** Goto-Action Table

| state | +   | id | (   | )   | $      |  E |  T |
|-------+-----+----+-----+-----+--------+----+----|
|     0 |     | s3 |     |     |        |  1 |  2 |
|     1 | s4  |    |     |     | accept |    |    |
|     2 | r2  |    |     |     | r2     |    |    |
|     3 | r4  |    | s5  |     | r4     |    |    |
|     4 |     | s3 |     |     |        |    |  6 |
|     5 |     | s9 |     |     |        |  7 |  8 |
|     6 | r1  |    |     |     | r1     |    |    |
|     7 | s11 |    |     | s10 |        |    |    |
|     8 | r2  |    |     | r2  |        |    |    |
|     9 | r4  |    | s12 | r4  |        |    |    |
|    10 | r3  |    |     |     | r3     |    |    |
|    11 |     | s9 |     |     |        |    | 13 |
|    12 |     | s9 |     |     |        | 14 |  8 |
|    13 | r1  |    |     | r1  |        |    |    |
|    14 | s11 |    |     | s15 |        |    |    |
|    15 | r3  |    |     | r3  |        |    |    |

*** Stack Trace: ~id ( id )~

| step | state            | symbol        | input       | action |
|------+------------------+---------------+-------------+--------|
|    1 | [0]              | []            | id ( id ) $ | s3     |
|    2 | [0, 3]           | [id]          | ( id ) $    | s5     |
|    3 | [0, 3, 5]        | [id, (]       | id ) $      | s9     |
|    4 | [0, 3, 5, 9]     | [id, (, id]   | ) $         | r4     |
|    5 | [0, 3, 5]        | [id, (, T]    | ) $         | 8      |
|    6 | [0, 3, 5, 8]     | [id, (, T]    | ) $         | r2     |
|    7 | [0, 3, 5]        | [id, (, E]    | ) $         | 7      |
|    8 | [0, 3, 5, 7]     | [id, (, E]    | ) $         | s10    |
|    9 | [0, 3, 5, 7, 10] | [id, (, E, )] | $           | r3     |
|   10 | [0]              | [T]           | $           | 2      |
|   11 | [0, 2]           | [T]           | $           | r2     |
|   12 | [0]              | [E]           | $           | 1      |
|   13 | [0, 1]           | [E]           | $           | accept |

** LALR Parsing

The main downside to *LR(1)* parsing is that the *LR(1)* automaton can be many times larger
than an *LR(0)* automaton. *Lookahead LR* parsing is the practical answer to this problem.
To construct an *LALR* parser, the states of an *LR(1)* automaton with the same *core* must
be merged. The *core* of a state is simply the body of an *item*, ignoring lookahead.
The resulting *LALR* automaton has the same number of states as the *LR(0)* automaton, but
has more precise lookahead information available for each item.

*** LR(1) States

| state 1    | LA       | state 2    | LA       |
|------------+----------+------------+----------|
| E → .E + T | { $, + } | E → .E + T | { ), + } |
| E → .T     | { $, + } | E → .T     | { ), + } |

*** LALR(1) State

| state      | LA          |
|------------+-------------|
| E → .E + T | { $, ), + } |
| E → .T     | { $, ), + } |

** LALR(1) Parser Example

*** Grammar

*Side Note*: The same grammar as the *LR(1)* parser example.

| rule | production   |
|------+--------------|
|    0 | S → E $      |
|    1 | E → E + T    |
|    2 | E → T        |
|    3 | T → id ( E ) |
|    4 | T → id       |

*** Configurating Sets

*Side Note*: Although its lookup table is smaller — 8 states instead of 15 — this *LALR(1)* parser
will process a sentence in the same number of steps as the previous *LR(1)* parser.

| state | set             | follow set |
|-------+-----------------+------------|
|     0 | S → .E          | $          |
|       | + E → .E + T    | $, +       |
|       | + E → .T        | $, +       |
|       | + T → .id ( E ) | $, +       |
|       | + T → .id       | $, +       |
|-------+-----------------+------------|
|     1 | S → E.          | $          |
|       | + E → E.+ T     | $, +       |
|-------+-----------------+------------|
|     2 | E → T.          | $, ), +    |
|-------+-----------------+------------|
|     3 | T → id.( E )    | $, ), +    |
|       | + T → id.       | $, ), +    |
|-------+-----------------+------------|
|     4 | E → E +.T       | $, ), +    |
|       | + T → .id ( E ) | $, ), +    |
|       | + T → ,id       | $, ), +    |
|-------+-----------------+------------|
|     5 | T → id (.E )    | $, ), +    |
|       | + E → .E + T    | ), +       |
|       | + E → .T        | ), +       |
|       | + T → .id ( E ) | ), +       |
|       | + T → .id       | ), +       |
|-------+-----------------+------------|
|     6 | E → E + T.      | $, ), +    |
|-------+-----------------+------------|
|     7 | T → id ( E.)    | $, ), +    |
|       | + E → E.+ T     | ), +       |
|-------+-----------------+------------|
|     8 | T → id ( E ).   | $, ), +    |

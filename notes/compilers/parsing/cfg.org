* Context Free Grammars

*Introduction to Compilers and Language Design*, Douglas Thain

*Formal Languages* and *Set Theory*, Wikipedia

Grammars in which the left-hand side of each production rule is always a single non-terminal.
The right-hand side of a rule is a sentential form that describes the allowable forms of the
corresponding non-terminal.

- terminal :: The elementary symbols of a language.

- non-terminal :: A language structure that can be replaced by sequences of terminal symbols.
  Also called syntactic variables.

- sentence :: A valid sequence of terminals.

- sentential form :: A valid sequence of terminals and non-terminals.

- grammar :: A finite set of rules describing a valid set of sentences.

- language :: The potentially infinite set of sentences described or set of strings generated
  by a particular grammar.

- start symbol :: The special, non-terminal symbol representing the top-level definition
  of a program.

- derivation :: A sequence of rule applications that prove a sentence is a member of a
  particular language.

- (⇒) :: Shows that one sentential form is equal to another by applying a given rule.

- top-down derivation :: Begins with the start symbol, applying rules to expand non-terminals
  until the desired sentence is reached.

- bottom-up derivation :: Begins at the desired sentence, applying rules backward until reaching
  the start symbol.

- weak equivalence :: Two separate grammars that generate the same language.

- production :: A rewrite rule specifying symbol substitution to generate new symbol sequences.

** Derivation

| rule | production |
|------+------------|
|    1 | S → E      |
|    2 | E → E + E  |
|    3 | E → id     |
|    4 | E → 1      |

For brevity, we occasionally condense a set of rules with a common left-hand side by combining all
the right-hand sides with a logical-or symbol:

#+begin_example
E → E + E | id | 1
#+end_example

** Top-Down Derivation

| sentential form | apply rule |
|-----------------+------------|
| S               | S → E      |
| E               | E → E + E  |
| E + E           | E → id     |
| id + E + E      | E → 1      |
| id + 1 + E      | E → 1      |
| id + 1 + 1      |            |

** Bottom-Up Derivation

| sentential form | apply rule |
|-----------------+------------|
| id + 1 + 1      | E → 1      |
| id + 1 + E      | E → 1      |
| id + E + E      | E → E + E  |
| id + E          | E → id     |
| E + E           | E → E + E  |
| E               | S → E      |
| S               |            |

** Ambiguity

~id + 1 + 1~ for the grammar above is ambiguous because it has two possible derivations.

*** Left-Most Derivation

#+begin_example
        S
        |
        E
        |
      E + E
      /   \
   E + E   1
   /   \
 id     1
#+end_example

*** Right-Most Derivation

#+begin_example
      S
      |
      E
      |
    E + E
    /   \
  id   E + E
       /   \
      1     1
#+end_example

** Removing Ambiguity

It is possible to re-write a grammar so that it is not ambiguous. With binary operators, we can require
one side of an expression to be an atomic term (*T*). The grammar below is no longer ambiguous, because
it allows only a left-most derivation.

| rule | production |
|------+------------|
|    1 | S → E      |
|    2 | E → E + T  |
|    3 | E → T      |
|    4 | T → id     |
|    5 | T → 1      |

Further modification to the grammar is required to account for multiple levels of precedence. The usual
approach is to construct a grammar with multiple levels, each reflecting the intended precedence of
operators. Addition combined with multiplication can be expressed as the sum of terms (*T*) that consist
of multiplied factors (*F*).

| rule | production |
|------+------------|
|    1 | S → E      |
|    2 | E → E + T  |
|    3 | E → T      |
|    4 | T → T * F  |
|    5 | T → F      |
|    6 | F → id     |
|    7 | F → 1      |

#+begin_example
=== ambiguous ===

E → E + E | E * E | ( E ) | 1

=== unambiguous ===

E → T | E + T
T → F | T * F
F → 1 | ( E )
#+end_example

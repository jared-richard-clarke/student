* Parsers: Theory and Notation

** Sources

| source                                          | author        |
|-------------------------------------------------+---------------|
| *Introduction to Compilers and Language Design* | Douglas Thain |
| *Formal Languages* and *Set Theory*             | Wikipedia     |

** Set Theory: Basic Concepts and Notation

| name            | notation    | definition                                                      |
|-----------------+-------------+-----------------------------------------------------------------|
| binary relation | *a ∈ A*     | *a* is a member of *A*.                                         |
| binary relation | *a ∉ A*     | *¬(a ∈ A)*, *a* is not a member of *A*                          |
| empty set       | *Ø* or *{}* | The empty set, which contains no elements.                      |
| subset          | *A ⊆ B*     | *A* is a subset of *B*, *∀x(x ∈ A → x ∈ B)*                     |
| proper subset   | *A ⊂ B*     | *A* is a subset of *B* but not equal to *B*, *A ⊆ B ∧ A ≠ B*    |
| superset        | *A ⊇ B*     | *A* is a superset of *B*.                                       |
| proper superset | *A ⊃ B*     | *A* is a superset of *B* but not equal to *B*.                  |
| equality        | *A = B*     | *A* and *B* have the same members, *A ⊆ B ∧ B ⊆ A*              |
| union           | *A ∪ B*     | Members of *A* and *B* or both, *{ x \vert{} x ∈ A ∨ x ∈ B }*   |
| intersection    | *A ∩ B*     | Only members of both *A* and *B*, *{ x \vert{} x ∈ A ∧ x ∈ B }* |
| difference      | *A - B*     | Members of *A* but not *B*,  *{ x \vert{} x ∈ A ∧ x ∉ B }*      |

** Formal Languages

In logic, mathematics, computer science, and linguistics, a formal language consists of words
whose letters are taken from an *alphabet* and are *well-formed* according to a specific set
of rules called a *formal grammar*.

Terminals and non-terminals are the lexical elements used in specifying the production rules
constituting a formal grammar. The terminals and non-terminals of a particular grammar are in
two completely separate sets.

*** Notation

- Lowercase letters represent terminals: *1*, *+*, *a*, etc.
- Uppercase letters represent non-terminals: *P*, *S*, *E*, etc.
- Greek letters represent sentential forms — potentially mixed sequences of terminals and non-terminals:
  *α*, *β*, *γ*, etc.

- Sequences represent individual symbols in a sentential form: *Y_{1}Y_{2}...Y_{n}* where *Y_{i}* may
  be either a terminal or non-terminal.

*** Words over an Alphabet

- formal language :: *L* over an alphabet *Σ* is a subset of *Σ\star{}*, that is, a set of words
  over that alphabet.

- alphabet :: a *set*, whose members are called *letters*.

- word :: a finite sequence of letters who are members of an alphabet.

- Σ* :: The set of all words over an alphabet *Σ*.

-  Λ, e or ε :: For any alphabet, there is only one element of length zero. Combining a word with
  the empty word is the original word.

*** A Classic Formalization of Generative Grammars

Each production rule maps from one string of symbols to another, where the first string (the head)
contains an arbitrary number of symbols provided at least one of them is a non-terminal.

- A finite set *N* of non-terminal symbols.

- A finite set *Σ* of terminal symbols that is disjoint from *N*.

- A finite set *P* of production rules: *(Σ ∪ N)\star{}N(Σ ∪ N)\star{} → (Σ ∪ N)\star{}*

  - *·*: Concatenation. Implicit in sequences. *ABC* implies *A · B · C*.
    
  - *\star{}*: Repetition. The Kleene star operator.
    
  - *∪*: (Set) Union.
    
  - *→*: Function.

- In the case that the body consists solely of an empty string, the body may be denoted with
  a special notation, usually *Λ*, *e* or *ε*.

- A distinguished symbol *S ∈ N* that is the start symbol.

*** Kleene Closure

1. If *V* is a set of strings, then *V\star{}* is defined as the smallest superset of *V* that
   contains the empty string *ε* and is closed under the string concatenation operation.

2. If *V* is a set of symbols or characters, then *V\star{}* is the set of all strings over symbols
   in *V*, including the empty string *ε*.

#+begin_example
  V⁰   = {ε}
  V¹   = V
  Vⁿ⁺¹ = {wv | w ∈ Vⁿ ∧ v ∈ V} for each n > 0
#+end_example

Strings form a *monoid* with concatenation as the binary operation and *ε* the identity element.
The Kleene Closure is defined for any monoid, not just strings.

** Grammar Classes

#+begin_example
LL(1) ⊂ SLR ⊂ LALR ⊂ LR(1) ⊂ CFG
#+end_example

- Context-Free Grammar :: Any grammar whose rules have the form *A -> α*. Requires a parse
  table and a stack to track parser state. An ambiguous CFG creates a non-deterministic finite
  automaton.

- LR(k) :: Performs bottom-up, left-right scan and right-most parse of the input, deciding what rule
  to apply next by examining the next *k* tokens. Requires a very large automaton, because the possible
  lookaheads are encoded into states.

- LALR :: A *Lookahead-LR* parser created by constructing an *LR(1)* parser then merging all item sets
  that have the same core.

- SLR :: A *Simple-LR* parser approximates an *LR(1)* parser by constructing an *LR(0)* state machine
  and then relying on the *FIRST* and *FOLLOW* sets to select which rule to apply.

- LL(k) :: Performs a top-down, left-right scan and left-most parse of the input, deciding which rules
  to apply by examining the next *k* tokens. *LL(1)* parsers require a only table that is *O(nt)* where
  *t* is the number of tokens and *n* is the number of non-terminals.

** The Chomsky Hierarchy

| language class         | machine required        |
|------------------------+-------------------------|
| regular                | finite automata         |
| context free           | pushdown automata       |
| context sensitive      | linear bounded automata |
| recursively enumerable | Turing machine          |

- Regular Languages :: Languages described by regular expressions. Every regular expression corresponds
  to a finite automaton that can be implemented with a table and a single integer to represent the
  current state.

- Context Free Languages :: The meaning of a non-terminal is the same in all places where it appears.
  CFGs require pushdown automaton, which requires a finite automaton coupled with a stack. If the
  grammar is ambiguous, the automaton will be non-deterministic and therefore impractical.

- Context Sensitive Languages :: The meaning of a non-terminal is controlled by the context in which it
  appears. CSLs require a non-deterministic linear bounded automaton, which is bounded in memory
  consumption but not in execution time.

- Recursively Enumerable Languages :: The least restrictive set of languages, described by the rules
  *α → β* where *α* and *β* can be any combination of terminals and non-terminals. These languages
  can only be recognized by a full Turing machine.

* Big O Notation

** Definition

*f(x) = O(g(x))* as *x → ∞* if there exists positive constants *M* and *x₀* such that
*|f(x)| ≤ M × g(x)* for all *x ≥ x₀*. Function *g(x)* typically omits constant factors
and lowest terms.

For example, function *f(n) = 4n² - 2n + 2* grows at an order of *n²* or *f(n) ∈ O(n²)*.

More informally, Big O describes the complexity of an algorithm, specifically its upper bound,
as its input size grows towards infinity.

- Time Complexity :: How run time increases with input size.

- Space Complexity :: How memory usage increases with input size.

#+begin_example
  Y
  ^
  |
  |
  |
  +---------> X

  where X = input
        Y = time or space
#+end_example

** Orders of Common Functions

| Big-O        | Informal     |
|--------------+--------------|
| O(1)         | constant     |
| O(log n)     | logarithmic  |
| O(n)         | linear       |
| O(n × log n) | linearithmic |
| O(n²)        | quadratic    |
| O(n³)        | cubic        |
| O(2ⁿ)        | exponential  |
| O(n!)        | factorial    |

* Grammars

** Sources

| source                       | author                        |
|------------------------------+-------------------------------|
| *Foundations of Computation* | Carol Critchlow and David Eck |

** Context-Free Grammars

A *context-free grammar (CFG)* is a 4-tuple *(V, Σ, P, S)* where

- *V* is a finite set of symbols. The elements of *V* are the non-terminal symbols of the grammar.

- *Σ* is a finite set of symbols such that *V ∩ Σ = ∅*. The elements of *Σ* are the terminal symbols
  of the grammar.

- *P* is a set of production rules. Each rule is of the form *A → w* where *A* is one of the symbols
  in *V* and *w* is a string in the language *(V ∪ Σ)\star{}*.

- *S ∈ V*, where *S* is the start symbol of the grammar.

#+begin_example
  Grammar G = (V, Σ, P, S)

  where V = {S, E, B}
        Σ = {0, 1, +}
        P = S → E $
            E → E + B
            E → B
            B → 0
            B → 1
        S = start symbol
#+end_example

- ⇒ :: A relation on set *(V ∪ Σ)\star{}*. Reads "yields" or "produces".

- ⇒\star{} :: The reflexive and transitive closure of the relation on set *(V ∪ Σ)\star{}*.
  Reads "yields in zero or more steps" or "produces in zero or more steps".

If *G = (V, Σ, P, S)* is a context-free grammar, the language generated by *G* is the language *L(G)*
over the alphabet *Σ* defined by *L(G) = { w ∈ Σ\star{} | S ⇒ G\star{} w }*.

- derivation :: A sequence of one or more applications of production rules. A derivation of string *w*
  from start symbol *S* would be of the form *S ⇒ x₁ ⇒ x₂ ⇒ ... ⇒ w*.

** Backus-Naur Form to Context-Free Grammar

*** Backus-Naur Form

#+begin_example
  E ::= T [ + T ] ...
  T ::= F [ * F ] ...
  F ::= "(" E ")" | x | y | z
#+end_example

*** Context-Free Grammar

**** LL(1)

#+begin_example
  === grammar ===

  E → T A
  A → + T A
  A → ε
  T → F B
  B → * F B
  B → ε
  F → ( E )
  F → x
  F → y
  F → z

  === derivation ===

  E ⇒ T A
    ⇒ F B A
    ⇒ x B A
    ⇒ x A
    ⇒ x + T A
    ⇒ x + F B A
    ⇒ x + y B A
    ⇒ x + y * F B A
    ⇒ x + y * z B A
    ⇒ x + y * z A
    ⇒ x + y * z
#+end_example

**** LR(1)

#+begin_example
  === grammar ===

  E → E + T
  E → T
  T → T * F
  T → F
  F → ( E )
  F → x
  F → y
  F → z

  === derivation ===

  E ⇒ T
    ⇒ T * F
    ⇒ T * z
    ⇒ F * z
    ⇒ ( E ) * z
    ⇒ ( E + T ) * z
    ⇒ ( E + F ) * z
    ⇒ ( E + y ) * z
    ⇒ ( T + y ) * z
    ⇒ ( F + y ) * z
    ⇒ ( x + y ) * z
#+end_example

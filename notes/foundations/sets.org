* Sets, Functions, and Relations

** Sources

| source                       | author                        |
|------------------------------+-------------------------------|
| *Foundations of Computation* | Carol Critchlow and David Eck |
| *Basics of Compiler Design*  | Torben Ægidius Mogensen       |

** Basic Concepts

Let *A* = set

and *B* = set

and *a* = entity

*** Definitions

| name             | notation                        | definition                                                   |
|------------------+---------------------------------+--------------------------------------------------------------|
| binary relation  | *a ∈ A*                         | Object *a* is a member of set *A*.                           |
| binary relation  | *a ∉ A*                         | *¬(a ∈ A)*, *a* is not a member of *A*                       |
| empty set        | *Ø* or *{}*                     | The empty set, which contains no elements.                   |
| subset           | *A ⊆ B*                         | *A* is a subset of *B*, *∀x(x ∈ A → x ∈ B)*                  |
| proper subset    | *A ⊂ B*                         | *A* is a subset of *B* but not equal to *B*, *A ⊆ B ∧ A ≠ B* |
| superset         | *A ⊇ B*                         | *A* is a superset of *B*.                                    |
| proper superset  | *A ⊃ B*                         | *A* is a superset of *B* but not equal to *B*.               |
| equality         | *A = B*                         | *A* and *B* have the same members, *A ⊆ B ∧ B ⊆ A*           |
| union            | *A ∪ B*                         | Members of *A* and *B* or both, *{ x : x ∈ A ∨ x ∈ B }*      |
| intersection     | *A ∩ B*                         | Only members of both *A* and *B*, *{ x : x ∈ A ∧ x ∈ B }*    |
| difference       | *A \ B* or *A - B*              | Members of *A* but not *B*,  *{ x : x ∈ A ∧ x ∉ B }*         |
| set-builder      | *{ e : p }*                     | The set of all expressions *e* where predicates *p* hold.    |

*** Examples

Let *L(x)*   = *x* is lucky

and *W(x)*   = *x* is wise

and *domain* = people

and *X*      = *{ x | L(x) }*

and *Y*      = *{ x | W(x) }*

| set                                | translation                        |
|------------------------------------+------------------------------------|
| X ∪ Y = { x \vert{} L(x) ∨  W(x) } | People who are lucky or wise.      |
| X ∩ Y = { x \vert{} L(x) ∧  W(x) } | People who are lucky and wise.     |
| X \ Y = { x \vert{} L(x) ∧ ¬W(x) } | People who are lucky but not wise. |
| Y \ X = { x \vert{} W(x) ∧ ¬L(x) } | People who are wise but not lucky. |

** The Boolean Algebra of Sets

- universal set :: Some set that is large enough to contain all the sets under discussion as subsets.
  Given a universal set *U* and any subset *A* of *U*, *{ x ∈ U | ¬(x ∈ A) }*.

- complement :: *A^{C} = { x ∈ U | x ∉ A }*

| rule                         | algebra                         |
|------------------------------+---------------------------------|
| double complement            | (A^{C})^{C} = A                 |
| miscellaneous                | A ∪ A^{C} = U                   |
|                              | A ∩ A^{C} = Ø                   |
|                              | A \ (B ∪ C) = (A \ B) \ C       |
| unit element of union        | Ø ∪ A = A                       |
| zero element of intersection | Ø ∩ A = Ø                       |
| idempotent                   | A ∩ A = A                       |
|                              | A ∪ A = A                       |
| commutative                  | A ∩ B = B ∩ A                   |
|                              | A ∪ B = B ∪ A                   |
| associative                  | A ∩ (B ∩ C) = (A ∩ B) ∩ C       |
|                              | A ∪ (B ∪ C) = (A ∪ B) ∪ C       |
| distributive                 | A ∩ (B ∪ C) = (A ∩ B) ∪ (A ∩ C) |
|                              | A ∪ (B ∩ C) = (A ∪ B) ∩ (A ∪ C) |
| DeMorgan's laws              | (A ∩ B)^{C} = A^{C} ∪ B^{C}     |
|                              | (A ∪ B)^{C} = A^{C} ∩ B^{C}     |

*** Subset Relations

| union         | A ⊆ B ⇔ A ∪ B = B     |
| intersection  | A ⊆ B ⇔ A ∩ B = A     |
| difference    | A ⊆ B ⇔ A \ B = Ø     |
| antisymmetric | A ⊆ B ∧ B ⊆ A ⇔ B     |
| transitive    | A ⊆ B ∧ B ⊆ C ⇔ A ⊆ C |

*** Logic and Set Theory

Let *T* = true

and *F* = false

and *U* = universal set

and *p* = proposition

and *q* = proposition

and *A* = set

and *B* = set

| Logic   | Set Theory |
|---------+------------|
| T       | U          |
| F       | Ø          |
| p ∧ q   | A ∩ B      |
| p ∨ q   | A ∪ B      |
| ¬p      | A^{C}      |

** Functions

Let *A* and *B* be sets. A *function* from *A* to *B* is a subset of *A × B*, which has the property
that for each *a ∈ A*, the set contains one and only one ordered pair whose first coordinate is *a*.
If *(a, b)* is that ordered pair, then *b* is called the value of the function at *a* and is denoted
*f(a)*. If *b = f(a)*, then we also say that the function *f* maps *a* to *b*. The fact that *f* is
a function from *A* to *B* is indicated by the notation *f: A → B*.

*A* is the *domain* and *B* is the *range*. The *image* of *f* is the set *{ f(a) : a ∈ A }*.

A formula by itself is not a function, although it might well specify a function between two given
sets of numbers. Functions can apply to all kinds of sets, not just sets of numbers.

- functional relationship / mapping :: A relationship between two sets that associates exactly one
  element from the second set to each element of the first set.

- function :: A mathematical object that expresses a functional relationship between two sets. The
  notation *f: A → B* expresses that *f* is a function from the set *A* to the set *B*. Reads
  "*f* maps *A* to *B*."

If *f: A → B* and if *a ∈ A*, *f* associates some element of *B* to *a*, denoted by *f(a)* — called
the *value* of the function *f* at *a*.

- composition :: If *f: A → B* and *g: B → C* are functions, then *g ◦ f: A → C* is the function that
  is defined by *(g ◦ f)(a) = g(f(a))* for each *a ∈ A*.

- cross/cartesian product :: *A × B = { (a, b) : a ∈ A and b ∈ B }*

- tuple :: The general term for the member of a cross product. More specifically called
  an *ordered n-tuple*.

- graph :: The graph of function *f: A → B* is the set *{ (a, b) ∈ A × B : a ∈ A and b = f(a) }*

- first-class objects :: A set, ordered pair, or function that can be used just like any other entity.

#+begin_example
  function add(x: integer, y: integer) -> integer
              ^----------------------^    ^-----^
                       domain              range
  -- equivalent ->

  add: integer × integer → integer
#+end_example

** Counting Past Infinity

- one-to-one correspondence :: One set having just as many members as another set. A one-to-one
  correspondence between two sets *A* and *B* pairs each element of *A* with an element of *B* in
  such a way that every element of *B* is paired with one and only one element of *A*. The rules of
  counting are the rules of one-to-one correspondence: make sure that each object corresponds to one
  and only one number.

A set *A* is said to be *finite* if there is a one-to-one correspondence between *A* and *N_{n}* for
some natural number *n*. We then say that *n* is the *cardinality* of *A*. The notation *|A|* is
used to indicate the cardinality of *A*. That is, if *A* is a finite set, then *|A|* is the natural
number *n* such that there is a one-to-one correspondence between *A* and *N_{n}*. A set *B* is
*infinite* if for every *n ∈ N*, there is no one-to-one correspondence between *B* and *N_{n}*.

* Relations

- relation :: Given a set *X*, a relation over *X* is a set of ordered pairs of elements from *X*:
  *R ⊆ { (x, y) : x, y ∈ X }*. The statement *(x, y) ∈ R* reads "*x* is *R*-related to *y*" and can
  be written as *yRx*.

A function is a relation, however, relations are more general than functions. Any subset of *A × B*
is a relation.

- reflexive :: *R* if *∀a ∈ A (aRa)*.

- transitive :: *R* if *∀a ∈ A, ∀b ∈ A, ∀c ∈ A ((aRb ∧ bRc) → (aRc))*.

- symmetric :: *R* if *∀a ∈ A, ∀b ∈ B (aRb → bRa)*.

- antisymmetric :: *∀a ∈ A, ∀b ∈ B ((aRb ∧ bRa) → a = b)*

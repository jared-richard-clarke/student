* Pratt Parsing

** Sources

| source                                 | author            |
|----------------------------------------+-------------------|
| *Top Down Operator Precedence*         | Douglas Crockford |
| *Top-Down Operator Precedence Parsing* | Eli Bendersky     |
| *Crafting Interpreters*                | Bob Nystrom       |
| *Demystifying Pratt Parsers*           | Martin Janiczek   |

** Summary

Top down operator precedence parsing, as imagined by Vaughan Pratt, combines lexical semantics
with functions. Each lexeme is assigned a function — its semantic code. To parse a string of
lexemes is to execute the semantic code of each lexeme in turn from left to right.

** Infix Ambiguity

Given an operand between two operators, is the operand bound to the left operator or the right? 
Resolving this ambiguity is what makes parsing infix expressions complex.

#+begin_example
  d Ⓐ e Ⓑ f

  (d Ⓐ e) Ⓑ f or d Ⓐ (e Ⓑ f)
#+end_example

** Functions and Bindings

| type  | description                                                                                                 |
|-------+-------------------------------------------------------------------------------------------------------------|
| ~nud~ | Null denotation. The prefix handler.                                                                        |
| ~led~ | Left denotation. The infix/postfix handler.                                                                 |
| ~lbp~ | Left binding power of infix operator. It tells how strongly the operator binds to the argument at its left. |
| ~rbp~ | Right binding power.                                                                                        |

** Expression Parser

The engine of Pratt's technique, ~expression~, or ~parsePrecedence~ drives the parser, calling the
semantic code of each lexeme in turn from left to right.

*** JavaScript ( Crockford )

#+begin_src javascript
  let expression = function (rbp) {
      let left;
      let t = token;
      advance();
      left = t.nud();
      while (rbp < token.lbp) {
          t = token;
          advance();
          left = t.led(left);
      }
      return left;
  }
#+end_src

*** Python ( Bendersky )

#+begin_src python
  def expression(rbp=0):
      global token
      t = token
      token = next()
      left = t.nud()
      while rbp < token.lbp:
          t = token
          token = next()
          left = t.led(left)
      return left
#+end_src

*** C ( Nystrom )

#+begin_src c
  static void parsePrecedence(Precedence precedence) {
    advance();
    ParseFn prefixRule = getRule(parser.previous.type)->prefix;
    if (prefixRule == NULL) {
      error("Expect expression.");
      return;
    }

    prefixRule();
    while (precedence <= getRule(parser.current.type)->precedence) {
      advance();
      ParseFn infixRule = getRule(parser.previous.type)->infix;
      infixRule();
    }
  }
#+end_src

#+begin_quote
  "Here’s how the entire function works: At the beginning of ~parsePrecedence()~, we look up a
   prefix parser for the current token. The first token is always going to belong to some kind
   of prefix expression, by definition. It may turn out to be nested as an operand inside one
   or more infix expressions, but as you read the code from left to right, the first token you
   hit always belongs to a prefix expression.

   After parsing that, which may consume more tokens, the prefix expression is done. Now we look
   for an infix parser for the next token. If we find one, it means the prefix expression we
   already compiled might be an operand for it. But only if the call to ~parsePrecedence()~
   has a precedence that is low enough to permit that infix operator.

   If the next token is too low precedence, or isn’t an infix operator at all, we’re done.
   We’ve parsed as much expression as we can. Otherwise, we consume the operator and hand off
   control to the infix parser we found. It consumes whatever other tokens it needs
   (usually the right operand) and returns back to ~parsePrecedence()~. Then we loop back around
   and see if the next token is also a valid infix operator that can take the entire preceding
   expression as its operand. We keep looping like that, crunching through infix operators and
   their operands until we hit a token that isn’t an infix operator or is too low precedence
   and stop."

   — Bob Nystrom, *Crafting Interpreters*
#+end_quote

#+begin_example
      +----------+  +--------------+    +------------+
  +-->| number() |  | expression() |<---| grouping() |<--+
  |   +----------+  +--------------+    +------------+   |
  |                         |                            |
  |                         V                            |
  | +---------+    +-------------------+    +----------+ |
  | | unary() |--->| parsePrecedence() |<-+-| binary() | |
  | +---------+    +-------------------+  | +----------+ |
  |      ^                  |             |       ^      |
  |      |                  V             |       |      |
  |      |            +-----------+       |       |      |
  |      |            | getRule() |<------+       |      |
  |      |            +-----------+               |      |
  |      |                  |                     |      |
  |      |                  V                     |      |
  |      |           +--------------+             |      |
  |      |           | Parser Table |             |      |
  |      |           |--------------|             |      |
  +------|-----------| number       |             |      |
         |           |--------------|             |      |
         |           | "("          |-------------|------+
         |           |--------------|             |
         +-----------| "-"          |-------------+
                     |--------------|             |
                     | "+"          |-------------+
                     |--------------|             |
                     | "*"          |-------------+
                     |--------------|             |
                     | "/"          |-------------+
                     +--------------+
#+end_example

** Example Transformations

#+begin_src javascript
  // === expression ===

  let a = b + c;

  // === abstract syntax tree ===

  let ast = {
      id: "=",
      arity: "binary",
      first: {id: "a", arity: "word"},
      second: {
          id: "+",
          arity: "binary",
          first: {id: "b", arity: "word"},
          second: {id: "c", arity: "word"}
      }
  };

  // === stack trace ===
  //
  // statements()
  //     statement()
  //         expression(0)
  //             a.nud()
  //             while 0 < =.lbp
  //             =.led(a)
  //                 expression(10)
  //                     b.nud()
  //                     while 10 < +.lbp
  //                     +.led(b)
  //                         expression(60)
  //                         c.nud()

  // === expression ===

  a.b = c;

  // === abstract syntax tree ===

  let ast = {
      id: "=",
      arity: "binary",
      first: {
          id: ".",
          arity: "binary",
          first: {id: "a", arity: "word"},
          second: {id: "b", arity: "word"}
      },
      second: {id: "c", arity: "word"}

  };

  // === stack trace ===
  //
  // statements()
  //     statement()
  //         expression(0)
  //             a.nud()
  //             while 0 < ..lbp
  //             ..led(a)
  //                 expression(90)
  //                     b.nud()
  //                     while 90 < =.lbp
  //             while 0 < =.lbp
  //             =.led(a.b)
  //                 expression(60)
  //                 c.nud()
#+end_src

** Visual Intuition

~1 + 2 - 3 × 4 + 5 ÷ 6 ^ 7 - 8 × 9~ → ~(1 + 2 - (3 × 4) + (5 ÷ (6 ^ 7)) - (8 × 9))~

| BP | N   | OP | N | OP | N   | OP | N   | OP | N   | OP | N   | OP | N     | OP | N   | OP | N     |
|----+-----+----+---+----+-----+----+-----+----+-----+----+-----+----+-------+----+-----+----+-------|
|  0 | ( 1 |    | 2 |    | ( 3 |    | 4 ) |    | ( 5 |    | ( 6 |    | 7 ) ) |    | ( 8 |    | 9 ) ) |
|----+-----+----+---+----+-----+----+-----+----+-----+----+-----+----+-------+----+-----+----+-------|
|  1 |     | +  |   | -  |     |    |     | +  |     |    |     |    |       | -  |     |    |       |
|----+-----+----+---+----+-----+----+-----+----+-----+----+-----+----+-------+----+-----+----+-------|
|  2 |     |    |   |    |     | ×  |     |    |     | ÷  |     |    |       |    |     | ×  |       |
|----+-----+----+---+----+-----+----+-----+----+-----+----+-----+----+-------+----+-----+----+-------|
|  3 |     |    |   |    |     |    |     |    |     |    |     | ^  |       |    |     |    |       |

- BP :: Binding Power (Precedence)

- N :: Number

- OP :: Operator

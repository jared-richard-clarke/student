* The Lambda Calculus

** Lambda Expression Syntax

For this particular lambda calculus:

- Lower case names denote variables: (*x*, *y*).

- Single, upper-case letters denote whole lambda expressions: (*M*, *E*).

- Symbols and upper-case identifiers denote built-in functions: (*AND*, *IF*, *+*, *CONS*).

#+begin_example
  <expression> ::= <constant>               # Built-in constant
               |   <variable>               # Variable name
               |   <expression><expression> # Application
               |   λ<variable>.<expression> # Lambda abstraction
#+end_example

As opposed to the pure lambda calculus, an applied lambda calculus — such as the
one in this book — can be extended with primitive constants and operations:

1. arithmetic functions: (*+*, *-*, *\star{}*, */*)

2. constants: ((*0*, *1*, *2* ...), (*TRUE*, *FALSE*), ('*a*'*, '*b*', '*c*' ...), (*NIL*))

3. logical functions: (*AND*, *OR*, *NOT*, *IF*)

4. data constructors: (*CONS*, *HEAD*, *TAIL*)

** Lambda Abstraction

#+begin_example
  λx.+ x 7

  -- reads ->

  λ                x  .    +   x    7
  ^                ^  ^    ^   ^    ^
  |                |  |    |   |    |
  That function of x that adds x to 7
#+end_example

The body of a lambda abstraction extends as far to the right as possible:
*λx.M E* implies *λx.(M E)*, not *(λx.M) E*.

** Bound and Free Variables

The operator *λ* binds its variable wherever it occurs in the body of the abstraction.
Variables that fall within the scope of an abstraction is *bound*. All other variables
are free.

- The set of free variables of a lambda expression *M* is denoted as *FV(M)*:

  1. *FV(x) = {x}*, where *x* is a variable.

  2. *FV(λx.M) = FV(M) \ {x}*

  3. *FV(M N) = FV(M) ∪ FV(N)*

#+begin_example
       +-- bound
  λx.+ x y
         +-- free

             +-- bound
  + x ((λx.+ x 7) 4)
    +-- free
#+end_example

** β-Conversion (Beta)

*(λx.M) E ⟷ M[E/x]*

Denotes relation between function abstraction and application.

** α-Conversion (Alpha)

*λx.M[x] ⟷ λy.M[y]*

Prevents name clashes of formal parameters within lambda abstractions through
consistent renaming.

** η-Conversion (Eta)

*λx.M x ⟷ M* where *x ∉ FV(M)* and *M* denotes a function.

Eliminates redundant lambda abstractions.

** Recursion

#+begin_example
  === Y Combinator ===
  Y := λf.(λx.f (x x)) (λx.f (x x))

  === fixed point ===
  Y F

  ≡ (λf.(λx.f (x x)) (λx.f (x x))) F

  ≡ (λx.F (x x)) (λx.F (x x))

  ≡ F ((λx.F (x x)) (λx.F (x x)))

  ≡ F (Y F)

  Y F → F (Y F)
#+end_example

** Denotational Semantics of The Lambda Calculus

Two perspectives on functions:

1. An algorithm, which will produce a value given an argument. A dynamic or operational
   view of a function as a sequence of operations in time.

2. A set of ordered argument-value pairs. A static or denotational view of a function
   as a fixed set of associations.

*β*, *α*, and *η* are purely syntactic transformations. The lambda calculus can be regarded
as a formal system for manipulating syntactic symbols.

The purpose of denotational semantics of a language is to assign a value to every expression
in that language. An expression is a syntactic object, formed according to the syntax rules
of the language. A value, by contrast, is an abstract mathematical object.

A function, like *Eval*, maps syntactic expressions to mathematical values.

#+begin_example
Eval[k] p      = A built-in operation that requires semantic equations to specify
                 both its meaning and imply its operational behavior.

Eval[x] p      = p x

Eval[E1, E2] p = (Eval[E1] p) (Eval[E2] p)

Eval[λx.E] p a = Eval[E] p[x=a]

    where k          is a constant or built-in function
          x          is a variable
          E, E1, E2  are expressions
          p          is the environment, a function that maps variables to values
#+end_example

** The Enriched Lambda Calculus
  
#+begin_example
  <expression> ::= <constant>
               |   <variable>
               |   <expression><expression>
               |   λ<pattern>.<expression>
               |   let <pattern> = <expression> in <expression>
               |   letrec <pattern> = <expression>
                          ...
                          <pattern> = <expression>
                   in <expression>
               |   <expression> ▯ <expression>
               |   case <variable> of
                   <pattern> -> <expression>
                   ...
                   <pattern> -> <expression>

  <pattern> ::= <constant>
            |   <variable>
            |   <constructor><pattern>
                             ...
                             <pattern>
#+end_example

** *let* Semantics

#+begin_example
  let v = B in E ≡ (λv.E) B
#+end_example

As a matter of convenience, multiple definitions can be written in the same ~let~.

#+begin_example
  === example 1 ===

  let x = 3
      y = 4
  in (* x y)

  -- equivalent ->

  let x = 3
  in (let y = 4
      in (* x y))

  -- equivalent ->

  λx.λy.(* x y) 3 4

  === example 2 ===

  let x = 3
      y = 4
      z = (* x y)
  in z

  -- equivalent ->

  let x = 3
  in (let y = 4
      in (let z = (* x y)
          in z))

  -- equivalent ->

  λx.(λy.(λz.(z) (* x y)) 4) 3
#+end_example

** *letrec* Semantics

#+begin_example
  letrec v = B in E ≡ let v = Y (λv.B) in E
                      where Y = (λf.(λx.f (x x)) (λx.f (x x)))
#+end_example

** Example Translation

#+begin_example
  -- definition
  average a b = (a + b) / 2

  -- expression
  average 2 (3 + 5)

  -- enriched lambda calculus
  let
    average = λa.λb.(/ (+ a b) 2)
  in
    average 2 (+ 3 5)

  -- plain lambda calculus
  (λaverage.(average 2 (+ 3 5))) (λa.λb.(/ (+ a b) 2))
#+end_example

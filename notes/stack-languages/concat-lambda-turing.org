* Concat, Lambda, and Turing

** Sources

| source                                           | author      |
|--------------------------------------------------+-------------|
| *Concatenative Programming: From Ivory to Metal* | John Purdy  |
| *The Theory of Concatenative Combinators*        | Brent Kirby |
| *Turing Machine*                                 | Wikipedia   |

** Concatenative Programming

- Concatenative Calculus ≈ Combinatory Logic + Continuation-Passing Style

- Variables are the ~GOTOs~ of data.

- Syntactic Monoid :: Concatenation and an empty expression.

- Semantic Monoid :: Function composition and identity function.  

** Lambda Calculus

#+begin_example
  e ::= x             # Variables
    |   λx.e          # Abstraction
    |   e1 e2         # Application

  λx.M[x] → λy.M[y]   # α-conversion

  (λx.M)N → M[x := N] # β-reduction
#+end_example

** Turing Machines

#+begin_example
  M = (Q, Γ, b, ∑, δ, q₀, F)

  Q                               # Finite, non-empty set of states.
  Γ                               # Finite, non-empty set of alphabet symbols.
  b ∈ Γ                           # Blank symbol.
  ∑ ⊆ Γ \ {b}                     # Set of input symbols.
  q₀ ∈ Q, F ⊆ Q                   # Initial state and final states.                              
  δ: (Q \ F) × Γ → Q × Γ × {L, R} # State transition function where L = left-shift and R = right-shift.
                                  # If δ is not defined on the current state and symbol, the machine halts.

  Begin with initial state and tape.
  Repeat:
      - If final state, then halt.
      - Apply transition function.
      - Modify tape.
      - Shift left or right.
#+end_example

** General Recursive Functions

#+begin_example
  f(x₁, x₂ ...) = n    # Constant
  S(x) = x + 1         # Successor
  Pᵢᵏ(x₁, x₂ ...) = xᵢ # Projection
  f ∘ g                # Composition
  p(f, g)              # Primitive recursion
  μ(f)                 # Minimization
#+end_example

** Combinatory Logic

The most basic combinators are ~S~ and ~K~. ~S~ applies a function to an
argument within an environment. ~K~ selects 1 of 2 arguments.

#+begin_example
  Sxyz = xz(yz)          # Application
  S    = λx.λy.λz.xy(yz) # "Starling"

  Kxy  = x               # Constant
  K    = λx.λy.x         # "Kestrel"

  Ix   = x               # Identity
  I    = λx.x            # "Idiot"

  Bxyz = x(yz)           # Compose
  Cxyz = xzy             # Flip
  Kxy = x                # Constant
  Wxy = xyy              # Duplicate

  SKKx = Kx(Kx) = x

  M = SII = λx.xx
  L = CBM = λf.λx.f(xx)
  Y = SLL = λf.(λx.f(xx))(λx.f(xx))
#+end_example

** Concatenative Calculus

#+begin_example
  E ::= C     # Combinator
    |   [E]   # Quotation
    |   E₁ E₂ # Composition
              # (E₂ ∘ E₁)

  # === Turing-complete combinators ===

  [A] dup      = [A] [A]
  [A] [B] swap = [B] [A]
  [A] drop     =
  [A] quote    = [[A]]
  [A] [B] cat  = [A B]
  [A] call     = A
#+end_example

*** A Smaller Basis

#+begin_example
  [B] [A] k    = A
  [B] [A] cake = [[B] A] [A [B]]

  [B] [A] cons = [[B] A]
  [B] [A] take = [A [B]]
#+end_example


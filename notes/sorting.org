* Sorting Algorithms

** Bubble Sort

| average | O(n²) |
| best    | O(n)  |
| worst   | O(n²) |
| space   | O(1)  |

*** C Implementation

#+begin_src c
  void swap(int *xp, int *yp)
  {
    int temp = *xp;
    *xp = *yp;
    *yp = temp;
  }

  void bubble_sort(int arr[], int n)
  {
    int i, j;

    for (i = 0; i < n - 1; i += 1)
      {
        for (j = 0; j < n - i - 1; j += 1)
          {
            if (arr[j] > arr[j + 1])
              {
                swap(&arr[j], &arr[j + 1]);
              }
          }
      }
  }
#+end_src

** Selection Sort

| average | O(n²) |
| best    | O(n²) |
| worst   | O(n²) |
| space   | O(1)  |

*** C Implementation

#+begin_src c
  void swap(int *xp, int *yp)
  {
    int temp = *xp;
    *xp = *yp;
    *yp = temp;
  }

  void selection_sort(int arr[], int n)
  {
    int i, j, min_idx;

    for (i = 0; i < n - 1; i += 1)
      {
        min_idx = i;
        for (j = i + 1; j < n; j += 1)
          {
            if (arr[j] < arr[min_idx])
              {
                min_idx = j;
              }
          }
        swap(&arr[min_idx], &arr[i]);
      }
  }
#+end_src

** Insertion Sort

| average | O(n²) |
| best    | O(n)  |
| worst   | O(n²) |
| space   | O(1)  |

*** C Implementation

#+begin_src c
  void insertion_sort(int arr[], int n)
  {
      int i, key, j;
      for (i = 1; i < n; i += 1)
      {
          key = arr[i];
          j = i - 1;

          while (j >= 0 && arr[j] > key)
          {
              arr[j + 1] = arr[j];
              j = j - 1;
          }
          arr[j + 1] = key;
      }
  }
#+end_src

*** Haskell Implementation

#+begin_src haskell
  sort :: [a] -> [a]
  sort = foldr insert []

  insert :: a -> [a] -> [a]
  insert x []     = [x]
  insert x (y:ys)
     | x <= y     = x:y:ys
     | otherwise  = y:insert x ys
#+end_src

** Quick Sort

| average | O(n × log n) |
| best    | O(n × log n) |
| worst   | O(n²)        |
| space   | O(n)         |

*** C Implementation

#+begin_src c
  void swap(int *a, int *b)
  {
    int t = *a;
    *a = *b;
    *b = t;
  }

  int partition(int array[], int low, int high)
  {

    int pivot = array[high];
    int i = (low - 1);

    for (int j = low; j < high; j += 1)
      {
        if (array[j] <= pivot)
          {
            i += 1;
            swap(&array[i], &array[j]);
          }
      }

    swap(&array[i + 1], &array[high]);
    return (i + 1);
  }

  void quick_sort(int array[], int low, int high)
  {
    if (low < high)
      {
        int pivot = partition(array, low, high);
        quick_sort(array, low, pivot - 1);
        quick_sort(array, pivot + 1, high);
      }
  }
#+end_src

*** Haskell Implementation

#+begin_src haskell
  qsort :: [a] -> [a]
  qsort []     = []
  qsort (x:xs) = qsort [ u | u<-xs, u<x ] ++ [ x ] ++ qsort [ u | u<-xs, u>=x ]
#+end_src

** Merge Sort

| average | O(n × log n) |
| best    | O(n × log n) |
| worst   | O(n × log n) |
| space   | O(n)         |

*** C Implementation

#+begin_src c
  void merge(int arr[], int l, int m, int r)
  {
    int i, j, k;
    int n1 = m - l + 1;
    int n2 = r - m;

    int L[n1], R[n2];

    for (i = 0; i < n1; i += 1)
      {
        L[i] = arr[l + i];
      }
    for (j = 0; j < n2; j += 1)
      {
        R[j] = arr[m + 1 + j];
      }
    i = 0;
    j = 0;
    k = l;

    while (i < n1 && j < n2)
      {
        if (L[i] <= R[j])
          {
            arr[k] = L[i];
            i += 1;
          }
        else
          {
            arr[k] = R[j];
            j += 1;
          }
        k += 1;
      }

    while (i < n1)
      {
        arr[k] = L[i];
        i += 1;
        k += 1;
      }

    while (j < n2)
      {
        arr[k] = R[j];
        j += 1;
        k += 1;
      }
  }

  void merge_sort(int arr[], int l, int r)
  {
    if (l < r)
      {
        int m = l + (r - l) / 2;

        merge_sort(arr, l, m);
        merge_sort(arr, m + 1, r);
        merge(arr, l, m, r);
      }
  }
#+end_src

* Syntactic Abstraction in Scheme

** Sources

| source                                            | author                                          |
|---------------------------------------------------+-------------------------------------------------|
| *Syntactic Abstraction in Scheme*                 | R. Kent Dybvig, Robert Hieb, and Carl Bruggeman |
| *Syntactic Abstraction: The syntax-case expander* | R. Kent Dybvig                                  |

** Introduction

- The capturing problem :: A fundamental problem with traditional Lisp macro systems is
  that they do not respect lexical scoping. Moving a piece of syntax from one place to
  another might lead to the accidental rebinding of a program's identifiers.

Dybvig, Hieb, and Bruggeman present a macro system for Scheme that enforces hygiene automatically
while maintaining the correlation between source and object code for debuggers and optimizing
compilers:

- Enforces hygiene with constant overhead for macros written in a full, general-purpose language.

- Solves the source-object correlation problem for variables and constants as well as structured
  expressions.

- Supplies a hygiene-preserving mechanism for controlled identifier capture.

- Maintain referential transparency for all local macros. Free identifiers appearing in the output
  of a local macro are scoped to where the macro definition appears.

- Provides automatic syntax checking, input destructuring, and output restructuring for low-level
  macros.

#+begin_quote
  "[H]ygienic macro expansion implements lexical scoping with respect to the source code,
   whereas unhygienic expansion implements lexical scoping with respect to the code
   after expansion."

  — *Syntactic Abstraction: The syntax-case expander*, R. Kent Dybvig
#+end_quote

*** Identifier Capture

- A program's bound identifiers capture a macro's free identifiers.

- A program's free identifiers are captured by a macro's bound identifiers.
  
#+begin_src scheme
  ;; 1. Macro identifiers shadow runtime identifiers.
  (let ([t "okay"])
    (or #f t))

  ;; === naive expansion ===
  ;; where (or e1 e2) -> (let ([t e1]) (if t t e2))
  (let ([t "okay"])
    (let ([t #f])
      (if t t t)))

  ;; 2. Runtime identifiers shadow macro identifiers.
  (let ([if #f])
    (or if "okay"))

  ;; === naive expansion ===
  ;; where (or e1 e2) -> (let ([t e1]) (if t t e2))
  (let ([if #f])
    (let ([t if])
      (if t t "okay")))
#+end_src

** The Language

New syntactic forms, or macros, are defined by associating keywords with transformation
procedures, or transformers. When the macro expander encounters a macro call, the macro
call expression is passed to the associated transformer to be processed. The expansion
process is repeated for the result returned by the transformer until no macro calls remain.

#+begin_src scheme
  ;; === macro call ===
  (keyword sub-form ...)

  ;; === macro definition and binding ===
  (define-syntax keyword transformer)

  (let-syntax ([keyword transformer] ...) body)

  (letrec-syntax ([keyword transformer] ...) body)

  ;; === destructuring and restructuring ===
  (syntax-case input (literal ...)
    (pattern fender expression) ...)

  (syntax template)

  (syntax->datum syntax)

  (datum->syntax identifier datum)

  ;; === predicates ===
  (identifier? object)

  (free-identifier=?  identifier-1 identifier-2)

  (bound-identifier=? identifier-1 identifier-2)
#+end_src

- syntax object :: The argument to a macro transformer, a syntax object contains contextual
  information about an expression in addition to its structure. This contextual information
  is used by the expander to maintain hygiene and referential transparency. Transformers can
  compare identifiers according to their use as free identifiers, bound identifiers, or
  symbolic data. Syntax objects may also contain source annotations, which correlate final
  object code with original source code. Syntax objects may contain information that, for
  efficiency reasons, has not been fully processed.

#+begin_src scheme
  ;; Hygiene dictates that the binding for "t" is visible only within code
  ;; introduced by the macro, not within forms introduced by the macro call.
  (define-syntax or
    (lambda (x)
      (syntax-case x ()
        [(_)   (syntax #f)]
        [(_ e) (syntax e)]
        [(_ e1 e2 e3 ...)
         (syntax (let ([t e1])
                   (if t t (or e2 e3))))])))

  ;; === "syntax-rules" defined by "syntax-case" ===
  (define-syntax syntax-rules
    (lambda (x)
      (syntax-case x ()
        [(_ (i ...) ((keyword . pattern) template) ...)
         (syntax (lambda (x)
                   (syntax-case x (i ...)
                     ((_ . pattern) (syntax template)) ...)))])))

  ;; === "with-syntax" defined by "syntax-case" ===
  (define-syntax with-syntax
    (lambda (x)
      (syntax-case x ()
        [(_ ((p s) ...) e1 e2 ...)
         (syntax (syntax-case (list s ...) ()
                   [(p ...) (begin e1 e2 ...)]))])))
#+end_src

** Traditional Macro-Expansion Algorithm (Simplified)

The expander is assumed to be part of the standard evaluation process, where the value
of program *e* is obtained by *eval(expand(e, r))*. The symbols *quote* and *lambda*
are bound to *Special* in the initial expansion environment *r*. All other symbols are
bound to *Variable*.

#+begin_example
  # === Macro Expansion Algorithm ===

  e = Expression
  s = Symbol
  c = Constant

  r ∈ Environment = Symbol -> Transformer + { Variable } + { Special }
    where Special = "quote" and "lambda"

  t ∈ Transformer = Expression -> Expression

  expand: Expression × Environment -> Expanded-Expression

  expand(e, r) =
    case parse(e, r) of:

      constant(c)             -> symbolic-data(c)

      variable(s)             -> variable(s)

      application(e₁, e₂)     -> application(expand(e₁, r), expand(e₂, r))

      symbolic-data(e)        -> symbolic-data(e)

      function(s, e)          -> function(s, expand(e, r[s := Variable]))

      macro-application(s, e) -> expand(t(e), r) where t = r(s)

      # === Macro Expansion Parser ===

      parse: Expression × Environment -> Parsed-Expression

      parse(⟦c⟧, r)            = constant(c)
      parse(⟦s⟧, r)            = variable(s) if r(s) = Variable
      parse(⟦(e₁ e₂)⟧, r)      = application(e₁, e₂) if e₁ ∉ Symbol
      parse(⟦(s e)⟧, r)        = macro-application(s, e) if r(s) ∈ Transformer
      parse(⟦(quote e)⟧, r)    = symbolic-data(e) if r(⟦quote⟧) = Special
      parse(⟦(lambda s e)⟧, r) = function(s, e) if r(⟦lambda⟧) = Special
#+end_example

** Substitution-Based Macro-Expansion Algorithm

#+begin_quote
  "In the λ-calculus, alpha conversion is used to circumvent hygiene problems caused
   by program transformations. Since the actual name of a bound variable is immaterial,
   a binding expression can be converted into an equivalent expression in which different
   names are used for the bound variables. Our algorithm uses alpha conversion to
   preserve hygiene during macro expansion.

   Whether an identifier is being used as symbolic data or as a program variable,
   pattern variable, or keyword cannot be determined until after macro expansion. Since
   the name of an identifier used as symbolic data is important, naive alpha conversion
   is not viable in traditional macro expansion algorithms. Our algorithm makes alpha
   conversion possible by abandoning the traditional Lisp identification of variables
   and symbols. Instead, we introduce a new type of object, the identifier, which
   maintains both symbolic names and binding names until an identifier’s role in a
   program is determined. Alpha conversion is accomplished by replacing only the binding
   names of bound identifiers."

  — *Syntactic Abstraction in Scheme*, R. Kent Dybvig, Robert Hieb, and Carl Bruggeman
#+end_quote

The basic strategy of a hygienic macro processor is to replace bindings within a macro
definition with generated symbols and to lookup free variables within a macro definition
within the scope of the macro definition rather than the scope of the macro call.

- identifier :: An ordered triple: *<symbolic name, binding name, { mark ... }>*

- mark(i, m) :: Adds mark to the mark field of *i* unless it is already present,
  in which case it removes it. Marks distinguish identifiers introduced by
  transformers.

- subst(i₁, i₂, s) :: Replaces the binding name field of *i₁* with *s* if the binding
  names and the marks of *i₁* and *i₂* are the same, otherwise it leaves the identifier
  unchanged.

- strip(i) :: Extracts the symbolic name of an identifier.

- resolve(i) :: Extracts the binding name of an identifier.

- free-identifier=? :: If and only if *resolve(i₁) = resolve(i₂)*. Because identifier references
  are lexically scoped, two identifiers are equal free identifiers if and only if they refer
  to the same lexical or top-level binding.

- bound-identifier=? :: If and only if *resolve(subst(i₁, i₂, s)) = s* for a fresh symbol *s*.
  In general, two identifiers are equal bound identifiers if and only if both are present in
  the original program or both are introduced by the same macro call.

#+begin_quote
  "Two identifiers that are ~bound-identifier=?~ are also ~free-identifier=?~,
   but two identifiers that are ~free-identifier=?~ may not be ~bound-identifier=?~.
   An identifier introduced by a macro transformer may refer to the same enclosing
   binding as an identifier not introduced by the transformer, but an introduced
   binding for one will not capture references to the other."

  — *Syntactic Abstraction in Scheme*, R. Kent Dybvig, Robert Hieb, and Carl Bruggeman
#+end_quote

#+begin_example
  # === Macro Expansion Algorithm ===

  e = Expression
  s = Symbol
  i = Identifier

  r ∈ Environment = Symbol -> Transformer + { Variable } + { PVariable } + { Special }

  t ∈ Transformer = Expression -> Expression

  expand: Expression × Environment -> Expanded-Expression

  expand(e, r) =
    case parse(e, r) of:

      variable(i)                   -> variable(resolve(i))

      application(e₁, e₂)           -> application(expand(e₁, r), expand(e₂, r))

      symbolic-data(e)              -> symbolic-data(strip(e))

      syntax-data(e)                -> symbolic-data(e)

      function(i, e)                -> function(s, expand(subst(e, i, s), r'))
                                         where r' = r[s := Variable] and s is fresh

      pfunction(i, e)               -> function(s, expand(subst(e, i, s), r'))
                                         where r' = r[s := PVariable] and s is fresh

      macro-application(i, e)       -> expand(mark(t(mark(e, m)), m), r)
                                         where t = r(resolve(i)) and m is fresh

      syntax-binding(i, e₁, e₂)     -> expand(subst(e₂, i, s), r[s := t])
                                         where t = eval(expand(e₁, r)) and s is fresh

      rec-syntax-binding(i, e₁, e₂) -> expand(subst(e₂, i, s), r[s := t])
                                         where t = eval(expand(subst(e₁, i, s), r)) and s is fresh

      Environment = Symbol -> Transformer + { Variable } + { PVariable } + { Special }

  # === Macro-Expansion Parser ===

  parse: Expression × Environment -> Parsed-Expression

  parse(⟦c⟧, r)                         = symbolic-data(c)
  parse(⟦i⟧, r)                         = variable(i) if r(resolve(i)) = Variable
  parse(⟦(e₁ e₂)⟧, r)                   = application(e₁, e₂) if e₁ ∉ Symbol
  parse(⟦(i e)⟧, r)                     = application(i, e) if r(resolve(i)) = Variable
  parse(⟦i e⟧, r)                       = macro-application(i, e) if r(resolve(i)) ∈ Transformer
  parse(⟦(quote e)⟧, r)                 = symbolic-data(e) if r(⟦quote⟧) = Special
  parse(⟦(lambda i e)⟧, r)              = function(i, e) if r(⟦lambda⟧) = Special
  parse(⟦(plambda i e)⟧, r)             = pfunction(i, e) if r(⟦plambda⟧) = Special
  parse(⟦(syntax i)⟧, r)                = syntax-data(i) if r(resolve(i)) ≠ PVariable
  parse(⟦(syntax i)⟧, r)                = variable(i) if r(resolve(i)) = PVariable
  parse(⟦(let-syntax (i e₁) e₂)⟧, r)    = syntax-binding(i, e₁, e₂) if r(⟦let-syntax⟧) = Special
  parse(⟦(letrec-syntax (i e₁) e₂)⟧, r) = rec-syntax-binding(i, e₁, e₂) if r(⟦letrec-syntax⟧) = Special
#+end_example

*** Example Macro Expansion

#+begin_src scheme
  ;; identifier = <symbolic name, binding name, { mark ... }>

  ;; Substitution and marking prevent the binding for "if" in the source expression
  ;; from interfering with the macro's use of "if" and the macro's binding for "t"
  ;; from interfering with the source expression's reference to "t".

  (let ([if #f])
    (or if t))

  ;; - expands ->

  (<let let {}> ([<if if {}> #f])
    (<or or {}> <if if {}> <t t {}>))

  ;; - expands ->

  (let ([G1 #f])
    (<or or {}> <if G1 {}> <t t {}>))

  ;; - expands ->
  ;; The transformer for "or" is invoked. Identifiers in its input are marked "m₁".

  (let ([G1 #f])
    (<or or {m₁}> <if G1 {m₁}> <t t {m₁}>))

  ;; - expands ->

  (let ([G1 #f])
    (<let let {}> ([<t t {}> <if G1 {m₁}>])
      (<if if {}> <t t {}> <t t {}> <t t {m₁}>)))

  ;; - expands ->
  ;; Within the output of the "or" transformer, identifiers not marked "m₁"
  ;; are marked "m₁". Identical marks cancel.

  (let ([G1 #f])
    (<let let {m₁}> ([<t t {m₁}> <if G1 {}>])
      (<if if {m₁}> <t t {m₁}> <t t {m₁}> <t t {}>)))

  ;; - expands ->

  (let ([G1 #f])
    (let ([G2 <if G1 {}>])
      (<if if {m₁}> <t G2 {m₁}> <t G2 {m₁}> <t t {}>)))

  ;; - expands ->

  (let ([G1 #f])
    (let ([G2 G1])
      (<if if {m₁}> <t G2 {m₁}> <t G2 {m₁}> <t t {}>)))

  ;; - expands ->

  (let ([G1 #f])
    (let ([G2 G1])
      (if <t G2 {m₁}> <t G2 {m₁}> <t t {}>)))

  ;; - expands ->

  (let ([G1 #f])
    (let ([G2 G1])
      (if G2 G2 t)))
#+end_src
